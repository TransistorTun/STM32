
DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e34  08003e34  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e34  08003e34  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e34  08003e34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08003eac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003eac  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdde  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2d  00000000  00000000  0002be77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0002d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f7a  00000000  00000000  0002f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e82a  00000000  00000000  000471d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa23  00000000  00000000  000559fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e041f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000e0470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d70 	.word	0x08003d70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003d70 	.word	0x08003d70

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa97 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f895 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f949 	bl	80003f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8cd 	bl	80002fc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000162:	f000 f8f9 	bl	8000358 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_i2c_init(&p_lcd, &hi2c1, 20, 4, 0x27<<1);
 8000166:	234e      	movs	r3, #78	; 0x4e
 8000168:	9300      	str	r3, [sp, #0]
 800016a:	2304      	movs	r3, #4
 800016c:	2214      	movs	r2, #20
 800016e:	493c      	ldr	r1, [pc, #240]	; (8000260 <main+0x114>)
 8000170:	483c      	ldr	r0, [pc, #240]	; (8000264 <main+0x118>)
 8000172:	f003 f837 	bl	80031e4 <lcd_i2c_init>

  for (int i = 0; i < 255; i++)
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e010      	b.n	800019e <main+0x52>
  {
	   if (HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 100) == HAL_OK)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	b299      	uxth	r1, r3
 8000180:	2364      	movs	r3, #100	; 0x64
 8000182:	2201      	movs	r2, #1
 8000184:	4836      	ldr	r0, [pc, #216]	; (8000260 <main+0x114>)
 8000186:	f001 fb0f 	bl	80017a8 <HAL_I2C_IsDeviceReady>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d103      	bne.n	8000198 <main+0x4c>
	   {
		   device = i;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	b2da      	uxtb	r2, r3
 8000194:	4b34      	ldr	r3, [pc, #208]	; (8000268 <main+0x11c>)
 8000196:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 255; i++)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2bfe      	cmp	r3, #254	; 0xfe
 80001a2:	ddeb      	ble.n	800017c <main+0x30>
	   }
  }

  DS3231_Init(&DS3231, &hi2c1);
 80001a4:	492e      	ldr	r1, [pc, #184]	; (8000260 <main+0x114>)
 80001a6:	4831      	ldr	r0, [pc, #196]	; (800026c <main+0x120>)
 80001a8:	f002 ff6a 	bl	8003080 <DS3231_Init>
  //DS3231_SetTime(&DS3231, 0, 27, 11);
  DS3231_SetDate(&DS3231, 5, 16, 3, 23);
 80001ac:	2317      	movs	r3, #23
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	2303      	movs	r3, #3
 80001b2:	2210      	movs	r2, #16
 80001b4:	2105      	movs	r1, #5
 80001b6:	482d      	ldr	r0, [pc, #180]	; (800026c <main+0x120>)
 80001b8:	f002 ff95 	bl	80030e6 <DS3231_SetDate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DS3231_GetTime(&DS3231);
 80001bc:	482b      	ldr	r0, [pc, #172]	; (800026c <main+0x120>)
 80001be:	f002 ff6c 	bl	800309a <DS3231_GetTime>
	  DS3231_GetDate(&DS3231);
 80001c2:	482a      	ldr	r0, [pc, #168]	; (800026c <main+0x120>)
 80001c4:	f002 ffc3 	bl	800314e <DS3231_GetDate>
	  HAL_Delay(200);
 80001c8:	20c8      	movs	r0, #200	; 0xc8
 80001ca:	f000 fabd 	bl	8000748 <HAL_Delay>

	  lcd_set_cursor(&p_lcd, 0, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2100      	movs	r1, #0
 80001d2:	4824      	ldr	r0, [pc, #144]	; (8000264 <main+0x118>)
 80001d4:	f003 f8de 	bl	8003394 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, "HELLO PhamTuan!");
 80001d8:	4925      	ldr	r1, [pc, #148]	; (8000270 <main+0x124>)
 80001da:	4822      	ldr	r0, [pc, #136]	; (8000264 <main+0x118>)
 80001dc:	f003 f904 	bl	80033e8 <lcd_send_string>
	  sprintf(time, "%02d:%02d:%02d", DS3231.Hour, DS3231.Min, DS3231.Sec);
 80001e0:	4b22      	ldr	r3, [pc, #136]	; (800026c <main+0x120>)
 80001e2:	799b      	ldrb	r3, [r3, #6]
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b21      	ldr	r3, [pc, #132]	; (800026c <main+0x120>)
 80001e8:	795b      	ldrb	r3, [r3, #5]
 80001ea:	4619      	mov	r1, r3
 80001ec:	4b1f      	ldr	r3, [pc, #124]	; (800026c <main+0x120>)
 80001ee:	791b      	ldrb	r3, [r3, #4]
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	460b      	mov	r3, r1
 80001f4:	491f      	ldr	r1, [pc, #124]	; (8000274 <main+0x128>)
 80001f6:	4820      	ldr	r0, [pc, #128]	; (8000278 <main+0x12c>)
 80001f8:	f003 f940 	bl	800347c <siprintf>
	  lcd_set_cursor(&p_lcd, 0, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2100      	movs	r1, #0
 8000200:	4818      	ldr	r0, [pc, #96]	; (8000264 <main+0x118>)
 8000202:	f003 f8c7 	bl	8003394 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, time);
 8000206:	491c      	ldr	r1, [pc, #112]	; (8000278 <main+0x12c>)
 8000208:	4816      	ldr	r0, [pc, #88]	; (8000264 <main+0x118>)
 800020a:	f003 f8ed 	bl	80033e8 <lcd_send_string>
	  sprintf(time, "Thu%2d  %02d-%02d-20%02d",DS3231.Day, DS3231.Date, DS3231.Month, DS3231.Year);
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <main+0x120>)
 8000210:	7a1b      	ldrb	r3, [r3, #8]
 8000212:	4619      	mov	r1, r3
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <main+0x120>)
 8000216:	79db      	ldrb	r3, [r3, #7]
 8000218:	4618      	mov	r0, r3
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <main+0x120>)
 800021c:	7a5b      	ldrb	r3, [r3, #9]
 800021e:	461a      	mov	r2, r3
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <main+0x120>)
 8000222:	7a9b      	ldrb	r3, [r3, #10]
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	9200      	str	r2, [sp, #0]
 8000228:	4603      	mov	r3, r0
 800022a:	460a      	mov	r2, r1
 800022c:	4913      	ldr	r1, [pc, #76]	; (800027c <main+0x130>)
 800022e:	4812      	ldr	r0, [pc, #72]	; (8000278 <main+0x12c>)
 8000230:	f003 f924 	bl	800347c <siprintf>
	  lcd_set_cursor(&p_lcd, 0, 2);
 8000234:	2202      	movs	r2, #2
 8000236:	2100      	movs	r1, #0
 8000238:	480a      	ldr	r0, [pc, #40]	; (8000264 <main+0x118>)
 800023a:	f003 f8ab 	bl	8003394 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, time);
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <main+0x12c>)
 8000240:	4808      	ldr	r0, [pc, #32]	; (8000264 <main+0x118>)
 8000242:	f003 f8d1 	bl	80033e8 <lcd_send_string>
	  lcd_set_cursor(&p_lcd, 0, 3);
 8000246:	2203      	movs	r2, #3
 8000248:	2100      	movs	r1, #0
 800024a:	4806      	ldr	r0, [pc, #24]	; (8000264 <main+0x118>)
 800024c:	f003 f8a2 	bl	8003394 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, "HAVE A NICE DAY!");
 8000250:	490b      	ldr	r1, [pc, #44]	; (8000280 <main+0x134>)
 8000252:	4804      	ldr	r0, [pc, #16]	; (8000264 <main+0x118>)
 8000254:	f003 f8c8 	bl	80033e8 <lcd_send_string>
	  HAL_Delay(200);
 8000258:	20c8      	movs	r0, #200	; 0xc8
 800025a:	f000 fa75 	bl	8000748 <HAL_Delay>
	  DS3231_GetTime(&DS3231);
 800025e:	e7ad      	b.n	80001bc <main+0x70>
 8000260:	200000ac 	.word	0x200000ac
 8000264:	20000148 	.word	0x20000148
 8000268:	2000008c 	.word	0x2000008c
 800026c:	20000090 	.word	0x20000090
 8000270:	08003d88 	.word	0x08003d88
 8000274:	08003d98 	.word	0x08003d98
 8000278:	20000154 	.word	0x20000154
 800027c:	08003da8 	.word	0x08003da8
 8000280:	08003dc4 	.word	0x08003dc4

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	; 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 f8ea 	bl	800346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	2310      	movs	r3, #16
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 ff7e 	bl	80021bc <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002c6:	f000 f8c1 	bl	800044c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f9ec 	bl	80026c0 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ee:	f000 f8ad 	bl	800044c <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	; 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x50>)
 8000302:	4a13      	ldr	r2, [pc, #76]	; (8000350 <MX_I2C1_Init+0x54>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x50>)
 8000308:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_I2C1_Init+0x58>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_I2C1_Init+0x50>)
 800031a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800031e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_I2C1_Init+0x50>)
 800033a:	f000 fc91 	bl	8000c60 <HAL_I2C_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f882 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	200000ac 	.word	0x200000ac
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	463b      	mov	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_TIM2_Init+0x94>)
 8000376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_TIM2_Init+0x94>)
 800037e:	2247      	movs	r2, #71	; 0x47
 8000380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_TIM2_Init+0x94>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_TIM2_Init+0x94>)
 800038a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800038e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <MX_TIM2_Init+0x94>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_TIM2_Init+0x94>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039c:	4813      	ldr	r0, [pc, #76]	; (80003ec <MX_TIM2_Init+0x94>)
 800039e:	f002 fb13 	bl	80029c8 <HAL_TIM_Base_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003a8:	f000 f850 	bl	800044c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <MX_TIM2_Init+0x94>)
 80003ba:	f002 fbc5 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003c4:	f000 f842 	bl	800044c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c8:	2300      	movs	r3, #0
 80003ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003d0:	463b      	mov	r3, r7
 80003d2:	4619      	mov	r1, r3
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_TIM2_Init+0x94>)
 80003d6:	f002 fd73 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003e0:	f000 f834 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000100 	.word	0x20000100

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_GPIO_Init+0x58>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a13      	ldr	r2, [pc, #76]	; (8000448 <MX_GPIO_Init+0x58>)
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_GPIO_Init+0x58>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0320 	and.w	r3, r3, #32
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_GPIO_Init+0x58>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <MX_GPIO_Init+0x58>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_GPIO_Init+0x58>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0304 	and.w	r3, r3, #4
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_GPIO_Init+0x58>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a07      	ldr	r2, [pc, #28]	; (8000448 <MX_GPIO_Init+0x58>)
 800042c:	f043 0308 	orr.w	r3, r3, #8
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_GPIO_Init+0x58>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0308 	and.w	r3, r3, #8
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <HAL_MspInit+0x5c>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_MspInit+0x5c>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <HAL_MspInit+0x5c>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_MspInit+0x5c>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <HAL_MspInit+0x60>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_MspInit+0x60>)
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010000 	.word	0x40010000

080004bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a15      	ldr	r2, [pc, #84]	; (800052c <HAL_I2C_MspInit+0x70>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d123      	bne.n	8000524 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <HAL_I2C_MspInit+0x74>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <HAL_I2C_MspInit+0x74>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <HAL_I2C_MspInit+0x74>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0308 	and.w	r3, r3, #8
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004f4:	23c0      	movs	r3, #192	; 0xc0
 80004f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f8:	2312      	movs	r3, #18
 80004fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fc:	2303      	movs	r3, #3
 80004fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	480b      	ldr	r0, [pc, #44]	; (8000534 <HAL_I2C_MspInit+0x78>)
 8000508:	f000 fa26 	bl	8000958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_I2C_MspInit+0x74>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_I2C_MspInit+0x74>)
 8000512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000516:	61d3      	str	r3, [r2, #28]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_I2C_MspInit+0x74>)
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40005400 	.word	0x40005400
 8000530:	40021000 	.word	0x40021000
 8000534:	40010c00 	.word	0x40010c00

08000538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000548:	d10b      	bne.n	8000562 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_TIM_Base_MspInit+0x34>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <HAL_TIM_Base_MspInit+0x34>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_TIM_Base_MspInit+0x34>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b6:	f000 f8ab 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <_sbrk+0x60>)
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f0:	f002 ff12 	bl	8003418 <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20005000 	.word	0x20005000
 8000620:	00000400 	.word	0x00000400
 8000624:	20000164 	.word	0x20000164
 8000628:	20000180 	.word	0x20000180

0800062c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065e:	f7ff ffe5 	bl	800062c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000662:	f002 fedf 	bl	8003424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fd71 	bl	800014c <main>
  bx lr
 800066a:	4770      	bx	lr
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000674:	08003e3c 	.word	0x08003e3c
  ldr r2, =_sbss
 8000678:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800067c:	2000017c 	.word	0x2000017c

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_Init+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_Init+0x28>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f92b 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	200f      	movs	r0, #15
 800069c:	f000 f808 	bl	80006b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a0:	f7ff feda 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x54>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x58>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f935 	bl	800093e <HAL_SYSTICK_Config>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e00e      	b.n	80006fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d80a      	bhi.n	80006fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f000 f90b 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f0:	4a06      	ldr	r2, [pc, #24]	; (800070c <HAL_InitTick+0x5c>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000000 	.word	0x20000000
 8000708:	20000008 	.word	0x20000008
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x1c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x20>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a03      	ldr	r2, [pc, #12]	; (8000730 <HAL_IncTick+0x20>)
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	20000008 	.word	0x20000008
 8000730:	20000168 	.word	0x20000168

08000734 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b02      	ldr	r3, [pc, #8]	; (8000744 <HAL_GetTick+0x10>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000168 	.word	0x20000168

08000748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff fff0 	bl	8000734 <HAL_GetTick>
 8000754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000760:	d005      	beq.n	800076e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_Delay+0x44>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800076e:	bf00      	nop
 8000770:	f7ff ffe0 	bl	8000734 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8f7      	bhi.n	8000770 <HAL_Delay+0x28>
  {
  }
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008

08000790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	; 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff90 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff49 	bl	8000790 <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000918:	f7ff ff5e 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 800091c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ff90 	bl	8000848 <NVIC_EncodePriority>
 8000928:	4602      	mov	r2, r0
 800092a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff5f 	bl	80007f4 <__NVIC_SetPriority>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffb0 	bl	80008ac <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b08b      	sub	sp, #44	; 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e169      	b.n	8000c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800096c:	2201      	movs	r2, #1
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	f040 8158 	bne.w	8000c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a9a      	ldr	r2, [pc, #616]	; (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d05e      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 8000994:	4a98      	ldr	r2, [pc, #608]	; (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d875      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 800099a:	4a98      	ldr	r2, [pc, #608]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d058      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009a0:	4a96      	ldr	r2, [pc, #600]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d86f      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009a6:	4a96      	ldr	r2, [pc, #600]	; (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d052      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009ac:	4a94      	ldr	r2, [pc, #592]	; (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d869      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009b2:	4a94      	ldr	r2, [pc, #592]	; (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d04c      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009b8:	4a92      	ldr	r2, [pc, #584]	; (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d863      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009be:	4a92      	ldr	r2, [pc, #584]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d046      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009c4:	4a90      	ldr	r2, [pc, #576]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d85d      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d82a      	bhi.n	8000a24 <HAL_GPIO_Init+0xcc>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d859      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009d2:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <HAL_GPIO_Init+0x80>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a2d 	.word	0x08000a2d
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a81 	.word	0x08000a81
 80009e8:	08000a87 	.word	0x08000a87
 80009ec:	08000a87 	.word	0x08000a87
 80009f0:	08000a87 	.word	0x08000a87
 80009f4:	08000a87 	.word	0x08000a87
 80009f8:	08000a87 	.word	0x08000a87
 80009fc:	08000a87 	.word	0x08000a87
 8000a00:	08000a87 	.word	0x08000a87
 8000a04:	08000a87 	.word	0x08000a87
 8000a08:	08000a87 	.word	0x08000a87
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a87 	.word	0x08000a87
 8000a14:	08000a87 	.word	0x08000a87
 8000a18:	08000a87 	.word	0x08000a87
 8000a1c:	08000a35 	.word	0x08000a35
 8000a20:	08000a49 	.word	0x08000a49
 8000a24:	4a79      	ldr	r2, [pc, #484]	; (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2a:	e02c      	b.n	8000a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e029      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e024      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	3308      	adds	r3, #8
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e01f      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e01a      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e013      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	611a      	str	r2, [r3, #16]
          break;
 8000a72:	e009      	b.n	8000a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	615a      	str	r2, [r3, #20]
          break;
 8000a7e:	e003      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          break;
 8000a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d801      	bhi.n	8000a92 <HAL_GPIO_Init+0x13a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	e001      	b.n	8000a96 <HAL_GPIO_Init+0x13e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d802      	bhi.n	8000aa4 <HAL_GPIO_Init+0x14c>
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x152>
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	6a39      	ldr	r1, [r7, #32]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80b1 	beq.w	8000c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af0:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a40      	ldr	r2, [pc, #256]	; (8000c18 <HAL_GPIO_Init+0x2c0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d013      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	; (8000c1c <HAL_GPIO_Init+0x2c4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d00d      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	; (8000c20 <HAL_GPIO_Init+0x2c8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	; (8000c24 <HAL_GPIO_Init+0x2cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <HAL_GPIO_Init+0x1e0>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	; (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b70:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	492c      	ldr	r1, [pc, #176]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	600b      	str	r3, [r1, #0]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4928      	ldr	r1, [pc, #160]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4922      	ldr	r1, [pc, #136]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	604b      	str	r3, [r1, #4]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491e      	ldr	r1, [pc, #120]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	4918      	ldr	r1, [pc, #96]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	608b      	str	r3, [r1, #8]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4914      	ldr	r1, [pc, #80]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d021      	beq.n	8000c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	490e      	ldr	r1, [pc, #56]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60cb      	str	r3, [r1, #12]
 8000bf4:	e021      	b.n	8000c3a <HAL_GPIO_Init+0x2e2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_GPIO_Init+0x304>)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4909      	ldr	r1, [pc, #36]	; (8000c5c <HAL_GPIO_Init+0x304>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f ae8e 	bne.w	800096c <HAL_GPIO_Init+0x14>
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	372c      	adds	r7, #44	; 0x2c
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e12b      	b.n	8000eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d106      	bne.n	8000c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fc18 	bl	80004bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2224      	movs	r2, #36	; 0x24
 8000c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 0201 	bic.w	r2, r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cc4:	f001 fe4e 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8000cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4a81      	ldr	r2, [pc, #516]	; (8000ed4 <HAL_I2C_Init+0x274>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d807      	bhi.n	8000ce4 <HAL_I2C_Init+0x84>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a80      	ldr	r2, [pc, #512]	; (8000ed8 <HAL_I2C_Init+0x278>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	bf94      	ite	ls
 8000cdc:	2301      	movls	r3, #1
 8000cde:	2300      	movhi	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	e006      	b.n	8000cf2 <HAL_I2C_Init+0x92>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4a7d      	ldr	r2, [pc, #500]	; (8000edc <HAL_I2C_Init+0x27c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	bf94      	ite	ls
 8000cec:	2301      	movls	r3, #1
 8000cee:	2300      	movhi	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e0e7      	b.n	8000eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4a78      	ldr	r2, [pc, #480]	; (8000ee0 <HAL_I2C_Init+0x280>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9b      	lsrs	r3, r3, #18
 8000d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a6a      	ldr	r2, [pc, #424]	; (8000ed4 <HAL_I2C_Init+0x274>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d802      	bhi.n	8000d34 <HAL_I2C_Init+0xd4>
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3301      	adds	r3, #1
 8000d32:	e009      	b.n	8000d48 <HAL_I2C_Init+0xe8>
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d3a:	fb02 f303 	mul.w	r3, r2, r3
 8000d3e:	4a69      	ldr	r2, [pc, #420]	; (8000ee4 <HAL_I2C_Init+0x284>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	099b      	lsrs	r3, r3, #6
 8000d46:	3301      	adds	r3, #1
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	495c      	ldr	r1, [pc, #368]	; (8000ed4 <HAL_I2C_Init+0x274>)
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d819      	bhi.n	8000d9c <HAL_I2C_Init+0x13c>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1e59      	subs	r1, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d76:	1c59      	adds	r1, r3, #1
 8000d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00a      	beq.n	8000d98 <HAL_I2C_Init+0x138>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d96:	e051      	b.n	8000e3c <HAL_I2C_Init+0x1dc>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e04f      	b.n	8000e3c <HAL_I2C_Init+0x1dc>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d111      	bne.n	8000dc8 <HAL_I2C_Init+0x168>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1e58      	subs	r0, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6859      	ldr	r1, [r3, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	440b      	add	r3, r1
 8000db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000db6:	3301      	adds	r3, #1
 8000db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf0c      	ite	eq
 8000dc0:	2301      	moveq	r3, #1
 8000dc2:	2300      	movne	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	e012      	b.n	8000dee <HAL_I2C_Init+0x18e>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1e58      	subs	r0, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6859      	ldr	r1, [r3, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	0099      	lsls	r1, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_I2C_Init+0x196>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e022      	b.n	8000e3c <HAL_I2C_Init+0x1dc>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10e      	bne.n	8000e1c <HAL_I2C_Init+0x1bc>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	1e58      	subs	r0, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6859      	ldr	r1, [r3, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	440b      	add	r3, r1
 8000e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e10:	3301      	adds	r3, #1
 8000e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e1a:	e00f      	b.n	8000e3c <HAL_I2C_Init+0x1dc>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	1e58      	subs	r0, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	0099      	lsls	r1, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	6809      	ldr	r1, [r1, #0]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69da      	ldr	r2, [r3, #28]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6911      	ldr	r1, [r2, #16]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68d2      	ldr	r2, [r2, #12]
 8000e76:	4311      	orrs	r1, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	000186a0 	.word	0x000186a0
 8000ed8:	001e847f 	.word	0x001e847f
 8000edc:	003d08ff 	.word	0x003d08ff
 8000ee0:	431bde83 	.word	0x431bde83
 8000ee4:	10624dd3 	.word	0x10624dd3

08000ee8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	817b      	strh	r3, [r7, #10]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fc1a 	bl	8000734 <HAL_GetTick>
 8000f00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b20      	cmp	r3, #32
 8000f0c:	f040 80e0 	bne.w	80010d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2319      	movs	r3, #25
 8000f16:	2201      	movs	r2, #1
 8000f18:	4970      	ldr	r1, [pc, #448]	; (80010dc <HAL_I2C_Master_Transmit+0x1f4>)
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 ff72 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f26:	2302      	movs	r3, #2
 8000f28:	e0d3      	b.n	80010d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <HAL_I2C_Master_Transmit+0x50>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e0cc      	b.n	80010d2 <HAL_I2C_Master_Transmit+0x1ea>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d007      	beq.n	8000f5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0201 	orr.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2221      	movs	r2, #33	; 0x21
 8000f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2210      	movs	r2, #16
 8000f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	893a      	ldrh	r2, [r7, #8]
 8000f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4a50      	ldr	r2, [pc, #320]	; (80010e0 <HAL_I2C_Master_Transmit+0x1f8>)
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fa0:	8979      	ldrh	r1, [r7, #10]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	6a3a      	ldr	r2, [r7, #32]
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 fd2c 	bl	8001a04 <I2C_MasterRequestWrite>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e08d      	b.n	80010d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000fcc:	e066      	b.n	800109c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	6a39      	ldr	r1, [r7, #32]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 ffec 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00d      	beq.n	8000ffa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d107      	bne.n	8000ff6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e06b      	b.n	80010d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001014:	b29b      	uxth	r3, r3
 8001016:	3b01      	subs	r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001022:	3b01      	subs	r3, #1
 8001024:	b29a      	uxth	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b04      	cmp	r3, #4
 8001036:	d11b      	bne.n	8001070 <HAL_I2C_Master_Transmit+0x188>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800103c:	2b00      	cmp	r3, #0
 800103e:	d017      	beq.n	8001070 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800105a:	b29b      	uxth	r3, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	b29a      	uxth	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001068:	3b01      	subs	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	6a39      	ldr	r1, [r7, #32]
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f000 ffdc 	bl	8002032 <I2C_WaitOnBTFFlagUntilTimeout>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00d      	beq.n	800109c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2b04      	cmp	r3, #4
 8001086:	d107      	bne.n	8001098 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001096:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e01a      	b.n	80010d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d194      	bne.n	8000fce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2220      	movs	r2, #32
 80010b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e000      	b.n	80010d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010d0:	2302      	movs	r3, #2
  }
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	00100002 	.word	0x00100002
 80010e0:	ffff0000 	.word	0xffff0000

080010e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	817b      	strh	r3, [r7, #10]
 80010f6:	460b      	mov	r3, r1
 80010f8:	813b      	strh	r3, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010fe:	f7ff fb19 	bl	8000734 <HAL_GetTick>
 8001102:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b20      	cmp	r3, #32
 800110e:	f040 80d9 	bne.w	80012c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2319      	movs	r3, #25
 8001118:	2201      	movs	r2, #1
 800111a:	496d      	ldr	r1, [pc, #436]	; (80012d0 <HAL_I2C_Mem_Write+0x1ec>)
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 fe71 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001128:	2302      	movs	r3, #2
 800112a:	e0cc      	b.n	80012c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_I2C_Mem_Write+0x56>
 8001136:	2302      	movs	r3, #2
 8001138:	e0c5      	b.n	80012c6 <HAL_I2C_Mem_Write+0x1e2>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b01      	cmp	r3, #1
 800114e:	d007      	beq.n	8001160 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800116e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2221      	movs	r2, #33	; 0x21
 8001174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2240      	movs	r2, #64	; 0x40
 800117c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_I2C_Mem_Write+0x1f0>)
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011a2:	88f8      	ldrh	r0, [r7, #6]
 80011a4:	893a      	ldrh	r2, [r7, #8]
 80011a6:	8979      	ldrh	r1, [r7, #10]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	4603      	mov	r3, r0
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 fca8 	bl	8001b08 <I2C_RequestMemoryWrite>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d052      	beq.n	8001264 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e081      	b.n	80012c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 fef2 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00d      	beq.n	80011ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d107      	bne.n	80011ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e06b      	b.n	80012c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001208:	3b01      	subs	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001214:	b29b      	uxth	r3, r3
 8001216:	3b01      	subs	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b04      	cmp	r3, #4
 800122a:	d11b      	bne.n	8001264 <HAL_I2C_Mem_Write+0x180>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	d017      	beq.n	8001264 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124e:	3b01      	subs	r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125a:	b29b      	uxth	r3, r3
 800125c:	3b01      	subs	r3, #1
 800125e:	b29a      	uxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1aa      	bne.n	80011c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f000 fede 	bl	8002032 <I2C_WaitOnBTFFlagUntilTimeout>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00d      	beq.n	8001298 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2b04      	cmp	r3, #4
 8001282:	d107      	bne.n	8001294 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001292:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e016      	b.n	80012c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2220      	movs	r2, #32
 80012ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e000      	b.n	80012c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80012c4:	2302      	movs	r3, #2
  }
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	00100002 	.word	0x00100002
 80012d4:	ffff0000 	.word	0xffff0000

080012d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af02      	add	r7, sp, #8
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	817b      	strh	r3, [r7, #10]
 80012ea:	460b      	mov	r3, r1
 80012ec:	813b      	strh	r3, [r7, #8]
 80012ee:	4613      	mov	r3, r2
 80012f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012f6:	f7ff fa1d 	bl	8000734 <HAL_GetTick>
 80012fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b20      	cmp	r3, #32
 8001306:	f040 8244 	bne.w	8001792 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2319      	movs	r3, #25
 8001310:	2201      	movs	r2, #1
 8001312:	4982      	ldr	r1, [pc, #520]	; (800151c <HAL_I2C_Mem_Read+0x244>)
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fd75 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001320:	2302      	movs	r3, #2
 8001322:	e237      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Mem_Read+0x5a>
 800132e:	2302      	movs	r3, #2
 8001330:	e230      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d007      	beq.n	8001358 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001366:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2222      	movs	r2, #34	; 0x22
 800136c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001388:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a62      	ldr	r2, [pc, #392]	; (8001520 <HAL_I2C_Mem_Read+0x248>)
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800139a:	88f8      	ldrh	r0, [r7, #6]
 800139c:	893a      	ldrh	r2, [r7, #8]
 800139e:	8979      	ldrh	r1, [r7, #10]
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4603      	mov	r3, r0
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fc42 	bl	8001c34 <I2C_RequestMemoryRead>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1ec      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e1c0      	b.n	800176c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d11e      	bne.n	8001430 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001400:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001402:	b672      	cpsid	i
}
 8001404:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800142a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800142c:	b662      	cpsie	i
}
 800142e:	e035      	b.n	800149c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001434:	2b02      	cmp	r3, #2
 8001436:	d11e      	bne.n	8001476 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001446:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001472:	b662      	cpsie	i
}
 8001474:	e012      	b.n	800149c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001484:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800149c:	e166      	b.n	800176c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	f200 811f 	bhi.w	80016e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d123      	bne.n	80014f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fdfd 	bl	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e167      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014f6:	e139      	b.n	800176c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d152      	bne.n	80015a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001506:	2200      	movs	r2, #0
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <HAL_I2C_Mem_Read+0x24c>)
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 fc7a 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e13c      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
 800151a:	bf00      	nop
 800151c:	00100002 	.word	0x00100002
 8001520:	ffff0000 	.word	0xffff0000
 8001524:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001558:	3b01      	subs	r3, #1
 800155a:	b29a      	uxth	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800156e:	b662      	cpsie	i
}
 8001570:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158e:	3b01      	subs	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	b29a      	uxth	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015a4:	e0e2      	b.n	800176c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	2200      	movs	r2, #0
 80015ae:	497b      	ldr	r1, [pc, #492]	; (800179c <HAL_I2C_Mem_Read+0x4c4>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fc27 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0e9      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3b01      	subs	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_I2C_Mem_Read+0x4c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <HAL_I2C_Mem_Read+0x4cc>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0a1a      	lsrs	r2, r3, #8
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00da      	lsls	r2, r3, #3
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	3b01      	subs	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d118      	bne.n	800165e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2220      	movs	r2, #32
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f043 0220 	orr.w	r2, r3, #32
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800164e:	b662      	cpsie	i
}
 8001650:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e09a      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b04      	cmp	r3, #4
 800166a:	d1d9      	bne.n	8001620 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016ae:	b662      	cpsie	i
}
 80016b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016e4:	e042      	b.n	800176c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 fce2 	bl	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e04c      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001722:	b29b      	uxth	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b04      	cmp	r3, #4
 8001738:	d118      	bne.n	800176c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	2b00      	cmp	r3, #0
 8001772:	f47f ae94 	bne.w	800149e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001792:	2302      	movs	r3, #2
  }
}
 8001794:	4618      	mov	r0, r3
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	00010004 	.word	0x00010004
 80017a0:	20000000 	.word	0x20000000
 80017a4:	14f8b589 	.word	0x14f8b589

080017a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	460b      	mov	r3, r1
 80017b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7fe ffbc 	bl	8000734 <HAL_GetTick>
 80017bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	f040 8111 	bne.w	80019f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2319      	movs	r3, #25
 80017d6:	2201      	movs	r2, #1
 80017d8:	4988      	ldr	r1, [pc, #544]	; (80019fc <HAL_I2C_IsDeviceReady+0x254>)
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fb12 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e104      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_I2C_IsDeviceReady+0x50>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e0fd      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x24c>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d007      	beq.n	800181e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2224      	movs	r2, #36	; 0x24
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a70      	ldr	r2, [pc, #448]	; (8001a00 <HAL_I2C_IsDeviceReady+0x258>)
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001850:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 fad0 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001878:	d103      	bne.n	8001882 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0b6      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001894:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001896:	f7fe ff4d 	bl	8000734 <HAL_GetTick>
 800189a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c0:	bf0c      	ite	eq
 80018c2:	2301      	moveq	r3, #1
 80018c4:	2300      	movne	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018ca:	e025      	b.n	8001918 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018cc:	f7fe ff32 	bl	8000734 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d302      	bcc.n	80018e2 <HAL_I2C_IsDeviceReady+0x13a>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	22a0      	movs	r2, #160	; 0xa0
 80018e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2ba0      	cmp	r3, #160	; 0xa0
 8001922:	d005      	beq.n	8001930 <HAL_I2C_IsDeviceReady+0x188>
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_I2C_IsDeviceReady+0x188>
 800192a:	7dbb      	ldrb	r3, [r7, #22]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0cd      	beq.n	80018cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b02      	cmp	r3, #2
 8001944:	d129      	bne.n	800199a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001954:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2319      	movs	r3, #25
 8001972:	2201      	movs	r2, #1
 8001974:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_I2C_IsDeviceReady+0x254>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fa44 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e036      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e02c      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2319      	movs	r3, #25
 80019ba:	2201      	movs	r2, #1
 80019bc:	490f      	ldr	r1, [pc, #60]	; (80019fc <HAL_I2C_IsDeviceReady+0x254>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fa20 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e012      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f4ff af32 	bcc.w	8001842 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2220      	movs	r2, #32
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
  }
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	00100002 	.word	0x00100002
 8001a00:	ffff0000 	.word	0xffff0000

08001a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	460b      	mov	r3, r1
 8001a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d006      	beq.n	8001a2e <I2C_MasterRequestWrite+0x2a>
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d003      	beq.n	8001a2e <I2C_MasterRequestWrite+0x2a>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a2c:	d108      	bne.n	8001a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e00b      	b.n	8001a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	2b12      	cmp	r3, #18
 8001a46:	d107      	bne.n	8001a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f9cd 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a7e:	d103      	bne.n	8001a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e035      	b.n	8001af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a94:	d108      	bne.n	8001aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	e01b      	b.n	8001ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aa8:	897b      	ldrh	r3, [r7, #10]
 8001aaa:	11db      	asrs	r3, r3, #7
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f003 0306 	and.w	r3, r3, #6
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f063 030f 	orn	r3, r3, #15
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <I2C_MasterRequestWrite+0xfc>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f9f3 	bl	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e010      	b.n	8001af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ad6:	897b      	ldrh	r3, [r7, #10]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <I2C_MasterRequestWrite+0x100>)
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f9e3 	bl	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	00010008 	.word	0x00010008
 8001b04:	00010002 	.word	0x00010002

08001b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	817b      	strh	r3, [r7, #10]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	813b      	strh	r3, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f960 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00d      	beq.n	8001b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b58:	d103      	bne.n	8001b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e05f      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	492d      	ldr	r1, [pc, #180]	; (8001c30 <I2C_RequestMemoryWrite+0x128>)
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f998 	bl	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e04c      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fa02 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00d      	beq.n	8001bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d107      	bne.n	8001bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e02b      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd4:	893b      	ldrh	r3, [r7, #8]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	e021      	b.n	8001c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f9dc 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d107      	bne.n	8001c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e005      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00010002 	.word	0x00010002

08001c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	817b      	strh	r3, [r7, #10]
 8001c46:	460b      	mov	r3, r1
 8001c48:	813b      	strh	r3, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f8c2 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c94:	d103      	bne.n	8001c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0aa      	b.n	8001df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	4952      	ldr	r1, [pc, #328]	; (8001e00 <I2C_RequestMemoryRead+0x1cc>)
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f8fa 	bl	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e097      	b.n	8001df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	6a39      	ldr	r1, [r7, #32]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f964 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d107      	bne.n	8001d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e076      	b.n	8001df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d10:	893b      	ldrh	r3, [r7, #8]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	e021      	b.n	8001d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d1c:	893b      	ldrh	r3, [r7, #8]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f93e 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00d      	beq.n	8001d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d107      	bne.n	8001d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e050      	b.n	8001df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d56:	893b      	ldrh	r3, [r7, #8]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	6a39      	ldr	r1, [r7, #32]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f923 	bl	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d107      	bne.n	8001d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e035      	b.n	8001df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f82b 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00d      	beq.n	8001dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc2:	d103      	bne.n	8001dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e013      	b.n	8001df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	6a3a      	ldr	r2, [r7, #32]
 8001de4:	4906      	ldr	r1, [pc, #24]	; (8001e00 <I2C_RequestMemoryRead+0x1cc>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f863 	bl	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	00010002 	.word	0x00010002

08001e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e14:	e025      	b.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d021      	beq.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7fe fc89 	bl	8000734 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d116      	bne.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f043 0220 	orr.w	r2, r3, #32
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e023      	b.n	8001eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10d      	bne.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4013      	ands	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	2300      	movne	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	e00c      	b.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4013      	ands	r3, r2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d0b6      	beq.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ec0:	e051      	b.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed0:	d123      	bne.n	8001f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f043 0204 	orr.w	r2, r3, #4
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e046      	b.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d021      	beq.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f22:	f7fe fc07 	bl	8000734 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d116      	bne.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f043 0220 	orr.w	r2, r3, #32
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e020      	b.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10c      	bne.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf14      	ite	ne
 8001f82:	2301      	movne	r3, #1
 8001f84:	2300      	moveq	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	e00b      	b.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	43da      	mvns	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4013      	ands	r3, r2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d18d      	bne.n	8001ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fbc:	e02d      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f8ce 	bl	8002160 <I2C_IsAcknowledgeFailed>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e02d      	b.n	800202a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d021      	beq.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7fe fbad 	bl	8000734 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d116      	bne.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b80      	cmp	r3, #128	; 0x80
 8002026:	d1ca      	bne.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800203e:	e02d      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f88d 	bl	8002160 <I2C_IsAcknowledgeFailed>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e02d      	b.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d021      	beq.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002058:	f7fe fb6c 	bl	8000734 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	429a      	cmp	r2, r3
 8002066:	d302      	bcc.n	800206e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d116      	bne.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e007      	b.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d1ca      	bne.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020c0:	e042      	b.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d119      	bne.n	8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0210 	mvn.w	r2, #16
 80020d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e029      	b.n	8002158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002104:	f7fe fb16 	bl	8000734 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d302      	bcc.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d116      	bne.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e007      	b.n	8002158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d1b5      	bne.n	80020c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d11b      	bne.n	80021b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0204 	orr.w	r2, r3, #4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e272      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e24c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fa4c 	bl	8000734 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe fa48 	bl	8000734 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e200      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fa38 	bl	8000734 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fa34 	bl	8000734 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1ec      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c0      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe f9ed 	bl	8000734 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe f9e9 	bl	8000734 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe f9cc 	bl	8000734 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe f9c8 	bl	8000734 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e180      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe f9ac 	bl	8000734 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe f9a8 	bl	8000734 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e160      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fac4 	bl	800298c <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe f992 	bl	8000734 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe f98e 	bl	8000734 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e146      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b7f      	ldr	r3, [pc, #508]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7e      	ldr	r2, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe f94f 	bl	8000734 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe f94b 	bl	8000734 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e103      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a60      	ldr	r2, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a57      	ldr	r2, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe f8ff 	bl	8000734 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe f8fb 	bl	8000734 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe f8e9 	bl	8000734 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe f8e5 	bl	8000734 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e09b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe f8b9 	bl	8000734 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe f8b5 	bl	8000734 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e06d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4921      	ldr	r1, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe f889 	bl	8000734 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe f885 	bl	8000734 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e035      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe f872 	bl	8000734 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe f86e 	bl	8000734 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e026      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e01e      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e019      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x500>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d0      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d910      	bls.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4965      	ldr	r1, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d040      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e073      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4936      	ldr	r1, [pc, #216]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7fd ffc0 	bl	8000734 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7fd ffbc 	bl	8000734 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e053      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4922      	ldr	r1, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1cc>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd ff1e 	bl	80006b0 <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	08003de8 	.word	0x08003de8
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b490      	push	{r4, r7}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_GetSysClockFreq+0xac>)
 800289c:	1d3c      	adds	r4, r7, #4
 800289e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a4:	f240 2301 	movw	r3, #513	; 0x201
 80028a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x46>
 80028d2:	e02b      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d6:	623b      	str	r3, [r7, #32]
      break;
 80028d8:	e02b      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	0c9b      	lsrs	r3, r3, #18
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3328      	adds	r3, #40	; 0x28
 80028e4:	443b      	add	r3, r7
 80028e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0c5b      	lsrs	r3, r3, #17
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	3328      	adds	r3, #40	; 0x28
 8002902:	443b      	add	r3, r7
 8002904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6a3b      	ldr	r3, [r7, #32]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc90      	pop	{r4, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	08003dd8 	.word	0x08003dd8
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	003d0900 	.word	0x003d0900

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_RCC_GetHCLKFreq+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff2 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	08003df8 	.word	0x08003df8

0800298c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <RCC_Delay+0x34>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <RCC_Delay+0x38>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0a5b      	lsrs	r3, r3, #9
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a8:	bf00      	nop
  }
  while (Delay --);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	60fa      	str	r2, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <RCC_Delay+0x1c>
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000000 	.word	0x20000000
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fd fda2 	bl	8000538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 f962 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_TIM_Base_Start+0x88>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00e      	beq.n	8002ab0 <HAL_TIM_Base_Start+0x48>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d009      	beq.n	8002ab0 <HAL_TIM_Base_Start+0x48>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_TIM_Base_Start+0x8c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_TIM_Base_Start+0x48>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_TIM_Base_Start+0x90>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d010      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	e007      	b.n	8002ae4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800

08002afc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <HAL_TIM_Base_Stop+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_Base_Stop+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIM_ConfigClockSource+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0b3      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x180>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b98:	d03e      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0xd0>
 8002b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9e:	f200 8087 	bhi.w	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba6:	f000 8085 	beq.w	8002cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bae:	d87f      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb0:	2b70      	cmp	r3, #112	; 0x70
 8002bb2:	d01a      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xa2>
 8002bb4:	2b70      	cmp	r3, #112	; 0x70
 8002bb6:	d87b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb8:	2b60      	cmp	r3, #96	; 0x60
 8002bba:	d050      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x116>
 8002bbc:	2b60      	cmp	r3, #96	; 0x60
 8002bbe:	d877      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b50      	cmp	r3, #80	; 0x50
 8002bc2:	d03c      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0xf6>
 8002bc4:	2b50      	cmp	r3, #80	; 0x50
 8002bc6:	d873      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d058      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x136>
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d86f      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b30      	cmp	r3, #48	; 0x30
 8002bd2:	d064      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002bd4:	2b30      	cmp	r3, #48	; 0x30
 8002bd6:	d86b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d060      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d867      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05c      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d05a      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002be8:	e062      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f000 f942 	bl	8002e82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
      break;
 8002c16:	e04e      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f000 f92b 	bl	8002e82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3a:	609a      	str	r2, [r3, #8]
      break;
 8002c3c:	e03b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 f8a2 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2150      	movs	r1, #80	; 0x50
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f8f9 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e02b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 f8c0 	bl	8002df0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2160      	movs	r1, #96	; 0x60
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f8e9 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e01b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 f882 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f8d9 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e00b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f000 f8d0 	bl	8002e4e <TIM_ITRx_SetConfig>
        break;
 8002cae:	e002      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <TIM_Base_SetConfig+0xb8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00b      	beq.n	8002d00 <TIM_Base_SetConfig+0x30>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d007      	beq.n	8002d00 <TIM_Base_SetConfig+0x30>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <TIM_Base_SetConfig+0xbc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0x30>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <TIM_Base_SetConfig+0xc0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d108      	bne.n	8002d12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <TIM_Base_SetConfig+0xb8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0x62>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0x62>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <TIM_Base_SetConfig+0xbc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <TIM_Base_SetConfig+0xc0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d108      	bne.n	8002d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <TIM_Base_SetConfig+0xb8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d103      	bne.n	8002d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	615a      	str	r2, [r3, #20]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800

08002d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 030a 	bic.w	r3, r3, #10
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 0210 	bic.w	r2, r3, #16
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f043 0307 	orr.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e046      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f24:	d009      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <I2C_Read_Time>:
{
	HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->TxTimeBuff, 3, 1000);
}

static void I2C_Read_Time(DS3231_Time* DS3231)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->RxTimeBuff, 3, 1000);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	330e      	adds	r3, #14
 8002f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f90:	9202      	str	r2, [sp, #8]
 8002f92:	2203      	movs	r2, #3
 8002f94:	9201      	str	r2, [sp, #4]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2301      	movs	r3, #1
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	21d0      	movs	r1, #208	; 0xd0
 8002f9e:	f7fe f99b 	bl	80012d8 <HAL_I2C_Mem_Read>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <I2C_Write_Date>:

static void I2C_Write_Date(DS3231_Time* DS3231)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af04      	add	r7, sp, #16
 8002fb0:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->TxDateBuff, 4, 1000);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3311      	adds	r3, #17
 8002fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fbe:	9202      	str	r2, [sp, #8]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	21d0      	movs	r1, #208	; 0xd0
 8002fcc:	f7fe f88a 	bl	80010e4 <HAL_I2C_Mem_Write>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_Read_Date>:

static void I2C_Read_Date(DS3231_Time* DS3231)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->RxDateBuff, 4,1000);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3315      	adds	r3, #21
 8002fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fec:	9202      	str	r2, [sp, #8]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	9201      	str	r2, [sp, #4]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	21d0      	movs	r1, #208	; 0xd0
 8002ffa:	f7fe f96d 	bl	80012d8 <HAL_I2C_Mem_Read>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <BCD_DEC>:

static uint8_t BCD_DEC (uint8_t data)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	71fb      	strb	r3, [r7, #7]
	return (data>>4) * 10 + (data & 0x0F);
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	0092      	lsls	r2, r2, #2
 800301a:	4413      	add	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	b2da      	uxtb	r2, r3
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4413      	add	r3, r2
 800302a:	b2db      	uxtb	r3, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
	...

08003038 <DEC_BCD>:

static uint8_t DEC_BCD (uint8_t data)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
	return (data/10) << 4 | (data%10);
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <DEC_BCD+0x44>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	b258      	sxtb	r0, r3
 8003052:	79fa      	ldrb	r2, [r7, #7]
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <DEC_BCD+0x44>)
 8003056:	fba3 1302 	umull	r1, r3, r3, r2
 800305a:	08d9      	lsrs	r1, r3, #3
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	b25b      	sxtb	r3, r3
 800306a:	4303      	orrs	r3, r0
 800306c:	b25b      	sxtb	r3, r3
 800306e:	b2db      	uxtb	r3, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	cccccccd 	.word	0xcccccccd

08003080 <DS3231_Init>:


/************************************Main Layer****************************/

void DS3231_Init(DS3231_Time* DS3231, I2C_HandleTypeDef* I2C_In)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	DS3231->I2C = I2C_In;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	601a      	str	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <DS3231_GetTime>:
	DS3231->TxTimeBuff[2] = DEC_BCD(Sec);
	I2C_Write_Time(DS3231);
}

void DS3231_GetTime(DS3231_Time* DS3231)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	I2C_Read_Time(DS3231);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ff6a 	bl	8002f7c <I2C_Read_Time>
	DS3231->Sec = BCD_DEC(DS3231->RxTimeBuff[0]);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7b9b      	ldrb	r3, [r3, #14]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ffaa 	bl	8003006 <BCD_DEC>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	711a      	strb	r2, [r3, #4]
	DS3231->Min = BCD_DEC(DS3231->RxTimeBuff[1]);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7bdb      	ldrb	r3, [r3, #15]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ffa1 	bl	8003006 <BCD_DEC>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	715a      	strb	r2, [r3, #5]
	DS3231->Hour = BCD_DEC(DS3231->RxTimeBuff[2]);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7c1b      	ldrb	r3, [r3, #16]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff98 	bl	8003006 <BCD_DEC>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	719a      	strb	r2, [r3, #6]
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <DS3231_SetDate>:

void DS3231_SetDate(DS3231_Time* DS3231, uint8_t Day, uint8_t Date, uint8_t Month, uint8_t Year)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	4608      	mov	r0, r1
 80030f0:	4611      	mov	r1, r2
 80030f2:	461a      	mov	r2, r3
 80030f4:	4603      	mov	r3, r0
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70bb      	strb	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
	DS3231->TxDateBuff[0] = DEC_BCD(Day);
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff ff98 	bl	8003038 <DEC_BCD>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	745a      	strb	r2, [r3, #17]
	DS3231->TxDateBuff[1] = DEC_BCD(Date);
 8003110:	78bb      	ldrb	r3, [r7, #2]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff90 	bl	8003038 <DEC_BCD>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	749a      	strb	r2, [r3, #18]
	DS3231->TxDateBuff[2] = DEC_BCD(Month);
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff88 	bl	8003038 <DEC_BCD>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	74da      	strb	r2, [r3, #19]
	DS3231->TxDateBuff[3] = DEC_BCD(Year);
 8003130:	7c3b      	ldrb	r3, [r7, #16]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff80 	bl	8003038 <DEC_BCD>
 8003138:	4603      	mov	r3, r0
 800313a:	461a      	mov	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	751a      	strb	r2, [r3, #20]
	I2C_Write_Date(DS3231);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff32 	bl	8002faa <I2C_Write_Date>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <DS3231_GetDate>:

void DS3231_GetDate(DS3231_Time* DS3231)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
	I2C_Read_Date(DS3231);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ff3e 	bl	8002fd8 <I2C_Read_Date>
	DS3231->Day = BCD_DEC(DS3231->RxDateBuff[0]);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7d5b      	ldrb	r3, [r3, #21]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff50 	bl	8003006 <BCD_DEC>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	721a      	strb	r2, [r3, #8]
	DS3231->Date = BCD_DEC(DS3231->RxDateBuff[1]);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7d9b      	ldrb	r3, [r3, #22]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff47 	bl	8003006 <BCD_DEC>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	71da      	strb	r2, [r3, #7]
	DS3231->Month = BCD_DEC(DS3231->RxDateBuff[2]);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7ddb      	ldrb	r3, [r3, #23]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff3e 	bl	8003006 <BCD_DEC>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	725a      	strb	r2, [r3, #9]
	DS3231->Year = BCD_DEC(DS3231->RxDateBuff[3]);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7e1b      	ldrb	r3, [r3, #24]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff35 	bl	8003006 <BCD_DEC>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	729a      	strb	r2, [r3, #10]
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <delay_us>:
 */

#include "lcd_i2c.h"

void delay_us(uint32_t us)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	htim2.Instance->CNT = 0;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <delay_us+0x34>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 80031bc:	4808      	ldr	r0, [pc, #32]	; (80031e0 <delay_us+0x34>)
 80031be:	f7ff fc53 	bl	8002a68 <HAL_TIM_Base_Start>
	while(htim2.Instance->CNT < us);
 80031c2:	bf00      	nop
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <delay_us+0x34>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d8f9      	bhi.n	80031c4 <delay_us+0x18>
	HAL_TIM_Base_Stop(&htim2);
 80031d0:	4803      	ldr	r0, [pc, #12]	; (80031e0 <delay_us+0x34>)
 80031d2:	f7ff fc93 	bl	8002afc <HAL_TIM_Base_Stop>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000100 	.word	0x20000100

080031e4 <lcd_i2c_init>:

void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	4611      	mov	r1, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	460b      	mov	r3, r1
 80031f4:	71fb      	strb	r3, [r7, #7]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	7e3a      	ldrb	r2, [r7, #24]
 80031fe:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2208      	movs	r2, #8
 8003204:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	79fa      	ldrb	r2, [r7, #7]
 800320a:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	79ba      	ldrb	r2, [r7, #6]
 8003210:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2204      	movs	r2, #4
 800321c:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	delay_us(40000); 	//waiting for > 40ms
 800321e:	f649 4040 	movw	r0, #40000	; 0x9c40
 8003222:	f7ff ffc3 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 8003226:	2130      	movs	r1, #48	; 0x30
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f851 	bl	80032d0 <lcd_send_cmd>
	delay_us(5000);  // waiting for >4.1ms
 800322e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003232:	f7ff ffbb 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 8003236:	2130      	movs	r1, #48	; 0x30
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f849 	bl	80032d0 <lcd_send_cmd>
	delay_us(1000);  // waiting for >100us
 800323e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003242:	f7ff ffb3 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 8003246:	2130      	movs	r1, #48	; 0x30
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f841 	bl	80032d0 <lcd_send_cmd>
	delay_us(10000);
 800324e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003252:	f7ff ffab 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 8003256:	2120      	movs	r1, #32
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f839 	bl	80032d0 <lcd_send_cmd>
	delay_us(10000);
 800325e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003262:	f7ff ffa3 	bl	80031ac <delay_us>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003266:	2128      	movs	r1, #40	; 0x28
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f831 	bl	80032d0 <lcd_send_cmd>
	delay_us(1000);
 800326e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003272:	f7ff ff9b 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 8003276:	2108      	movs	r1, #8
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f829 	bl	80032d0 <lcd_send_cmd>
	delay_us(1000);
 800327e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003282:	f7ff ff93 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 8003286:	2101      	movs	r1, #1
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f821 	bl	80032d0 <lcd_send_cmd>
	delay_us(1000);
 800328e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003292:	f7ff ff8b 	bl	80031ac <delay_us>
	delay_us(1000);
 8003296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800329a:	f7ff ff87 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800329e:	2106      	movs	r1, #6
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f815 	bl	80032d0 <lcd_send_cmd>
	delay_us(1000);
 80032a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032aa:	f7ff ff7f 	bl	80031ac <delay_us>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	791b      	ldrb	r3, [r3, #4]
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f808 	bl	80032d0 <lcd_send_cmd>
	delay_us(1000);
 80032c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c4:	f7ff ff72 	bl	80031ac <delay_us>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f023 030f 	bic.w	r3, r3, #15
 80032e2:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	f043 030c 	orr.w	r3, r3, #12
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 80032fe:	7bbb      	ldrb	r3, [r7, #14]
 8003300:	f043 030c 	orr.w	r3, r3, #12
 8003304:	b2db      	uxtb	r3, r3
 8003306:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 8003308:	7bbb      	ldrb	r3, [r7, #14]
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	b2db      	uxtb	r3, r3
 8003310:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6898      	ldr	r0, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	789b      	ldrb	r3, [r3, #2]
 800331a:	b299      	uxth	r1, r3
 800331c:	f107 0208 	add.w	r2, r7, #8
 8003320:	2364      	movs	r3, #100	; 0x64
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2304      	movs	r3, #4
 8003326:	f7fd fddf 	bl	8000ee8 <HAL_I2C_Master_Transmit>
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af02      	add	r7, sp, #8
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f023 030f 	bic.w	r3, r3, #15
 8003344:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	f043 030d 	orr.w	r3, r3, #13
 8003352:	b2db      	uxtb	r3, r3
 8003354:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	f043 0309 	orr.w	r3, r3, #9
 800335c:	b2db      	uxtb	r3, r3
 800335e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8003360:	7bbb      	ldrb	r3, [r7, #14]
 8003362:	f043 030d 	orr.w	r3, r3, #13
 8003366:	b2db      	uxtb	r3, r3
 8003368:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 800336a:	7bbb      	ldrb	r3, [r7, #14]
 800336c:	f043 0309 	orr.w	r3, r3, #9
 8003370:	b2db      	uxtb	r3, r3
 8003372:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6898      	ldr	r0, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	789b      	ldrb	r3, [r3, #2]
 800337c:	b299      	uxth	r1, r3
 800337e:	f107 0208 	add.w	r2, r7, #8
 8003382:	2364      	movs	r3, #100	; 0x64
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2304      	movs	r3, #4
 8003388:	f7fd fdae 	bl	8000ee8 <HAL_I2C_Master_Transmit>
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	70fb      	strb	r3, [r7, #3]
 80033a0:	4613      	mov	r3, r2
 80033a2:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <lcd_set_cursor+0x50>)
 80033a6:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	78ba      	ldrb	r2, [r7, #2]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d903      	bls.n	80033ba <lcd_set_cursor+0x26>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 80033ba:	78bb      	ldrb	r3, [r7, #2]
 80033bc:	3310      	adds	r3, #16
 80033be:	443b      	add	r3, r7
 80033c0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	4413      	add	r3, r2
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff7a 	bl	80032d0 <lcd_send_cmd>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	54144000 	.word	0x54144000

080033e8 <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 80033f2:	e007      	b.n	8003404 <lcd_send_string+0x1c>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	603a      	str	r2, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ff97 	bl	8003332 <lcd_send_data>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f3      	bne.n	80033f4 <lcd_send_string+0xc>
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <__errno>:
 8003418:	4b01      	ldr	r3, [pc, #4]	; (8003420 <__errno+0x8>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	2000000c 	.word	0x2000000c

08003424 <__libc_init_array>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	2600      	movs	r6, #0
 8003428:	4d0c      	ldr	r5, [pc, #48]	; (800345c <__libc_init_array+0x38>)
 800342a:	4c0d      	ldr	r4, [pc, #52]	; (8003460 <__libc_init_array+0x3c>)
 800342c:	1b64      	subs	r4, r4, r5
 800342e:	10a4      	asrs	r4, r4, #2
 8003430:	42a6      	cmp	r6, r4
 8003432:	d109      	bne.n	8003448 <__libc_init_array+0x24>
 8003434:	f000 fc9c 	bl	8003d70 <_init>
 8003438:	2600      	movs	r6, #0
 800343a:	4d0a      	ldr	r5, [pc, #40]	; (8003464 <__libc_init_array+0x40>)
 800343c:	4c0a      	ldr	r4, [pc, #40]	; (8003468 <__libc_init_array+0x44>)
 800343e:	1b64      	subs	r4, r4, r5
 8003440:	10a4      	asrs	r4, r4, #2
 8003442:	42a6      	cmp	r6, r4
 8003444:	d105      	bne.n	8003452 <__libc_init_array+0x2e>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	f855 3b04 	ldr.w	r3, [r5], #4
 800344c:	4798      	blx	r3
 800344e:	3601      	adds	r6, #1
 8003450:	e7ee      	b.n	8003430 <__libc_init_array+0xc>
 8003452:	f855 3b04 	ldr.w	r3, [r5], #4
 8003456:	4798      	blx	r3
 8003458:	3601      	adds	r6, #1
 800345a:	e7f2      	b.n	8003442 <__libc_init_array+0x1e>
 800345c:	08003e34 	.word	0x08003e34
 8003460:	08003e34 	.word	0x08003e34
 8003464:	08003e34 	.word	0x08003e34
 8003468:	08003e38 	.word	0x08003e38

0800346c <memset>:
 800346c:	4603      	mov	r3, r0
 800346e:	4402      	add	r2, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	d100      	bne.n	8003476 <memset+0xa>
 8003474:	4770      	bx	lr
 8003476:	f803 1b01 	strb.w	r1, [r3], #1
 800347a:	e7f9      	b.n	8003470 <memset+0x4>

0800347c <siprintf>:
 800347c:	b40e      	push	{r1, r2, r3}
 800347e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003482:	b500      	push	{lr}
 8003484:	b09c      	sub	sp, #112	; 0x70
 8003486:	ab1d      	add	r3, sp, #116	; 0x74
 8003488:	9002      	str	r0, [sp, #8]
 800348a:	9006      	str	r0, [sp, #24]
 800348c:	9107      	str	r1, [sp, #28]
 800348e:	9104      	str	r1, [sp, #16]
 8003490:	4808      	ldr	r0, [pc, #32]	; (80034b4 <siprintf+0x38>)
 8003492:	4909      	ldr	r1, [pc, #36]	; (80034b8 <siprintf+0x3c>)
 8003494:	f853 2b04 	ldr.w	r2, [r3], #4
 8003498:	9105      	str	r1, [sp, #20]
 800349a:	6800      	ldr	r0, [r0, #0]
 800349c:	a902      	add	r1, sp, #8
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	f000 f868 	bl	8003574 <_svfiprintf_r>
 80034a4:	2200      	movs	r2, #0
 80034a6:	9b02      	ldr	r3, [sp, #8]
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	b01c      	add	sp, #112	; 0x70
 80034ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80034b0:	b003      	add	sp, #12
 80034b2:	4770      	bx	lr
 80034b4:	2000000c 	.word	0x2000000c
 80034b8:	ffff0208 	.word	0xffff0208

080034bc <__ssputs_r>:
 80034bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c0:	688e      	ldr	r6, [r1, #8]
 80034c2:	4682      	mov	sl, r0
 80034c4:	429e      	cmp	r6, r3
 80034c6:	460c      	mov	r4, r1
 80034c8:	4690      	mov	r8, r2
 80034ca:	461f      	mov	r7, r3
 80034cc:	d838      	bhi.n	8003540 <__ssputs_r+0x84>
 80034ce:	898a      	ldrh	r2, [r1, #12]
 80034d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034d4:	d032      	beq.n	800353c <__ssputs_r+0x80>
 80034d6:	6825      	ldr	r5, [r4, #0]
 80034d8:	6909      	ldr	r1, [r1, #16]
 80034da:	3301      	adds	r3, #1
 80034dc:	eba5 0901 	sub.w	r9, r5, r1
 80034e0:	6965      	ldr	r5, [r4, #20]
 80034e2:	444b      	add	r3, r9
 80034e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034ec:	106d      	asrs	r5, r5, #1
 80034ee:	429d      	cmp	r5, r3
 80034f0:	bf38      	it	cc
 80034f2:	461d      	movcc	r5, r3
 80034f4:	0553      	lsls	r3, r2, #21
 80034f6:	d531      	bpl.n	800355c <__ssputs_r+0xa0>
 80034f8:	4629      	mov	r1, r5
 80034fa:	f000 fb6f 	bl	8003bdc <_malloc_r>
 80034fe:	4606      	mov	r6, r0
 8003500:	b950      	cbnz	r0, 8003518 <__ssputs_r+0x5c>
 8003502:	230c      	movs	r3, #12
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	f8ca 3000 	str.w	r3, [sl]
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003512:	81a3      	strh	r3, [r4, #12]
 8003514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003518:	464a      	mov	r2, r9
 800351a:	6921      	ldr	r1, [r4, #16]
 800351c:	f000 face 	bl	8003abc <memcpy>
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	6126      	str	r6, [r4, #16]
 800352e:	444e      	add	r6, r9
 8003530:	6026      	str	r6, [r4, #0]
 8003532:	463e      	mov	r6, r7
 8003534:	6165      	str	r5, [r4, #20]
 8003536:	eba5 0509 	sub.w	r5, r5, r9
 800353a:	60a5      	str	r5, [r4, #8]
 800353c:	42be      	cmp	r6, r7
 800353e:	d900      	bls.n	8003542 <__ssputs_r+0x86>
 8003540:	463e      	mov	r6, r7
 8003542:	4632      	mov	r2, r6
 8003544:	4641      	mov	r1, r8
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	f000 fac6 	bl	8003ad8 <memmove>
 800354c:	68a3      	ldr	r3, [r4, #8]
 800354e:	2000      	movs	r0, #0
 8003550:	1b9b      	subs	r3, r3, r6
 8003552:	60a3      	str	r3, [r4, #8]
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	4433      	add	r3, r6
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	e7db      	b.n	8003514 <__ssputs_r+0x58>
 800355c:	462a      	mov	r2, r5
 800355e:	f000 fbb1 	bl	8003cc4 <_realloc_r>
 8003562:	4606      	mov	r6, r0
 8003564:	2800      	cmp	r0, #0
 8003566:	d1e1      	bne.n	800352c <__ssputs_r+0x70>
 8003568:	4650      	mov	r0, sl
 800356a:	6921      	ldr	r1, [r4, #16]
 800356c:	f000 face 	bl	8003b0c <_free_r>
 8003570:	e7c7      	b.n	8003502 <__ssputs_r+0x46>
	...

08003574 <_svfiprintf_r>:
 8003574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003578:	4698      	mov	r8, r3
 800357a:	898b      	ldrh	r3, [r1, #12]
 800357c:	4607      	mov	r7, r0
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	460d      	mov	r5, r1
 8003582:	4614      	mov	r4, r2
 8003584:	b09d      	sub	sp, #116	; 0x74
 8003586:	d50e      	bpl.n	80035a6 <_svfiprintf_r+0x32>
 8003588:	690b      	ldr	r3, [r1, #16]
 800358a:	b963      	cbnz	r3, 80035a6 <_svfiprintf_r+0x32>
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	f000 fb25 	bl	8003bdc <_malloc_r>
 8003592:	6028      	str	r0, [r5, #0]
 8003594:	6128      	str	r0, [r5, #16]
 8003596:	b920      	cbnz	r0, 80035a2 <_svfiprintf_r+0x2e>
 8003598:	230c      	movs	r3, #12
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	e0d1      	b.n	8003746 <_svfiprintf_r+0x1d2>
 80035a2:	2340      	movs	r3, #64	; 0x40
 80035a4:	616b      	str	r3, [r5, #20]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9309      	str	r3, [sp, #36]	; 0x24
 80035aa:	2320      	movs	r3, #32
 80035ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035b0:	2330      	movs	r3, #48	; 0x30
 80035b2:	f04f 0901 	mov.w	r9, #1
 80035b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003760 <_svfiprintf_r+0x1ec>
 80035be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c2:	4623      	mov	r3, r4
 80035c4:	469a      	mov	sl, r3
 80035c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ca:	b10a      	cbz	r2, 80035d0 <_svfiprintf_r+0x5c>
 80035cc:	2a25      	cmp	r2, #37	; 0x25
 80035ce:	d1f9      	bne.n	80035c4 <_svfiprintf_r+0x50>
 80035d0:	ebba 0b04 	subs.w	fp, sl, r4
 80035d4:	d00b      	beq.n	80035ee <_svfiprintf_r+0x7a>
 80035d6:	465b      	mov	r3, fp
 80035d8:	4622      	mov	r2, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	4638      	mov	r0, r7
 80035de:	f7ff ff6d 	bl	80034bc <__ssputs_r>
 80035e2:	3001      	adds	r0, #1
 80035e4:	f000 80aa 	beq.w	800373c <_svfiprintf_r+0x1c8>
 80035e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035ea:	445a      	add	r2, fp
 80035ec:	9209      	str	r2, [sp, #36]	; 0x24
 80035ee:	f89a 3000 	ldrb.w	r3, [sl]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a2 	beq.w	800373c <_svfiprintf_r+0x1c8>
 80035f8:	2300      	movs	r3, #0
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295
 80035fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003602:	f10a 0a01 	add.w	sl, sl, #1
 8003606:	9304      	str	r3, [sp, #16]
 8003608:	9307      	str	r3, [sp, #28]
 800360a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800360e:	931a      	str	r3, [sp, #104]	; 0x68
 8003610:	4654      	mov	r4, sl
 8003612:	2205      	movs	r2, #5
 8003614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003618:	4851      	ldr	r0, [pc, #324]	; (8003760 <_svfiprintf_r+0x1ec>)
 800361a:	f000 fa41 	bl	8003aa0 <memchr>
 800361e:	9a04      	ldr	r2, [sp, #16]
 8003620:	b9d8      	cbnz	r0, 800365a <_svfiprintf_r+0xe6>
 8003622:	06d0      	lsls	r0, r2, #27
 8003624:	bf44      	itt	mi
 8003626:	2320      	movmi	r3, #32
 8003628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800362c:	0711      	lsls	r1, r2, #28
 800362e:	bf44      	itt	mi
 8003630:	232b      	movmi	r3, #43	; 0x2b
 8003632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003636:	f89a 3000 	ldrb.w	r3, [sl]
 800363a:	2b2a      	cmp	r3, #42	; 0x2a
 800363c:	d015      	beq.n	800366a <_svfiprintf_r+0xf6>
 800363e:	4654      	mov	r4, sl
 8003640:	2000      	movs	r0, #0
 8003642:	f04f 0c0a 	mov.w	ip, #10
 8003646:	9a07      	ldr	r2, [sp, #28]
 8003648:	4621      	mov	r1, r4
 800364a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800364e:	3b30      	subs	r3, #48	; 0x30
 8003650:	2b09      	cmp	r3, #9
 8003652:	d94e      	bls.n	80036f2 <_svfiprintf_r+0x17e>
 8003654:	b1b0      	cbz	r0, 8003684 <_svfiprintf_r+0x110>
 8003656:	9207      	str	r2, [sp, #28]
 8003658:	e014      	b.n	8003684 <_svfiprintf_r+0x110>
 800365a:	eba0 0308 	sub.w	r3, r0, r8
 800365e:	fa09 f303 	lsl.w	r3, r9, r3
 8003662:	4313      	orrs	r3, r2
 8003664:	46a2      	mov	sl, r4
 8003666:	9304      	str	r3, [sp, #16]
 8003668:	e7d2      	b.n	8003610 <_svfiprintf_r+0x9c>
 800366a:	9b03      	ldr	r3, [sp, #12]
 800366c:	1d19      	adds	r1, r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	9103      	str	r1, [sp, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	bfbb      	ittet	lt
 8003676:	425b      	neglt	r3, r3
 8003678:	f042 0202 	orrlt.w	r2, r2, #2
 800367c:	9307      	strge	r3, [sp, #28]
 800367e:	9307      	strlt	r3, [sp, #28]
 8003680:	bfb8      	it	lt
 8003682:	9204      	strlt	r2, [sp, #16]
 8003684:	7823      	ldrb	r3, [r4, #0]
 8003686:	2b2e      	cmp	r3, #46	; 0x2e
 8003688:	d10c      	bne.n	80036a4 <_svfiprintf_r+0x130>
 800368a:	7863      	ldrb	r3, [r4, #1]
 800368c:	2b2a      	cmp	r3, #42	; 0x2a
 800368e:	d135      	bne.n	80036fc <_svfiprintf_r+0x188>
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	3402      	adds	r4, #2
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	9203      	str	r2, [sp, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	bfb8      	it	lt
 800369e:	f04f 33ff 	movlt.w	r3, #4294967295
 80036a2:	9305      	str	r3, [sp, #20]
 80036a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003764 <_svfiprintf_r+0x1f0>
 80036a8:	2203      	movs	r2, #3
 80036aa:	4650      	mov	r0, sl
 80036ac:	7821      	ldrb	r1, [r4, #0]
 80036ae:	f000 f9f7 	bl	8003aa0 <memchr>
 80036b2:	b140      	cbz	r0, 80036c6 <_svfiprintf_r+0x152>
 80036b4:	2340      	movs	r3, #64	; 0x40
 80036b6:	eba0 000a 	sub.w	r0, r0, sl
 80036ba:	fa03 f000 	lsl.w	r0, r3, r0
 80036be:	9b04      	ldr	r3, [sp, #16]
 80036c0:	3401      	adds	r4, #1
 80036c2:	4303      	orrs	r3, r0
 80036c4:	9304      	str	r3, [sp, #16]
 80036c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ca:	2206      	movs	r2, #6
 80036cc:	4826      	ldr	r0, [pc, #152]	; (8003768 <_svfiprintf_r+0x1f4>)
 80036ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d2:	f000 f9e5 	bl	8003aa0 <memchr>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d038      	beq.n	800374c <_svfiprintf_r+0x1d8>
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <_svfiprintf_r+0x1f8>)
 80036dc:	bb1b      	cbnz	r3, 8003726 <_svfiprintf_r+0x1b2>
 80036de:	9b03      	ldr	r3, [sp, #12]
 80036e0:	3307      	adds	r3, #7
 80036e2:	f023 0307 	bic.w	r3, r3, #7
 80036e6:	3308      	adds	r3, #8
 80036e8:	9303      	str	r3, [sp, #12]
 80036ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ec:	4433      	add	r3, r6
 80036ee:	9309      	str	r3, [sp, #36]	; 0x24
 80036f0:	e767      	b.n	80035c2 <_svfiprintf_r+0x4e>
 80036f2:	460c      	mov	r4, r1
 80036f4:	2001      	movs	r0, #1
 80036f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80036fa:	e7a5      	b.n	8003648 <_svfiprintf_r+0xd4>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f04f 0c0a 	mov.w	ip, #10
 8003702:	4619      	mov	r1, r3
 8003704:	3401      	adds	r4, #1
 8003706:	9305      	str	r3, [sp, #20]
 8003708:	4620      	mov	r0, r4
 800370a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800370e:	3a30      	subs	r2, #48	; 0x30
 8003710:	2a09      	cmp	r2, #9
 8003712:	d903      	bls.n	800371c <_svfiprintf_r+0x1a8>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0c5      	beq.n	80036a4 <_svfiprintf_r+0x130>
 8003718:	9105      	str	r1, [sp, #20]
 800371a:	e7c3      	b.n	80036a4 <_svfiprintf_r+0x130>
 800371c:	4604      	mov	r4, r0
 800371e:	2301      	movs	r3, #1
 8003720:	fb0c 2101 	mla	r1, ip, r1, r2
 8003724:	e7f0      	b.n	8003708 <_svfiprintf_r+0x194>
 8003726:	ab03      	add	r3, sp, #12
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	462a      	mov	r2, r5
 800372c:	4638      	mov	r0, r7
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <_svfiprintf_r+0x1fc>)
 8003730:	a904      	add	r1, sp, #16
 8003732:	f3af 8000 	nop.w
 8003736:	1c42      	adds	r2, r0, #1
 8003738:	4606      	mov	r6, r0
 800373a:	d1d6      	bne.n	80036ea <_svfiprintf_r+0x176>
 800373c:	89ab      	ldrh	r3, [r5, #12]
 800373e:	065b      	lsls	r3, r3, #25
 8003740:	f53f af2c 	bmi.w	800359c <_svfiprintf_r+0x28>
 8003744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003746:	b01d      	add	sp, #116	; 0x74
 8003748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374c:	ab03      	add	r3, sp, #12
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	462a      	mov	r2, r5
 8003752:	4638      	mov	r0, r7
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <_svfiprintf_r+0x1fc>)
 8003756:	a904      	add	r1, sp, #16
 8003758:	f000 f87c 	bl	8003854 <_printf_i>
 800375c:	e7eb      	b.n	8003736 <_svfiprintf_r+0x1c2>
 800375e:	bf00      	nop
 8003760:	08003e00 	.word	0x08003e00
 8003764:	08003e06 	.word	0x08003e06
 8003768:	08003e0a 	.word	0x08003e0a
 800376c:	00000000 	.word	0x00000000
 8003770:	080034bd 	.word	0x080034bd

08003774 <_printf_common>:
 8003774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	4616      	mov	r6, r2
 800377a:	4699      	mov	r9, r3
 800377c:	688a      	ldr	r2, [r1, #8]
 800377e:	690b      	ldr	r3, [r1, #16]
 8003780:	4607      	mov	r7, r0
 8003782:	4293      	cmp	r3, r2
 8003784:	bfb8      	it	lt
 8003786:	4613      	movlt	r3, r2
 8003788:	6033      	str	r3, [r6, #0]
 800378a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800378e:	460c      	mov	r4, r1
 8003790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003794:	b10a      	cbz	r2, 800379a <_printf_common+0x26>
 8003796:	3301      	adds	r3, #1
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	0699      	lsls	r1, r3, #26
 800379e:	bf42      	ittt	mi
 80037a0:	6833      	ldrmi	r3, [r6, #0]
 80037a2:	3302      	addmi	r3, #2
 80037a4:	6033      	strmi	r3, [r6, #0]
 80037a6:	6825      	ldr	r5, [r4, #0]
 80037a8:	f015 0506 	ands.w	r5, r5, #6
 80037ac:	d106      	bne.n	80037bc <_printf_common+0x48>
 80037ae:	f104 0a19 	add.w	sl, r4, #25
 80037b2:	68e3      	ldr	r3, [r4, #12]
 80037b4:	6832      	ldr	r2, [r6, #0]
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	42ab      	cmp	r3, r5
 80037ba:	dc28      	bgt.n	800380e <_printf_common+0x9a>
 80037bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037c0:	1e13      	subs	r3, r2, #0
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	bf18      	it	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	0692      	lsls	r2, r2, #26
 80037ca:	d42d      	bmi.n	8003828 <_printf_common+0xb4>
 80037cc:	4649      	mov	r1, r9
 80037ce:	4638      	mov	r0, r7
 80037d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d4:	47c0      	blx	r8
 80037d6:	3001      	adds	r0, #1
 80037d8:	d020      	beq.n	800381c <_printf_common+0xa8>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	68e5      	ldr	r5, [r4, #12]
 80037de:	f003 0306 	and.w	r3, r3, #6
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	bf18      	it	ne
 80037e6:	2500      	movne	r5, #0
 80037e8:	6832      	ldr	r2, [r6, #0]
 80037ea:	f04f 0600 	mov.w	r6, #0
 80037ee:	68a3      	ldr	r3, [r4, #8]
 80037f0:	bf08      	it	eq
 80037f2:	1aad      	subeq	r5, r5, r2
 80037f4:	6922      	ldr	r2, [r4, #16]
 80037f6:	bf08      	it	eq
 80037f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bfc4      	itt	gt
 8003800:	1a9b      	subgt	r3, r3, r2
 8003802:	18ed      	addgt	r5, r5, r3
 8003804:	341a      	adds	r4, #26
 8003806:	42b5      	cmp	r5, r6
 8003808:	d11a      	bne.n	8003840 <_printf_common+0xcc>
 800380a:	2000      	movs	r0, #0
 800380c:	e008      	b.n	8003820 <_printf_common+0xac>
 800380e:	2301      	movs	r3, #1
 8003810:	4652      	mov	r2, sl
 8003812:	4649      	mov	r1, r9
 8003814:	4638      	mov	r0, r7
 8003816:	47c0      	blx	r8
 8003818:	3001      	adds	r0, #1
 800381a:	d103      	bne.n	8003824 <_printf_common+0xb0>
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003824:	3501      	adds	r5, #1
 8003826:	e7c4      	b.n	80037b2 <_printf_common+0x3e>
 8003828:	2030      	movs	r0, #48	; 0x30
 800382a:	18e1      	adds	r1, r4, r3
 800382c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003836:	4422      	add	r2, r4
 8003838:	3302      	adds	r3, #2
 800383a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800383e:	e7c5      	b.n	80037cc <_printf_common+0x58>
 8003840:	2301      	movs	r3, #1
 8003842:	4622      	mov	r2, r4
 8003844:	4649      	mov	r1, r9
 8003846:	4638      	mov	r0, r7
 8003848:	47c0      	blx	r8
 800384a:	3001      	adds	r0, #1
 800384c:	d0e6      	beq.n	800381c <_printf_common+0xa8>
 800384e:	3601      	adds	r6, #1
 8003850:	e7d9      	b.n	8003806 <_printf_common+0x92>
	...

08003854 <_printf_i>:
 8003854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	7e0f      	ldrb	r7, [r1, #24]
 800385a:	4691      	mov	r9, r2
 800385c:	2f78      	cmp	r7, #120	; 0x78
 800385e:	4680      	mov	r8, r0
 8003860:	460c      	mov	r4, r1
 8003862:	469a      	mov	sl, r3
 8003864:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800386a:	d807      	bhi.n	800387c <_printf_i+0x28>
 800386c:	2f62      	cmp	r7, #98	; 0x62
 800386e:	d80a      	bhi.n	8003886 <_printf_i+0x32>
 8003870:	2f00      	cmp	r7, #0
 8003872:	f000 80d9 	beq.w	8003a28 <_printf_i+0x1d4>
 8003876:	2f58      	cmp	r7, #88	; 0x58
 8003878:	f000 80a4 	beq.w	80039c4 <_printf_i+0x170>
 800387c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003884:	e03a      	b.n	80038fc <_printf_i+0xa8>
 8003886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800388a:	2b15      	cmp	r3, #21
 800388c:	d8f6      	bhi.n	800387c <_printf_i+0x28>
 800388e:	a101      	add	r1, pc, #4	; (adr r1, 8003894 <_printf_i+0x40>)
 8003890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003894:	080038ed 	.word	0x080038ed
 8003898:	08003901 	.word	0x08003901
 800389c:	0800387d 	.word	0x0800387d
 80038a0:	0800387d 	.word	0x0800387d
 80038a4:	0800387d 	.word	0x0800387d
 80038a8:	0800387d 	.word	0x0800387d
 80038ac:	08003901 	.word	0x08003901
 80038b0:	0800387d 	.word	0x0800387d
 80038b4:	0800387d 	.word	0x0800387d
 80038b8:	0800387d 	.word	0x0800387d
 80038bc:	0800387d 	.word	0x0800387d
 80038c0:	08003a0f 	.word	0x08003a0f
 80038c4:	08003931 	.word	0x08003931
 80038c8:	080039f1 	.word	0x080039f1
 80038cc:	0800387d 	.word	0x0800387d
 80038d0:	0800387d 	.word	0x0800387d
 80038d4:	08003a31 	.word	0x08003a31
 80038d8:	0800387d 	.word	0x0800387d
 80038dc:	08003931 	.word	0x08003931
 80038e0:	0800387d 	.word	0x0800387d
 80038e4:	0800387d 	.word	0x0800387d
 80038e8:	080039f9 	.word	0x080039f9
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	1d1a      	adds	r2, r3, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	602a      	str	r2, [r5, #0]
 80038f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0a4      	b.n	8003a4a <_printf_i+0x1f6>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	6829      	ldr	r1, [r5, #0]
 8003904:	0606      	lsls	r6, r0, #24
 8003906:	f101 0304 	add.w	r3, r1, #4
 800390a:	d50a      	bpl.n	8003922 <_printf_i+0xce>
 800390c:	680e      	ldr	r6, [r1, #0]
 800390e:	602b      	str	r3, [r5, #0]
 8003910:	2e00      	cmp	r6, #0
 8003912:	da03      	bge.n	800391c <_printf_i+0xc8>
 8003914:	232d      	movs	r3, #45	; 0x2d
 8003916:	4276      	negs	r6, r6
 8003918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800391c:	230a      	movs	r3, #10
 800391e:	485e      	ldr	r0, [pc, #376]	; (8003a98 <_printf_i+0x244>)
 8003920:	e019      	b.n	8003956 <_printf_i+0x102>
 8003922:	680e      	ldr	r6, [r1, #0]
 8003924:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003928:	602b      	str	r3, [r5, #0]
 800392a:	bf18      	it	ne
 800392c:	b236      	sxthne	r6, r6
 800392e:	e7ef      	b.n	8003910 <_printf_i+0xbc>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	6820      	ldr	r0, [r4, #0]
 8003934:	1d19      	adds	r1, r3, #4
 8003936:	6029      	str	r1, [r5, #0]
 8003938:	0601      	lsls	r1, r0, #24
 800393a:	d501      	bpl.n	8003940 <_printf_i+0xec>
 800393c:	681e      	ldr	r6, [r3, #0]
 800393e:	e002      	b.n	8003946 <_printf_i+0xf2>
 8003940:	0646      	lsls	r6, r0, #25
 8003942:	d5fb      	bpl.n	800393c <_printf_i+0xe8>
 8003944:	881e      	ldrh	r6, [r3, #0]
 8003946:	2f6f      	cmp	r7, #111	; 0x6f
 8003948:	bf0c      	ite	eq
 800394a:	2308      	moveq	r3, #8
 800394c:	230a      	movne	r3, #10
 800394e:	4852      	ldr	r0, [pc, #328]	; (8003a98 <_printf_i+0x244>)
 8003950:	2100      	movs	r1, #0
 8003952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003956:	6865      	ldr	r5, [r4, #4]
 8003958:	2d00      	cmp	r5, #0
 800395a:	bfa8      	it	ge
 800395c:	6821      	ldrge	r1, [r4, #0]
 800395e:	60a5      	str	r5, [r4, #8]
 8003960:	bfa4      	itt	ge
 8003962:	f021 0104 	bicge.w	r1, r1, #4
 8003966:	6021      	strge	r1, [r4, #0]
 8003968:	b90e      	cbnz	r6, 800396e <_printf_i+0x11a>
 800396a:	2d00      	cmp	r5, #0
 800396c:	d04d      	beq.n	8003a0a <_printf_i+0x1b6>
 800396e:	4615      	mov	r5, r2
 8003970:	fbb6 f1f3 	udiv	r1, r6, r3
 8003974:	fb03 6711 	mls	r7, r3, r1, r6
 8003978:	5dc7      	ldrb	r7, [r0, r7]
 800397a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800397e:	4637      	mov	r7, r6
 8003980:	42bb      	cmp	r3, r7
 8003982:	460e      	mov	r6, r1
 8003984:	d9f4      	bls.n	8003970 <_printf_i+0x11c>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d10b      	bne.n	80039a2 <_printf_i+0x14e>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	07de      	lsls	r6, r3, #31
 800398e:	d508      	bpl.n	80039a2 <_printf_i+0x14e>
 8003990:	6923      	ldr	r3, [r4, #16]
 8003992:	6861      	ldr	r1, [r4, #4]
 8003994:	4299      	cmp	r1, r3
 8003996:	bfde      	ittt	le
 8003998:	2330      	movle	r3, #48	; 0x30
 800399a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800399e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039a2:	1b52      	subs	r2, r2, r5
 80039a4:	6122      	str	r2, [r4, #16]
 80039a6:	464b      	mov	r3, r9
 80039a8:	4621      	mov	r1, r4
 80039aa:	4640      	mov	r0, r8
 80039ac:	f8cd a000 	str.w	sl, [sp]
 80039b0:	aa03      	add	r2, sp, #12
 80039b2:	f7ff fedf 	bl	8003774 <_printf_common>
 80039b6:	3001      	adds	r0, #1
 80039b8:	d14c      	bne.n	8003a54 <_printf_i+0x200>
 80039ba:	f04f 30ff 	mov.w	r0, #4294967295
 80039be:	b004      	add	sp, #16
 80039c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c4:	4834      	ldr	r0, [pc, #208]	; (8003a98 <_printf_i+0x244>)
 80039c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039ca:	6829      	ldr	r1, [r5, #0]
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80039d2:	6029      	str	r1, [r5, #0]
 80039d4:	061d      	lsls	r5, r3, #24
 80039d6:	d514      	bpl.n	8003a02 <_printf_i+0x1ae>
 80039d8:	07df      	lsls	r7, r3, #31
 80039da:	bf44      	itt	mi
 80039dc:	f043 0320 	orrmi.w	r3, r3, #32
 80039e0:	6023      	strmi	r3, [r4, #0]
 80039e2:	b91e      	cbnz	r6, 80039ec <_printf_i+0x198>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	f023 0320 	bic.w	r3, r3, #32
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	2310      	movs	r3, #16
 80039ee:	e7af      	b.n	8003950 <_printf_i+0xfc>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	f043 0320 	orr.w	r3, r3, #32
 80039f6:	6023      	str	r3, [r4, #0]
 80039f8:	2378      	movs	r3, #120	; 0x78
 80039fa:	4828      	ldr	r0, [pc, #160]	; (8003a9c <_printf_i+0x248>)
 80039fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a00:	e7e3      	b.n	80039ca <_printf_i+0x176>
 8003a02:	0659      	lsls	r1, r3, #25
 8003a04:	bf48      	it	mi
 8003a06:	b2b6      	uxthmi	r6, r6
 8003a08:	e7e6      	b.n	80039d8 <_printf_i+0x184>
 8003a0a:	4615      	mov	r5, r2
 8003a0c:	e7bb      	b.n	8003986 <_printf_i+0x132>
 8003a0e:	682b      	ldr	r3, [r5, #0]
 8003a10:	6826      	ldr	r6, [r4, #0]
 8003a12:	1d18      	adds	r0, r3, #4
 8003a14:	6961      	ldr	r1, [r4, #20]
 8003a16:	6028      	str	r0, [r5, #0]
 8003a18:	0635      	lsls	r5, r6, #24
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	d501      	bpl.n	8003a22 <_printf_i+0x1ce>
 8003a1e:	6019      	str	r1, [r3, #0]
 8003a20:	e002      	b.n	8003a28 <_printf_i+0x1d4>
 8003a22:	0670      	lsls	r0, r6, #25
 8003a24:	d5fb      	bpl.n	8003a1e <_printf_i+0x1ca>
 8003a26:	8019      	strh	r1, [r3, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4615      	mov	r5, r2
 8003a2c:	6123      	str	r3, [r4, #16]
 8003a2e:	e7ba      	b.n	80039a6 <_printf_i+0x152>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	2100      	movs	r1, #0
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	602a      	str	r2, [r5, #0]
 8003a38:	681d      	ldr	r5, [r3, #0]
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 f82f 	bl	8003aa0 <memchr>
 8003a42:	b108      	cbz	r0, 8003a48 <_printf_i+0x1f4>
 8003a44:	1b40      	subs	r0, r0, r5
 8003a46:	6060      	str	r0, [r4, #4]
 8003a48:	6863      	ldr	r3, [r4, #4]
 8003a4a:	6123      	str	r3, [r4, #16]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a52:	e7a8      	b.n	80039a6 <_printf_i+0x152>
 8003a54:	462a      	mov	r2, r5
 8003a56:	4649      	mov	r1, r9
 8003a58:	4640      	mov	r0, r8
 8003a5a:	6923      	ldr	r3, [r4, #16]
 8003a5c:	47d0      	blx	sl
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d0ab      	beq.n	80039ba <_printf_i+0x166>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	079b      	lsls	r3, r3, #30
 8003a66:	d413      	bmi.n	8003a90 <_printf_i+0x23c>
 8003a68:	68e0      	ldr	r0, [r4, #12]
 8003a6a:	9b03      	ldr	r3, [sp, #12]
 8003a6c:	4298      	cmp	r0, r3
 8003a6e:	bfb8      	it	lt
 8003a70:	4618      	movlt	r0, r3
 8003a72:	e7a4      	b.n	80039be <_printf_i+0x16a>
 8003a74:	2301      	movs	r3, #1
 8003a76:	4632      	mov	r2, r6
 8003a78:	4649      	mov	r1, r9
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	47d0      	blx	sl
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d09b      	beq.n	80039ba <_printf_i+0x166>
 8003a82:	3501      	adds	r5, #1
 8003a84:	68e3      	ldr	r3, [r4, #12]
 8003a86:	9903      	ldr	r1, [sp, #12]
 8003a88:	1a5b      	subs	r3, r3, r1
 8003a8a:	42ab      	cmp	r3, r5
 8003a8c:	dcf2      	bgt.n	8003a74 <_printf_i+0x220>
 8003a8e:	e7eb      	b.n	8003a68 <_printf_i+0x214>
 8003a90:	2500      	movs	r5, #0
 8003a92:	f104 0619 	add.w	r6, r4, #25
 8003a96:	e7f5      	b.n	8003a84 <_printf_i+0x230>
 8003a98:	08003e11 	.word	0x08003e11
 8003a9c:	08003e22 	.word	0x08003e22

08003aa0 <memchr>:
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	b2c9      	uxtb	r1, r1
 8003aa6:	4402      	add	r2, r0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	d101      	bne.n	8003ab2 <memchr+0x12>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e003      	b.n	8003aba <memchr+0x1a>
 8003ab2:	7804      	ldrb	r4, [r0, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	428c      	cmp	r4, r1
 8003ab8:	d1f6      	bne.n	8003aa8 <memchr+0x8>
 8003aba:	bd10      	pop	{r4, pc}

08003abc <memcpy>:
 8003abc:	440a      	add	r2, r1
 8003abe:	4291      	cmp	r1, r2
 8003ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ac4:	d100      	bne.n	8003ac8 <memcpy+0xc>
 8003ac6:	4770      	bx	lr
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ace:	4291      	cmp	r1, r2
 8003ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ad4:	d1f9      	bne.n	8003aca <memcpy+0xe>
 8003ad6:	bd10      	pop	{r4, pc}

08003ad8 <memmove>:
 8003ad8:	4288      	cmp	r0, r1
 8003ada:	b510      	push	{r4, lr}
 8003adc:	eb01 0402 	add.w	r4, r1, r2
 8003ae0:	d902      	bls.n	8003ae8 <memmove+0x10>
 8003ae2:	4284      	cmp	r4, r0
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	d807      	bhi.n	8003af8 <memmove+0x20>
 8003ae8:	1e43      	subs	r3, r0, #1
 8003aea:	42a1      	cmp	r1, r4
 8003aec:	d008      	beq.n	8003b00 <memmove+0x28>
 8003aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003af6:	e7f8      	b.n	8003aea <memmove+0x12>
 8003af8:	4601      	mov	r1, r0
 8003afa:	4402      	add	r2, r0
 8003afc:	428a      	cmp	r2, r1
 8003afe:	d100      	bne.n	8003b02 <memmove+0x2a>
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b0a:	e7f7      	b.n	8003afc <memmove+0x24>

08003b0c <_free_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4605      	mov	r5, r0
 8003b10:	2900      	cmp	r1, #0
 8003b12:	d040      	beq.n	8003b96 <_free_r+0x8a>
 8003b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b18:	1f0c      	subs	r4, r1, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bfb8      	it	lt
 8003b1e:	18e4      	addlt	r4, r4, r3
 8003b20:	f000 f910 	bl	8003d44 <__malloc_lock>
 8003b24:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <_free_r+0x8c>)
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	b933      	cbnz	r3, 8003b38 <_free_r+0x2c>
 8003b2a:	6063      	str	r3, [r4, #4]
 8003b2c:	6014      	str	r4, [r2, #0]
 8003b2e:	4628      	mov	r0, r5
 8003b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b34:	f000 b90c 	b.w	8003d50 <__malloc_unlock>
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d908      	bls.n	8003b4e <_free_r+0x42>
 8003b3c:	6820      	ldr	r0, [r4, #0]
 8003b3e:	1821      	adds	r1, r4, r0
 8003b40:	428b      	cmp	r3, r1
 8003b42:	bf01      	itttt	eq
 8003b44:	6819      	ldreq	r1, [r3, #0]
 8003b46:	685b      	ldreq	r3, [r3, #4]
 8003b48:	1809      	addeq	r1, r1, r0
 8003b4a:	6021      	streq	r1, [r4, #0]
 8003b4c:	e7ed      	b.n	8003b2a <_free_r+0x1e>
 8003b4e:	461a      	mov	r2, r3
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	b10b      	cbz	r3, 8003b58 <_free_r+0x4c>
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d9fa      	bls.n	8003b4e <_free_r+0x42>
 8003b58:	6811      	ldr	r1, [r2, #0]
 8003b5a:	1850      	adds	r0, r2, r1
 8003b5c:	42a0      	cmp	r0, r4
 8003b5e:	d10b      	bne.n	8003b78 <_free_r+0x6c>
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	4401      	add	r1, r0
 8003b64:	1850      	adds	r0, r2, r1
 8003b66:	4283      	cmp	r3, r0
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	d1e0      	bne.n	8003b2e <_free_r+0x22>
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4401      	add	r1, r0
 8003b72:	6011      	str	r1, [r2, #0]
 8003b74:	6053      	str	r3, [r2, #4]
 8003b76:	e7da      	b.n	8003b2e <_free_r+0x22>
 8003b78:	d902      	bls.n	8003b80 <_free_r+0x74>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	602b      	str	r3, [r5, #0]
 8003b7e:	e7d6      	b.n	8003b2e <_free_r+0x22>
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	1821      	adds	r1, r4, r0
 8003b84:	428b      	cmp	r3, r1
 8003b86:	bf01      	itttt	eq
 8003b88:	6819      	ldreq	r1, [r3, #0]
 8003b8a:	685b      	ldreq	r3, [r3, #4]
 8003b8c:	1809      	addeq	r1, r1, r0
 8003b8e:	6021      	streq	r1, [r4, #0]
 8003b90:	6063      	str	r3, [r4, #4]
 8003b92:	6054      	str	r4, [r2, #4]
 8003b94:	e7cb      	b.n	8003b2e <_free_r+0x22>
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	2000016c 	.word	0x2000016c

08003b9c <sbrk_aligned>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4e0e      	ldr	r6, [pc, #56]	; (8003bd8 <sbrk_aligned+0x3c>)
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	6831      	ldr	r1, [r6, #0]
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	b911      	cbnz	r1, 8003bae <sbrk_aligned+0x12>
 8003ba8:	f000 f8bc 	bl	8003d24 <_sbrk_r>
 8003bac:	6030      	str	r0, [r6, #0]
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 f8b7 	bl	8003d24 <_sbrk_r>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d00a      	beq.n	8003bd0 <sbrk_aligned+0x34>
 8003bba:	1cc4      	adds	r4, r0, #3
 8003bbc:	f024 0403 	bic.w	r4, r4, #3
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d007      	beq.n	8003bd4 <sbrk_aligned+0x38>
 8003bc4:	1a21      	subs	r1, r4, r0
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 f8ac 	bl	8003d24 <_sbrk_r>
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d101      	bne.n	8003bd4 <sbrk_aligned+0x38>
 8003bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	20000170 	.word	0x20000170

08003bdc <_malloc_r>:
 8003bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be0:	1ccd      	adds	r5, r1, #3
 8003be2:	f025 0503 	bic.w	r5, r5, #3
 8003be6:	3508      	adds	r5, #8
 8003be8:	2d0c      	cmp	r5, #12
 8003bea:	bf38      	it	cc
 8003bec:	250c      	movcc	r5, #12
 8003bee:	2d00      	cmp	r5, #0
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	db01      	blt.n	8003bf8 <_malloc_r+0x1c>
 8003bf4:	42a9      	cmp	r1, r5
 8003bf6:	d905      	bls.n	8003c04 <_malloc_r+0x28>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4630      	mov	r0, r6
 8003c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c04:	4e2e      	ldr	r6, [pc, #184]	; (8003cc0 <_malloc_r+0xe4>)
 8003c06:	f000 f89d 	bl	8003d44 <__malloc_lock>
 8003c0a:	6833      	ldr	r3, [r6, #0]
 8003c0c:	461c      	mov	r4, r3
 8003c0e:	bb34      	cbnz	r4, 8003c5e <_malloc_r+0x82>
 8003c10:	4629      	mov	r1, r5
 8003c12:	4638      	mov	r0, r7
 8003c14:	f7ff ffc2 	bl	8003b9c <sbrk_aligned>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	d14d      	bne.n	8003cba <_malloc_r+0xde>
 8003c1e:	6834      	ldr	r4, [r6, #0]
 8003c20:	4626      	mov	r6, r4
 8003c22:	2e00      	cmp	r6, #0
 8003c24:	d140      	bne.n	8003ca8 <_malloc_r+0xcc>
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	eb04 0803 	add.w	r8, r4, r3
 8003c30:	f000 f878 	bl	8003d24 <_sbrk_r>
 8003c34:	4580      	cmp	r8, r0
 8003c36:	d13a      	bne.n	8003cae <_malloc_r+0xd2>
 8003c38:	6821      	ldr	r1, [r4, #0]
 8003c3a:	3503      	adds	r5, #3
 8003c3c:	1a6d      	subs	r5, r5, r1
 8003c3e:	f025 0503 	bic.w	r5, r5, #3
 8003c42:	3508      	adds	r5, #8
 8003c44:	2d0c      	cmp	r5, #12
 8003c46:	bf38      	it	cc
 8003c48:	250c      	movcc	r5, #12
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	f7ff ffa5 	bl	8003b9c <sbrk_aligned>
 8003c52:	3001      	adds	r0, #1
 8003c54:	d02b      	beq.n	8003cae <_malloc_r+0xd2>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	442b      	add	r3, r5
 8003c5a:	6023      	str	r3, [r4, #0]
 8003c5c:	e00e      	b.n	8003c7c <_malloc_r+0xa0>
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	1b52      	subs	r2, r2, r5
 8003c62:	d41e      	bmi.n	8003ca2 <_malloc_r+0xc6>
 8003c64:	2a0b      	cmp	r2, #11
 8003c66:	d916      	bls.n	8003c96 <_malloc_r+0xba>
 8003c68:	1961      	adds	r1, r4, r5
 8003c6a:	42a3      	cmp	r3, r4
 8003c6c:	6025      	str	r5, [r4, #0]
 8003c6e:	bf18      	it	ne
 8003c70:	6059      	strne	r1, [r3, #4]
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	bf08      	it	eq
 8003c76:	6031      	streq	r1, [r6, #0]
 8003c78:	5162      	str	r2, [r4, r5]
 8003c7a:	604b      	str	r3, [r1, #4]
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f104 060b 	add.w	r6, r4, #11
 8003c82:	f000 f865 	bl	8003d50 <__malloc_unlock>
 8003c86:	f026 0607 	bic.w	r6, r6, #7
 8003c8a:	1d23      	adds	r3, r4, #4
 8003c8c:	1af2      	subs	r2, r6, r3
 8003c8e:	d0b6      	beq.n	8003bfe <_malloc_r+0x22>
 8003c90:	1b9b      	subs	r3, r3, r6
 8003c92:	50a3      	str	r3, [r4, r2]
 8003c94:	e7b3      	b.n	8003bfe <_malloc_r+0x22>
 8003c96:	6862      	ldr	r2, [r4, #4]
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	bf0c      	ite	eq
 8003c9c:	6032      	streq	r2, [r6, #0]
 8003c9e:	605a      	strne	r2, [r3, #4]
 8003ca0:	e7ec      	b.n	8003c7c <_malloc_r+0xa0>
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	6864      	ldr	r4, [r4, #4]
 8003ca6:	e7b2      	b.n	8003c0e <_malloc_r+0x32>
 8003ca8:	4634      	mov	r4, r6
 8003caa:	6876      	ldr	r6, [r6, #4]
 8003cac:	e7b9      	b.n	8003c22 <_malloc_r+0x46>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	f000 f84c 	bl	8003d50 <__malloc_unlock>
 8003cb8:	e7a1      	b.n	8003bfe <_malloc_r+0x22>
 8003cba:	6025      	str	r5, [r4, #0]
 8003cbc:	e7de      	b.n	8003c7c <_malloc_r+0xa0>
 8003cbe:	bf00      	nop
 8003cc0:	2000016c 	.word	0x2000016c

08003cc4 <_realloc_r>:
 8003cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc8:	4680      	mov	r8, r0
 8003cca:	4614      	mov	r4, r2
 8003ccc:	460e      	mov	r6, r1
 8003cce:	b921      	cbnz	r1, 8003cda <_realloc_r+0x16>
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd6:	f7ff bf81 	b.w	8003bdc <_malloc_r>
 8003cda:	b92a      	cbnz	r2, 8003ce8 <_realloc_r+0x24>
 8003cdc:	f7ff ff16 	bl	8003b0c <_free_r>
 8003ce0:	4625      	mov	r5, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce8:	f000 f838 	bl	8003d5c <_malloc_usable_size_r>
 8003cec:	4284      	cmp	r4, r0
 8003cee:	4607      	mov	r7, r0
 8003cf0:	d802      	bhi.n	8003cf8 <_realloc_r+0x34>
 8003cf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cf6:	d812      	bhi.n	8003d1e <_realloc_r+0x5a>
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	f7ff ff6e 	bl	8003bdc <_malloc_r>
 8003d00:	4605      	mov	r5, r0
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d0ed      	beq.n	8003ce2 <_realloc_r+0x1e>
 8003d06:	42bc      	cmp	r4, r7
 8003d08:	4622      	mov	r2, r4
 8003d0a:	4631      	mov	r1, r6
 8003d0c:	bf28      	it	cs
 8003d0e:	463a      	movcs	r2, r7
 8003d10:	f7ff fed4 	bl	8003abc <memcpy>
 8003d14:	4631      	mov	r1, r6
 8003d16:	4640      	mov	r0, r8
 8003d18:	f7ff fef8 	bl	8003b0c <_free_r>
 8003d1c:	e7e1      	b.n	8003ce2 <_realloc_r+0x1e>
 8003d1e:	4635      	mov	r5, r6
 8003d20:	e7df      	b.n	8003ce2 <_realloc_r+0x1e>
	...

08003d24 <_sbrk_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	2300      	movs	r3, #0
 8003d28:	4d05      	ldr	r5, [pc, #20]	; (8003d40 <_sbrk_r+0x1c>)
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	f7fc fc46 	bl	80005c0 <_sbrk>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_sbrk_r+0x1a>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_sbrk_r+0x1a>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000174 	.word	0x20000174

08003d44 <__malloc_lock>:
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <__malloc_lock+0x8>)
 8003d46:	f000 b811 	b.w	8003d6c <__retarget_lock_acquire_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	20000178 	.word	0x20000178

08003d50 <__malloc_unlock>:
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <__malloc_unlock+0x8>)
 8003d52:	f000 b80c 	b.w	8003d6e <__retarget_lock_release_recursive>
 8003d56:	bf00      	nop
 8003d58:	20000178 	.word	0x20000178

08003d5c <_malloc_usable_size_r>:
 8003d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d60:	1f18      	subs	r0, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfbc      	itt	lt
 8003d66:	580b      	ldrlt	r3, [r1, r0]
 8003d68:	18c0      	addlt	r0, r0, r3
 8003d6a:	4770      	bx	lr

08003d6c <__retarget_lock_acquire_recursive>:
 8003d6c:	4770      	bx	lr

08003d6e <__retarget_lock_release_recursive>:
 8003d6e:	4770      	bx	lr

08003d70 <_init>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr

08003d7c <_fini>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr
