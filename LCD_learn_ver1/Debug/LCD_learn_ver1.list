
LCD_learn_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002550  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002690  08002690  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002690  08002690  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002690  08002690  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080026a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080026a4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b394  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189b  00000000  00000000  0002b3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a6a  00000000  00000000  0002e428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dabd  00000000  00000000  00045e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a440  00000000  00000000  0005394f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddd8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000ddde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002644 	.word	0x08002644

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002644 	.word	0x08002644

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fac9 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f86d 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f959 	bl	8000420 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016e:	f000 f8af 	bl	80002d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000172:	f000 f8db 	bl	800032c <MX_I2C2_Init>
  MX_TIM2_Init();
 8000176:	f000 f907 	bl	8000388 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_i2c_init(&p_lcd, &hi2c1,16,2,0x27<<1);
 800017a:	234e      	movs	r3, #78	; 0x4e
 800017c:	9300      	str	r3, [sp, #0]
 800017e:	2302      	movs	r3, #2
 8000180:	2210      	movs	r2, #16
 8000182:	492d      	ldr	r1, [pc, #180]	; (8000238 <main+0xdc>)
 8000184:	482d      	ldr	r0, [pc, #180]	; (800023c <main+0xe0>)
 8000186:	f002 f903 	bl	8002390 <lcd_i2c_init>
//  lcd_set_cursor(&p_lcd, 0, 0);
//  lcd_send_string(&p_lcd, "phamtuan");

  char str[] = "phamtuan";
 800018a:	4a2d      	ldr	r2, [pc, #180]	; (8000240 <main+0xe4>)
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000190:	c303      	stmia	r3!, {r0, r1}
 8000192:	701a      	strb	r2, [r3, #0]
//		  lcd_clear(&p_lcd);
//		  lcd_set_cursor(&p_lcd, 0, 0);
//		  lcd_send_string(&p_lcd, &str[strlen(str) - i]);
//		  HAL_Delay(500);
//	  }
	  for (int i = 0; i < 16 - strlen(str); i++)
 8000194:	2300      	movs	r3, #0
 8000196:	617b      	str	r3, [r7, #20]
 8000198:	e014      	b.n	80001c4 <main+0x68>
	  {
		  lcd_clear(&p_lcd);
 800019a:	4828      	ldr	r0, [pc, #160]	; (800023c <main+0xe0>)
 800019c:	f002 fa11 	bl	80025c2 <lcd_clear>
		  lcd_set_cursor(&p_lcd, i, 0);
 80001a0:	697b      	ldr	r3, [r7, #20]
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2200      	movs	r2, #0
 80001a6:	4619      	mov	r1, r3
 80001a8:	4824      	ldr	r0, [pc, #144]	; (800023c <main+0xe0>)
 80001aa:	f002 f9c9 	bl	8002540 <lcd_set_cursor>
		  lcd_send_string(&p_lcd, "phamtuan");
 80001ae:	4924      	ldr	r1, [pc, #144]	; (8000240 <main+0xe4>)
 80001b0:	4822      	ldr	r0, [pc, #136]	; (800023c <main+0xe0>)
 80001b2:	f002 f9ef 	bl	8002594 <lcd_send_string>
		  HAL_Delay(500);
 80001b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ba:	f000 faff 	bl	80007bc <HAL_Delay>
	  for (int i = 0; i < 16 - strlen(str); i++)
 80001be:	697b      	ldr	r3, [r7, #20]
 80001c0:	3301      	adds	r3, #1
 80001c2:	617b      	str	r3, [r7, #20]
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffc0 	bl	800014c <strlen>
 80001cc:	4603      	mov	r3, r0
 80001ce:	f1c3 0210 	rsb	r2, r3, #16
 80001d2:	697b      	ldr	r3, [r7, #20]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d8e0      	bhi.n	800019a <main+0x3e>
	  }
	  for (int i = 16 - strlen(str); i < 16; i++ )
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	4618      	mov	r0, r3
 80001dc:	f7ff ffb6 	bl	800014c <strlen>
 80001e0:	4603      	mov	r3, r0
 80001e2:	f1c3 0310 	rsb	r3, r3, #16
 80001e6:	613b      	str	r3, [r7, #16]
 80001e8:	e022      	b.n	8000230 <main+0xd4>
	  {
		  lcd_clear(&p_lcd);
 80001ea:	4814      	ldr	r0, [pc, #80]	; (800023c <main+0xe0>)
 80001ec:	f002 f9e9 	bl	80025c2 <lcd_clear>
		  lcd_set_cursor(&p_lcd, i, 0);
 80001f0:	693b      	ldr	r3, [r7, #16]
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2200      	movs	r2, #0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4810      	ldr	r0, [pc, #64]	; (800023c <main+0xe0>)
 80001fa:	f002 f9a1 	bl	8002540 <lcd_set_cursor>
		  lcd_send_string(&p_lcd, "phamtuan");
 80001fe:	4910      	ldr	r1, [pc, #64]	; (8000240 <main+0xe4>)
 8000200:	480e      	ldr	r0, [pc, #56]	; (800023c <main+0xe0>)
 8000202:	f002 f9c7 	bl	8002594 <lcd_send_string>
		  lcd_set_cursor(&p_lcd, 0, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	480c      	ldr	r0, [pc, #48]	; (800023c <main+0xe0>)
 800020c:	f002 f998 	bl	8002540 <lcd_set_cursor>
		  lcd_send_string(&p_lcd, &str[16 - i]);
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	f1c3 0310 	rsb	r3, r3, #16
 8000216:	1d3a      	adds	r2, r7, #4
 8000218:	4413      	add	r3, r2
 800021a:	4619      	mov	r1, r3
 800021c:	4807      	ldr	r0, [pc, #28]	; (800023c <main+0xe0>)
 800021e:	f002 f9b9 	bl	8002594 <lcd_send_string>
		  HAL_Delay(500);
 8000222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000226:	f000 fac9 	bl	80007bc <HAL_Delay>
	  for (int i = 16 - strlen(str); i < 16; i++ )
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	3301      	adds	r3, #1
 800022e:	613b      	str	r3, [r7, #16]
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	2b0f      	cmp	r3, #15
 8000234:	ddd9      	ble.n	80001ea <main+0x8e>
	  for (int i = 0; i < 16 - strlen(str); i++)
 8000236:	e7ad      	b.n	8000194 <main+0x38>
 8000238:	20000028 	.word	0x20000028
 800023c:	20000118 	.word	0x20000118
 8000240:	0800265c 	.word	0x0800265c

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 f9ee 	bl	8002634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f001 f983 	bl	8001598 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000298:	f000 f91a 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fbf0 	bl	8001a9c <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c2:	f000 f905 	bl	80004d0 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_I2C1_Init+0x50>)
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <MX_I2C1_Init+0x54>)
 80002d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_I2C1_Init+0x50>)
 80002dc:	4a12      	ldr	r2, [pc, #72]	; (8000328 <MX_I2C1_Init+0x58>)
 80002de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_I2C1_Init+0x50>)
 80002ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <MX_I2C1_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_I2C1_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_I2C1_Init+0x50>)
 800030e:	f000 fcf9 	bl	8000d04 <HAL_I2C_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000318:	f000 f8da 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000028 	.word	0x20000028
 8000324:	40005400 	.word	0x40005400
 8000328:	000186a0 	.word	0x000186a0

0800032c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_I2C2_Init+0x50>)
 8000332:	4a13      	ldr	r2, [pc, #76]	; (8000380 <MX_I2C2_Init+0x54>)
 8000334:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_I2C2_Init+0x50>)
 8000338:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MX_I2C2_Init+0x58>)
 800033a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_I2C2_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_I2C2_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_I2C2_Init+0x50>)
 800034a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b0a      	ldr	r3, [pc, #40]	; (800037c <MX_I2C2_Init+0x50>)
 8000352:	2200      	movs	r2, #0
 8000354:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_I2C2_Init+0x50>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <MX_I2C2_Init+0x50>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_I2C2_Init+0x50>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_I2C2_Init+0x50>)
 800036a:	f000 fccb 	bl	8000d04 <HAL_I2C_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000374:	f000 f8ac 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000007c 	.word	0x2000007c
 8000380:	40005800 	.word	0x40005800
 8000384:	000186a0 	.word	0x000186a0

08000388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039c:	463b      	mov	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <MX_TIM2_Init+0x94>)
 80003a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_TIM2_Init+0x94>)
 80003ae:	2247      	movs	r2, #71	; 0x47
 80003b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_TIM2_Init+0x94>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_TIM2_Init+0x94>)
 80003ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_TIM2_Init+0x94>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_TIM2_Init+0x94>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003cc:	4813      	ldr	r0, [pc, #76]	; (800041c <MX_TIM2_Init+0x94>)
 80003ce:	f001 fce9 	bl	8001da4 <HAL_TIM_Base_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003d8:	f000 f87a 	bl	80004d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	4619      	mov	r1, r3
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <MX_TIM2_Init+0x94>)
 80003ea:	f001 fd9b 	bl	8001f24 <HAL_TIM_ConfigClockSource>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003f4:	f000 f86c 	bl	80004d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f8:	2300      	movs	r3, #0
 80003fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	4619      	mov	r1, r3
 8000404:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_TIM2_Init+0x94>)
 8000406:	f001 ff49 	bl	800229c <HAL_TIMEx_MasterConfigSynchronization>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000410:	f000 f85e 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200000d0 	.word	0x200000d0

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000434:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <MX_GPIO_Init+0xa8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a23      	ldr	r2, [pc, #140]	; (80004c8 <MX_GPIO_Init+0xa8>)
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_GPIO_Init+0xa8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0310 	and.w	r3, r3, #16
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_GPIO_Init+0xa8>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <MX_GPIO_Init+0xa8>)
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_GPIO_Init+0xa8>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0320 	and.w	r3, r3, #32
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_GPIO_Init+0xa8>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a17      	ldr	r2, [pc, #92]	; (80004c8 <MX_GPIO_Init+0xa8>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_GPIO_Init+0xa8>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_GPIO_Init+0xa8>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <MX_GPIO_Init+0xa8>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_GPIO_Init+0xa8>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	603b      	str	r3, [r7, #0]
 8000492:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049a:	480c      	ldr	r0, [pc, #48]	; (80004cc <MX_GPIO_Init+0xac>)
 800049c:	f000 fc1a 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <MX_GPIO_Init+0xac>)
 80004ba:	f000 fa87 	bl	80009cc <HAL_GPIO_Init>

}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40011000 	.word	0x40011000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_MspInit+0x5c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_MspInit+0x5c>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_MspInit+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <HAL_MspInit+0x60>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <HAL_I2C_MspInit+0xc8>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d124      	bne.n	80005aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <HAL_I2C_MspInit+0xcc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <HAL_I2C_MspInit+0xcc>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <HAL_I2C_MspInit+0xcc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000578:	23c0      	movs	r3, #192	; 0xc0
 800057a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057c:	2312      	movs	r3, #18
 800057e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4619      	mov	r1, r3
 800058a:	4821      	ldr	r0, [pc, #132]	; (8000610 <HAL_I2C_MspInit+0xd0>)
 800058c:	f000 fa1e 	bl	80009cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <HAL_I2C_MspInit+0xcc>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	4a1d      	ldr	r2, [pc, #116]	; (800060c <HAL_I2C_MspInit+0xcc>)
 8000596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800059a:	61d3      	str	r3, [r2, #28]
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_I2C_MspInit+0xcc>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005a8:	e029      	b.n	80005fe <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a19      	ldr	r2, [pc, #100]	; (8000614 <HAL_I2C_MspInit+0xd4>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d124      	bne.n	80005fe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_I2C_MspInit+0xcc>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_I2C_MspInit+0xcc>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_I2C_MspInit+0xcc>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80005cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d2:	2312      	movs	r3, #18
 80005d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <HAL_I2C_MspInit+0xd0>)
 80005e2:	f000 f9f3 	bl	80009cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_I2C_MspInit+0xcc>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <HAL_I2C_MspInit+0xcc>)
 80005ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_I2C_MspInit+0xcc>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	; 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40005400 	.word	0x40005400
 800060c:	40021000 	.word	0x40021000
 8000610:	40010c00 	.word	0x40010c00
 8000614:	40005800 	.word	0x40005800

08000618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	d10b      	bne.n	8000642 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_TIM_Base_MspInit+0x34>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_TIM_Base_MspInit+0x34>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_TIM_Base_MspInit+0x34>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr

08000692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000696:	f000 f875 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
	...

080006ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006d2:	f7ff ffe4 	bl	800069e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d6:	f001 ff89 	bl	80025ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fd3f 	bl	800015c <main>
  bx lr
 80006de:	4770      	bx	lr
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e8:	08002698 	.word	0x08002698
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f0:	20000128 	.word	0x20000128

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f92b 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	200f      	movs	r0, #15
 8000710:	f000 f808 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fee2 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x54>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	fbb3 f3f1 	udiv	r3, r3, r1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f935 	bl	80009b2 <HAL_SYSTICK_Config>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e00e      	b.n	8000770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d80a      	bhi.n	800076e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f000 f90b 	bl	800097a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_InitTick+0x5c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <HAL_IncTick+0x20>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000124 	.word	0x20000124

080007a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000124 	.word	0x20000124

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff0 	bl	80007a8 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_Delay+0x44>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffe0 	bl	80007a8 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008

08000804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800082c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	60d3      	str	r3, [r2, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <__NVIC_GetPriorityGrouping+0x18>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	f003 0307 	and.w	r3, r3, #7
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f1c3 0307 	rsb	r3, r3, #7
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	bf28      	it	cs
 80008da:	2304      	movcs	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d902      	bls.n	80008ec <NVIC_EncodePriority+0x30>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b03      	subs	r3, #3
 80008ea:	e000      	b.n	80008ee <NVIC_EncodePriority+0x32>
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000904:	f04f 31ff 	mov.w	r1, #4294967295
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43d9      	mvns	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4313      	orrs	r3, r2
         );
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000930:	d301      	bcc.n	8000936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2301      	movs	r3, #1
 8000934:	e00f      	b.n	8000956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <SysTick_Config+0x40>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093e:	210f      	movs	r1, #15
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f7ff ff90 	bl	8000868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SysTick_Config+0x40>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SysTick_Config+0x40>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff49 	bl	8000804 <__NVIC_SetPriorityGrouping>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff5e 	bl	800084c <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff90 	bl	80008bc <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5f 	bl	8000868 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffb0 	bl	8000920 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e169      	b.n	8000cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e0:	2201      	movs	r2, #1
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f040 8158 	bne.w	8000cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4a9a      	ldr	r2, [pc, #616]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d05e      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a08:	4a98      	ldr	r2, [pc, #608]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d875      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a0e:	4a98      	ldr	r2, [pc, #608]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d058      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a14:	4a96      	ldr	r2, [pc, #600]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d86f      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a1a:	4a96      	ldr	r2, [pc, #600]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d052      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a20:	4a94      	ldr	r2, [pc, #592]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d869      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a26:	4a94      	ldr	r2, [pc, #592]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d04c      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a2c:	4a92      	ldr	r2, [pc, #584]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d863      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a32:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d046      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a38:	4a90      	ldr	r2, [pc, #576]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d85d      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d82a      	bhi.n	8000a98 <HAL_GPIO_Init+0xcc>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d859      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a46:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <HAL_GPIO_Init+0x80>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000aa1 	.word	0x08000aa1
 8000a54:	08000ab3 	.word	0x08000ab3
 8000a58:	08000af5 	.word	0x08000af5
 8000a5c:	08000afb 	.word	0x08000afb
 8000a60:	08000afb 	.word	0x08000afb
 8000a64:	08000afb 	.word	0x08000afb
 8000a68:	08000afb 	.word	0x08000afb
 8000a6c:	08000afb 	.word	0x08000afb
 8000a70:	08000afb 	.word	0x08000afb
 8000a74:	08000afb 	.word	0x08000afb
 8000a78:	08000afb 	.word	0x08000afb
 8000a7c:	08000afb 	.word	0x08000afb
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000afb 	.word	0x08000afb
 8000a88:	08000afb 	.word	0x08000afb
 8000a8c:	08000afb 	.word	0x08000afb
 8000a90:	08000aa9 	.word	0x08000aa9
 8000a94:	08000abd 	.word	0x08000abd
 8000a98:	4a79      	ldr	r2, [pc, #484]	; (8000c80 <HAL_GPIO_Init+0x2b4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e029      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e024      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01f      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e01a      	b.n	8000afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e013      	b.n	8000afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e009      	b.n	8000afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e003      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e000      	b.n	8000afc <HAL_GPIO_Init+0x130>
          break;
 8000afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d801      	bhi.n	8000b06 <HAL_GPIO_Init+0x13a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	e001      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2bff      	cmp	r3, #255	; 0xff
 8000b10:	d802      	bhi.n	8000b18 <HAL_GPIO_Init+0x14c>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	e002      	b.n	8000b1e <HAL_GPIO_Init+0x152>
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	3b08      	subs	r3, #8
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	210f      	movs	r1, #15
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	6a39      	ldr	r1, [r7, #32]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80b1 	beq.w	8000cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b64:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_GPIO_Init+0x2c0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d013      	beq.n	8000bb8 <HAL_GPIO_Init+0x1ec>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3f      	ldr	r2, [pc, #252]	; (8000c90 <HAL_GPIO_Init+0x2c4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d00d      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e8>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <HAL_GPIO_Init+0x2c8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x1e4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d101      	bne.n	8000bac <HAL_GPIO_Init+0x1e0>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bca:	492f      	ldr	r1, [pc, #188]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	492c      	ldr	r1, [pc, #176]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4928      	ldr	r1, [pc, #160]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d006      	beq.n	8000c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	4922      	ldr	r1, [pc, #136]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	491e      	ldr	r1, [pc, #120]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	4918      	ldr	r1, [pc, #96]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4914      	ldr	r1, [pc, #80]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d021      	beq.n	8000ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	60cb      	str	r3, [r1, #12]
 8000c68:	e021      	b.n	8000cae <HAL_GPIO_Init+0x2e2>
 8000c6a:	bf00      	nop
 8000c6c:	10320000 	.word	0x10320000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	10220000 	.word	0x10220000
 8000c78:	10210000 	.word	0x10210000
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	10110000 	.word	0x10110000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f47f ae8e 	bne.w	80009e0 <HAL_GPIO_Init+0x14>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	372c      	adds	r7, #44	; 0x2c
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf0:	e003      	b.n	8000cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	611a      	str	r2, [r3, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e12b      	b.n	8000f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d106      	bne.n	8000d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fc08 	bl	8000540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2224      	movs	r2, #36	; 0x24
 8000d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d68:	f000 ffea 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8000d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a81      	ldr	r2, [pc, #516]	; (8000f78 <HAL_I2C_Init+0x274>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d807      	bhi.n	8000d88 <HAL_I2C_Init+0x84>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4a80      	ldr	r2, [pc, #512]	; (8000f7c <HAL_I2C_Init+0x278>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	bf94      	ite	ls
 8000d80:	2301      	movls	r3, #1
 8000d82:	2300      	movhi	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	e006      	b.n	8000d96 <HAL_I2C_Init+0x92>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4a7d      	ldr	r2, [pc, #500]	; (8000f80 <HAL_I2C_Init+0x27c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	bf94      	ite	ls
 8000d90:	2301      	movls	r3, #1
 8000d92:	2300      	movhi	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0e7      	b.n	8000f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4a78      	ldr	r2, [pc, #480]	; (8000f84 <HAL_I2C_Init+0x280>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4a6a      	ldr	r2, [pc, #424]	; (8000f78 <HAL_I2C_Init+0x274>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d802      	bhi.n	8000dd8 <HAL_I2C_Init+0xd4>
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	e009      	b.n	8000dec <HAL_I2C_Init+0xe8>
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	4a69      	ldr	r2, [pc, #420]	; (8000f88 <HAL_I2C_Init+0x284>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	099b      	lsrs	r3, r3, #6
 8000dea:	3301      	adds	r3, #1
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	495c      	ldr	r1, [pc, #368]	; (8000f78 <HAL_I2C_Init+0x274>)
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d819      	bhi.n	8000e40 <HAL_I2C_Init+0x13c>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1e59      	subs	r1, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e20:	400b      	ands	r3, r1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00a      	beq.n	8000e3c <HAL_I2C_Init+0x138>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	1e59      	subs	r1, r3, #1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e3a:	e051      	b.n	8000ee0 <HAL_I2C_Init+0x1dc>
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	e04f      	b.n	8000ee0 <HAL_I2C_Init+0x1dc>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d111      	bne.n	8000e6c <HAL_I2C_Init+0x168>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	1e58      	subs	r0, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	440b      	add	r3, r1
 8000e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bf0c      	ite	eq
 8000e64:	2301      	moveq	r3, #1
 8000e66:	2300      	movne	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	e012      	b.n	8000e92 <HAL_I2C_Init+0x18e>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	1e58      	subs	r0, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6859      	ldr	r1, [r3, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	0099      	lsls	r1, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_I2C_Init+0x196>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e022      	b.n	8000ee0 <HAL_I2C_Init+0x1dc>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_I2C_Init+0x1bc>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1e58      	subs	r0, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6859      	ldr	r1, [r3, #4]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	440b      	add	r3, r1
 8000eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ebe:	e00f      	b.n	8000ee0 <HAL_I2C_Init+0x1dc>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	1e58      	subs	r0, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6859      	ldr	r1, [r3, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	0099      	lsls	r1, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	6809      	ldr	r1, [r1, #0]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6911      	ldr	r1, [r2, #16]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68d2      	ldr	r2, [r2, #12]
 8000f1a:	4311      	orrs	r1, r2
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	430b      	orrs	r3, r1
 8000f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	000186a0 	.word	0x000186a0
 8000f7c:	001e847f 	.word	0x001e847f
 8000f80:	003d08ff 	.word	0x003d08ff
 8000f84:	431bde83 	.word	0x431bde83
 8000f88:	10624dd3 	.word	0x10624dd3

08000f8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	461a      	mov	r2, r3
 8000f98:	460b      	mov	r3, r1
 8000f9a:	817b      	strh	r3, [r7, #10]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff fc02 	bl	80007a8 <HAL_GetTick>
 8000fa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b20      	cmp	r3, #32
 8000fb0:	f040 80e0 	bne.w	8001174 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2319      	movs	r3, #25
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4970      	ldr	r1, [pc, #448]	; (8001180 <HAL_I2C_Master_Transmit+0x1f4>)
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f964 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e0d3      	b.n	8001176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_I2C_Master_Transmit+0x50>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e0cc      	b.n	8001176 <HAL_I2C_Master_Transmit+0x1ea>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d007      	beq.n	8001002 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001010:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2221      	movs	r2, #33	; 0x21
 8001016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2210      	movs	r2, #16
 800101e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	893a      	ldrh	r2, [r7, #8]
 8001032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001038:	b29a      	uxth	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_I2C_Master_Transmit+0x1f8>)
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001044:	8979      	ldrh	r1, [r7, #10]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	6a3a      	ldr	r2, [r7, #32]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f89c 	bl	8001188 <I2C_MasterRequestWrite>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e08d      	b.n	8001176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001070:	e066      	b.n	8001140 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	6a39      	ldr	r1, [r7, #32]
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f000 f9de 	bl	8001438 <I2C_WaitOnTXEFlagUntilTimeout>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00d      	beq.n	800109e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	2b04      	cmp	r3, #4
 8001088:	d107      	bne.n	800109a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e06b      	b.n	8001176 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d11b      	bne.n	8001114 <HAL_I2C_Master_Transmit+0x188>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d017      	beq.n	8001114 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fe:	b29b      	uxth	r3, r3
 8001100:	3b01      	subs	r3, #1
 8001102:	b29a      	uxth	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110c:	3b01      	subs	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	6a39      	ldr	r1, [r7, #32]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 f9ce 	bl	80014ba <I2C_WaitOnBTFFlagUntilTimeout>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00d      	beq.n	8001140 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2b04      	cmp	r3, #4
 800112a:	d107      	bne.n	800113c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800113a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e01a      	b.n	8001176 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	d194      	bne.n	8001072 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2220      	movs	r2, #32
 800115c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	e000      	b.n	8001176 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001174:	2302      	movs	r3, #2
  }
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	00100002 	.word	0x00100002
 8001184:	ffff0000 	.word	0xffff0000

08001188 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af02      	add	r7, sp, #8
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	460b      	mov	r3, r1
 8001196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d006      	beq.n	80011b2 <I2C_MasterRequestWrite+0x2a>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d003      	beq.n	80011b2 <I2C_MasterRequestWrite+0x2a>
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80011b0:	d108      	bne.n	80011c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e00b      	b.n	80011dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	2b12      	cmp	r3, #18
 80011ca:	d107      	bne.n	80011dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 f84f 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00d      	beq.n	8001210 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001202:	d103      	bne.n	800120c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e035      	b.n	800127c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001218:	d108      	bne.n	800122c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800121a:	897b      	ldrh	r3, [r7, #10]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	e01b      	b.n	8001264 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800122c:	897b      	ldrh	r3, [r7, #10]
 800122e:	11db      	asrs	r3, r3, #7
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 0306 	and.w	r3, r3, #6
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f063 030f 	orn	r3, r3, #15
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	490e      	ldr	r1, [pc, #56]	; (8001284 <I2C_MasterRequestWrite+0xfc>)
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 f875 	bl	800133a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e010      	b.n	800127c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800125a:	897b      	ldrh	r3, [r7, #10]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <I2C_MasterRequestWrite+0x100>)
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f865 	bl	800133a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	00010008 	.word	0x00010008
 8001288:	00010002 	.word	0x00010002

0800128c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800129c:	e025      	b.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d021      	beq.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a6:	f7ff fa7f 	bl	80007a8 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d302      	bcc.n	80012bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d116      	bne.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2220      	movs	r2, #32
 80012c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f043 0220 	orr.w	r2, r3, #32
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e023      	b.n	8001332 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10d      	bne.n	8001310 <I2C_WaitOnFlagUntilTimeout+0x84>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4013      	ands	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	e00c      	b.n	800132a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4013      	ands	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	429a      	cmp	r2, r3
 800132e:	d0b6      	beq.n	800129e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001348:	e051      	b.n	80013ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d123      	bne.n	80013a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001368:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001372:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f043 0204 	orr.w	r2, r3, #4
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e046      	b.n	8001430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d021      	beq.n	80013ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013aa:	f7ff f9fd 	bl	80007a8 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d302      	bcc.n	80013c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d116      	bne.n	80013ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2220      	movs	r2, #32
 80013ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f043 0220 	orr.w	r2, r3, #32
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e020      	b.n	8001430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4013      	ands	r3, r2
 8001404:	b29b      	uxth	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	bf14      	ite	ne
 800140a:	2301      	movne	r3, #1
 800140c:	2300      	moveq	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	e00b      	b.n	800142a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	43da      	mvns	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4013      	ands	r3, r2
 800141e:	b29b      	uxth	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d18d      	bne.n	800134a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001444:	e02d      	b.n	80014a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f878 	bl	800153c <I2C_IsAcknowledgeFailed>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e02d      	b.n	80014b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d021      	beq.n	80014a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800145e:	f7ff f9a3 	bl	80007a8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	429a      	cmp	r2, r3
 800146c:	d302      	bcc.n	8001474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d116      	bne.n	80014a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2220      	movs	r2, #32
 800147e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f043 0220 	orr.w	r2, r3, #32
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e007      	b.n	80014b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ac:	2b80      	cmp	r3, #128	; 0x80
 80014ae:	d1ca      	bne.n	8001446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014c6:	e02d      	b.n	8001524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f837 	bl	800153c <I2C_IsAcknowledgeFailed>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e02d      	b.n	8001534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014de:	d021      	beq.n	8001524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e0:	f7ff f962 	bl	80007a8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d302      	bcc.n	80014f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f043 0220 	orr.w	r2, r3, #32
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e007      	b.n	8001534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b04      	cmp	r3, #4
 8001530:	d1ca      	bne.n	80014c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d11b      	bne.n	800158c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800155c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2220      	movs	r2, #32
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e272      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d00c      	beq.n	80015de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c4:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x12c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d168      	bne.n	80016c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e24c      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x76>
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a7f      	ldr	r2, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e02e      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a77      	ldr	r2, [pc, #476]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0xbc>
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a71      	ldr	r2, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a6a      	ldr	r2, [pc, #424]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff f898 	bl	80007a8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff f894 	bl	80007a8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e200      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xe4>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f884 	bl	80007a8 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff f880 	bl	80007a8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1ec      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x10c>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e1c0      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4939      	ldr	r1, [pc, #228]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f839 	bl	80007a8 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff f835 	bl	80007a8 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1a1      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4927      	ldr	r1, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f818 	bl	80007a8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff f814 	bl	80007a8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e180      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03a      	beq.n	800181c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d019      	beq.n	80017e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7fe fff8 	bl	80007a8 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7fe fff4 	bl	80007a8 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e160      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 fac4 	bl	8001d68 <RCC_Delay>
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7fe ffde 	bl	80007a8 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7fe ffda 	bl	80007a8 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d908      	bls.n	8001810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e146      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	42420000 	.word	0x42420000
 800180c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e9      	bne.n	80017f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a6 	beq.w	8001976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10d      	bne.n	8001856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a87      	ldr	r2, [pc, #540]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b85      	ldr	r3, [pc, #532]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b82      	ldr	r3, [pc, #520]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7e      	ldr	r2, [pc, #504]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7fe ff9b 	bl	80007a8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7fe ff97 	bl	80007a8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e103      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x4c8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 800189c:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e02d      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x334>
 80018b2:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	e01c      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x356>
 80018d4:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a60      	ldr	r2, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a5d      	ldr	r2, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018ee:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a57      	ldr	r2, [pc, #348]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d015      	beq.n	800193a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7fe ff4b 	bl	80007a8 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7fe ff47 	bl	80007a8 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0b1      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <HAL_RCC_OscConfig+0x37e>
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7fe ff35 	bl	80007a8 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7fe ff31 	bl	80007a8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e09b      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d105      	bne.n	8001976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8087 	beq.w	8001a8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d061      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d146      	bne.n	8001a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7fe ff05 	bl	80007a8 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7fe ff01 	bl	80007a8 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e06d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4921      	ldr	r1, [pc, #132]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019dc:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a19      	ldr	r1, [r3, #32]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	430b      	orrs	r3, r1
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7fe fed5 	bl	80007a8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7fe fed1 	bl	80007a8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46a>
 8001a20:	e035      	b.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7fe febe 	bl	80007a8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7fe feba 	bl	80007a8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e026      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x498>
 8001a4e:	e01e      	b.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e019      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_OscConfig+0x500>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d0      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	4965      	ldr	r1, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d040      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e073      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06b      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4936      	ldr	r1, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe fe0c 	bl	80007a8 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7fe fe08 	bl	80007a8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e053      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d210      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4922      	ldr	r1, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1cc>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1d0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fd6a 	bl	8000724 <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08002678 	.word	0x08002678
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b490      	push	{r4, r7}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xac>)
 8001c78:	1d3c      	adds	r4, r7, #4
 8001c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c80:	f240 2301 	movw	r3, #513	; 0x201
 8001c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cae:	e02b      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb2:	623b      	str	r3, [r7, #32]
      break;
 8001cb4:	e02b      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	0c9b      	lsrs	r3, r3, #18
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3328      	adds	r3, #40	; 0x28
 8001cc0:	443b      	add	r3, r7
 8001cc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cc6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d012      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0c5b      	lsrs	r3, r3, #17
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	3328      	adds	r3, #40	; 0x28
 8001cde:	443b      	add	r3, r7
 8001ce0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ce4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	e004      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	623b      	str	r3, [r7, #32]
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d0a:	623b      	str	r3, [r7, #32]
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc90      	pop	{r4, r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	08002668 	.word	0x08002668
 8001d20:	40021000 	.word	0x40021000
 8001d24:	007a1200 	.word	0x007a1200
 8001d28:	003d0900 	.word	0x003d0900

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000000 	.word	0x20000000

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d44:	f7ff fff2 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4903      	ldr	r1, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08002688 	.word	0x08002688

08001d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <RCC_Delay+0x34>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <RCC_Delay+0x38>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0a5b      	lsrs	r3, r3, #9
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d84:	bf00      	nop
  }
  while (Delay --);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	60fa      	str	r2, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <RCC_Delay+0x1c>
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e041      	b.n	8001e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fc24 	bl	8000618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3304      	adds	r3, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f000 f962 	bl	80020ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d001      	beq.n	8001e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e032      	b.n	8001ec2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_TIM_Base_Start+0x88>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_TIM_Base_Start+0x48>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e76:	d009      	beq.n	8001e8c <HAL_TIM_Base_Start+0x48>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_TIM_Base_Start+0x8c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_TIM_Base_Start+0x48>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_TIM_Base_Start+0x90>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d010      	beq.n	8001ec0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	e007      	b.n	8001ec0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800

08001ed8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10f      	bne.n	8001f10 <HAL_TIM_Base_Stop+0x38>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	f240 4344 	movw	r3, #1092	; 0x444
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_Base_Stop+0x38>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_TIM_ConfigClockSource+0x18>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e0b3      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x180>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f74:	d03e      	beq.n	8001ff4 <HAL_TIM_ConfigClockSource+0xd0>
 8001f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f7a:	f200 8087 	bhi.w	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f82:	f000 8085 	beq.w	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8a:	d87f      	bhi.n	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001f8c:	2b70      	cmp	r3, #112	; 0x70
 8001f8e:	d01a      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0xa2>
 8001f90:	2b70      	cmp	r3, #112	; 0x70
 8001f92:	d87b      	bhi.n	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001f94:	2b60      	cmp	r3, #96	; 0x60
 8001f96:	d050      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x116>
 8001f98:	2b60      	cmp	r3, #96	; 0x60
 8001f9a:	d877      	bhi.n	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001f9c:	2b50      	cmp	r3, #80	; 0x50
 8001f9e:	d03c      	beq.n	800201a <HAL_TIM_ConfigClockSource+0xf6>
 8001fa0:	2b50      	cmp	r3, #80	; 0x50
 8001fa2:	d873      	bhi.n	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001fa4:	2b40      	cmp	r3, #64	; 0x40
 8001fa6:	d058      	beq.n	800205a <HAL_TIM_ConfigClockSource+0x136>
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d86f      	bhi.n	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001fac:	2b30      	cmp	r3, #48	; 0x30
 8001fae:	d064      	beq.n	800207a <HAL_TIM_ConfigClockSource+0x156>
 8001fb0:	2b30      	cmp	r3, #48	; 0x30
 8001fb2:	d86b      	bhi.n	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d060      	beq.n	800207a <HAL_TIM_ConfigClockSource+0x156>
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d867      	bhi.n	800208c <HAL_TIM_ConfigClockSource+0x168>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05c      	beq.n	800207a <HAL_TIM_ConfigClockSource+0x156>
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d05a      	beq.n	800207a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001fc4:	e062      	b.n	800208c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f000 f942 	bl	800225e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fe8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	609a      	str	r2, [r3, #8]
      break;
 8001ff2:	e04e      	b.n	8002092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f000 f92b 	bl	800225e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002016:	609a      	str	r2, [r3, #8]
      break;
 8002018:	e03b      	b.n	8002092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	f000 f8a2 	bl	8002170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2150      	movs	r1, #80	; 0x50
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8f9 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8002038:	e02b      	b.n	8002092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6859      	ldr	r1, [r3, #4]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	461a      	mov	r2, r3
 8002048:	f000 f8c0 	bl	80021cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2160      	movs	r1, #96	; 0x60
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f8e9 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8002058:	e01b      	b.n	8002092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	461a      	mov	r2, r3
 8002068:	f000 f882 	bl	8002170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f8d9 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8002078:	e00b      	b.n	8002092 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f000 f8d0 	bl	800222a <TIM_ITRx_SetConfig>
        break;
 800208a:	e002      	b.n	8002092 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002090:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a29      	ldr	r2, [pc, #164]	; (8002164 <TIM_Base_SetConfig+0xb8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00b      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ca:	d007      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a26      	ldr	r2, [pc, #152]	; (8002168 <TIM_Base_SetConfig+0xbc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a25      	ldr	r2, [pc, #148]	; (800216c <TIM_Base_SetConfig+0xc0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d108      	bne.n	80020ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <TIM_Base_SetConfig+0xb8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00b      	beq.n	800210e <TIM_Base_SetConfig+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d007      	beq.n	800210e <TIM_Base_SetConfig+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <TIM_Base_SetConfig+0xbc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <TIM_Base_SetConfig+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <TIM_Base_SetConfig+0xc0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <TIM_Base_SetConfig+0xb8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d103      	bne.n	8002154 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	615a      	str	r2, [r3, #20]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800

08002170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f023 0201 	bic.w	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 030a 	bic.w	r3, r3, #10
 80021ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	621a      	str	r2, [r3, #32]
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f023 0210 	bic.w	r2, r3, #16
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	031b      	lsls	r3, r3, #12
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002208:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	f043 0307 	orr.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4313      	orrs	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e046      	b.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d009      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10c      	bne.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800231c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4313      	orrs	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800

08002358 <delay_us>:
 */

#include "lcd_i2c.h"

void delay_us(uint32_t us)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	htim2.Instance->CNT = 0;
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <delay_us+0x34>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <delay_us+0x34>)
 800236a:	f7ff fd6b 	bl	8001e44 <HAL_TIM_Base_Start>
	while(htim2.Instance->CNT < us);
 800236e:	bf00      	nop
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <delay_us+0x34>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f9      	bhi.n	8002370 <delay_us+0x18>
	HAL_TIM_Base_Stop(&htim2);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <delay_us+0x34>)
 800237e:	f7ff fdab 	bl	8001ed8 <HAL_TIM_Base_Stop>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200000d0 	.word	0x200000d0

08002390 <lcd_i2c_init>:

void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	460b      	mov	r3, r1
 80023a0:	71fb      	strb	r3, [r7, #7]
 80023a2:	4613      	mov	r3, r2
 80023a4:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	7e3a      	ldrb	r2, [r7, #24]
 80023aa:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2208      	movs	r2, #8
 80023b0:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	79fa      	ldrb	r2, [r7, #7]
 80023b6:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	79ba      	ldrb	r2, [r7, #6]
 80023bc:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2204      	movs	r2, #4
 80023c8:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	delay_us(40000); 	//waiting for > 40ms
 80023ca:	f649 4040 	movw	r0, #40000	; 0x9c40
 80023ce:	f7ff ffc3 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023d2:	2130      	movs	r1, #48	; 0x30
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f851 	bl	800247c <lcd_send_cmd>
	delay_us(5000);  // waiting for >4.1ms
 80023da:	f241 3088 	movw	r0, #5000	; 0x1388
 80023de:	f7ff ffbb 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023e2:	2130      	movs	r1, #48	; 0x30
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f849 	bl	800247c <lcd_send_cmd>
	delay_us(1000);  // waiting for >100us
 80023ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ee:	f7ff ffb3 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023f2:	2130      	movs	r1, #48	; 0x30
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f841 	bl	800247c <lcd_send_cmd>
	delay_us(10000);
 80023fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80023fe:	f7ff ffab 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 8002402:	2120      	movs	r1, #32
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f839 	bl	800247c <lcd_send_cmd>
	delay_us(10000);
 800240a:	f242 7010 	movw	r0, #10000	; 0x2710
 800240e:	f7ff ffa3 	bl	8002358 <delay_us>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002412:	2128      	movs	r1, #40	; 0x28
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f831 	bl	800247c <lcd_send_cmd>
	delay_us(1000);
 800241a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800241e:	f7ff ff9b 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 8002422:	2108      	movs	r1, #8
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f829 	bl	800247c <lcd_send_cmd>
	delay_us(1000);
 800242a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800242e:	f7ff ff93 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 8002432:	2101      	movs	r1, #1
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f821 	bl	800247c <lcd_send_cmd>
	delay_us(1000);
 800243a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800243e:	f7ff ff8b 	bl	8002358 <delay_us>
	delay_us(1000);
 8002442:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002446:	f7ff ff87 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800244a:	2106      	movs	r1, #6
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f815 	bl	800247c <lcd_send_cmd>
	delay_us(1000);
 8002452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002456:	f7ff ff7f 	bl	8002358 <delay_us>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	791b      	ldrb	r3, [r3, #4]
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f808 	bl	800247c <lcd_send_cmd>
	delay_us(1000);
 800246c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002470:	f7ff ff72 	bl	8002358 <delay_us>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f023 030f 	bic.w	r3, r3, #15
 800248e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	f043 030c 	orr.w	r3, r3, #12
 800249c:	b2db      	uxtb	r3, r3
 800249e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	f043 030c 	orr.w	r3, r3, #12
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6898      	ldr	r0, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	789b      	ldrb	r3, [r3, #2]
 80024c6:	b299      	uxth	r1, r3
 80024c8:	f107 0208 	add.w	r2, r7, #8
 80024cc:	2364      	movs	r3, #100	; 0x64
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2304      	movs	r3, #4
 80024d2:	f7fe fd5b 	bl	8000f8c <HAL_I2C_Master_Transmit>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af02      	add	r7, sp, #8
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f023 030f 	bic.w	r3, r3, #15
 80024f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	f043 030d 	orr.w	r3, r3, #13
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	f043 0309 	orr.w	r3, r3, #9
 8002508:	b2db      	uxtb	r3, r3
 800250a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	f043 030d 	orr.w	r3, r3, #13
 8002512:	b2db      	uxtb	r3, r3
 8002514:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	f043 0309 	orr.w	r3, r3, #9
 800251c:	b2db      	uxtb	r3, r3
 800251e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6898      	ldr	r0, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	b299      	uxth	r1, r3
 800252a:	f107 0208 	add.w	r2, r7, #8
 800252e:	2364      	movs	r3, #100	; 0x64
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2304      	movs	r3, #4
 8002534:	f7fe fd2a 	bl	8000f8c <HAL_I2C_Master_Transmit>
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
 800254c:	4613      	mov	r3, r2
 800254e:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <lcd_set_cursor+0x50>)
 8002552:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	78ba      	ldrb	r2, [r7, #2]
 800255a:	429a      	cmp	r2, r3
 800255c:	d903      	bls.n	8002566 <lcd_set_cursor+0x26>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	3b01      	subs	r3, #1
 8002564:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 8002566:	78bb      	ldrb	r3, [r7, #2]
 8002568:	3310      	adds	r3, #16
 800256a:	443b      	add	r3, r7
 800256c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	4413      	add	r3, r2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	b25b      	sxtb	r3, r3
 8002578:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800257c:	b25b      	sxtb	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff7a 	bl	800247c <lcd_send_cmd>
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	54144000 	.word	0x54144000

08002594 <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 800259e:	e007      	b.n	80025b0 <lcd_send_string+0x1c>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	603a      	str	r2, [r7, #0]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff97 	bl	80024de <lcd_send_data>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f3      	bne.n	80025a0 <lcd_send_string+0xc>
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <lcd_clear>:

void lcd_clear (LCD_I2C_HandleTypeDef *p_LCD)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 80025ca:	2101      	movs	r1, #1
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff55 	bl	800247c <lcd_send_cmd>
	delay_us(5000);
 80025d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80025d6:	f7ff febf 	bl	8002358 <delay_us>
	lcd_set_cursor(p_LCD, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ffae 	bl	8002540 <lcd_set_cursor>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <__libc_init_array>:
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	2600      	movs	r6, #0
 80025f0:	4d0c      	ldr	r5, [pc, #48]	; (8002624 <__libc_init_array+0x38>)
 80025f2:	4c0d      	ldr	r4, [pc, #52]	; (8002628 <__libc_init_array+0x3c>)
 80025f4:	1b64      	subs	r4, r4, r5
 80025f6:	10a4      	asrs	r4, r4, #2
 80025f8:	42a6      	cmp	r6, r4
 80025fa:	d109      	bne.n	8002610 <__libc_init_array+0x24>
 80025fc:	f000 f822 	bl	8002644 <_init>
 8002600:	2600      	movs	r6, #0
 8002602:	4d0a      	ldr	r5, [pc, #40]	; (800262c <__libc_init_array+0x40>)
 8002604:	4c0a      	ldr	r4, [pc, #40]	; (8002630 <__libc_init_array+0x44>)
 8002606:	1b64      	subs	r4, r4, r5
 8002608:	10a4      	asrs	r4, r4, #2
 800260a:	42a6      	cmp	r6, r4
 800260c:	d105      	bne.n	800261a <__libc_init_array+0x2e>
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	f855 3b04 	ldr.w	r3, [r5], #4
 8002614:	4798      	blx	r3
 8002616:	3601      	adds	r6, #1
 8002618:	e7ee      	b.n	80025f8 <__libc_init_array+0xc>
 800261a:	f855 3b04 	ldr.w	r3, [r5], #4
 800261e:	4798      	blx	r3
 8002620:	3601      	adds	r6, #1
 8002622:	e7f2      	b.n	800260a <__libc_init_array+0x1e>
 8002624:	08002690 	.word	0x08002690
 8002628:	08002690 	.word	0x08002690
 800262c:	08002690 	.word	0x08002690
 8002630:	08002694 	.word	0x08002694

08002634 <memset>:
 8002634:	4603      	mov	r3, r0
 8002636:	4402      	add	r2, r0
 8002638:	4293      	cmp	r3, r2
 800263a:	d100      	bne.n	800263e <memset+0xa>
 800263c:	4770      	bx	lr
 800263e:	f803 1b01 	strb.w	r1, [r3], #1
 8002642:	e7f9      	b.n	8002638 <memset+0x4>

08002644 <_init>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr

08002650 <_fini>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	bf00      	nop
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr
