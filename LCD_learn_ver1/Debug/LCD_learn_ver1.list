
LCD_learn_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800261c  0800261c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ac  080026ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026ac  080026ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026ac  080026ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b0  080026b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080026c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080026c0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b336  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001869  00000000  00000000  0002b36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a6a  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da85  00000000  00000000  00045e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a43e  00000000  00000000  00053887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddcc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003384  00000000  00000000  000ddd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002604 	.word	0x08002604

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002604 	.word	0x08002604

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fab1 	bl	80006b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f855 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f941 	bl	80003e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f897 	bl	8000290 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000162:	f000 f8c3 	bl	80002ec <MX_I2C2_Init>
  MX_TIM2_Init();
 8000166:	f000 f8ef 	bl	8000348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_i2c_init(&p_lcd, &hi2c1,16,2,0x27<<1);
 800016a:	234e      	movs	r3, #78	; 0x4e
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	2302      	movs	r3, #2
 8000170:	2210      	movs	r2, #16
 8000172:	491d      	ldr	r1, [pc, #116]	; (80001e8 <main+0x9c>)
 8000174:	481d      	ldr	r0, [pc, #116]	; (80001ec <main+0xa0>)
 8000176:	f002 f8eb 	bl	8002350 <lcd_i2c_init>
//  lcd_set_cursor(&p_lcd, 0, 0);
//  lcd_send_string(&p_lcd, "phamtuan");

  char str1[] = "xin chao pham tuan";
 800017a:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <main+0xa4>)
 800017c:	1d3c      	adds	r4, r7, #4
 800017e:	461d      	mov	r5, r3
 8000180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000184:	682b      	ldr	r3, [r5, #0]
 8000186:	461a      	mov	r2, r3
 8000188:	8022      	strh	r2, [r4, #0]
 800018a:	3402      	adds	r4, #2
 800018c:	0c1b      	lsrs	r3, r3, #16
 800018e:	7023      	strb	r3, [r4, #0]
//		  lcd_send_string(&p_lcd, "phamtuan");
//		  lcd_set_cursor(&p_lcd, 0, 0);
//		  lcd_send_string(&p_lcd, &str1[16 - i]);
//		  HAL_Delay(500);
//	  }
	  lcd_clear(&p_lcd);
 8000190:	4816      	ldr	r0, [pc, #88]	; (80001ec <main+0xa0>)
 8000192:	f002 f9f6 	bl	8002582 <lcd_clear>
	  lcd_set_cursor(&p_lcd, 0, 0);
 8000196:	2200      	movs	r2, #0
 8000198:	2100      	movs	r1, #0
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <main+0xa0>)
 800019c:	f002 f9b0 	bl	8002500 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, "WELCOME TO P.1008");
 80001a0:	4914      	ldr	r1, [pc, #80]	; (80001f4 <main+0xa8>)
 80001a2:	4812      	ldr	r0, [pc, #72]	; (80001ec <main+0xa0>)
 80001a4:	f002 f9d6 	bl	8002554 <lcd_send_string>
	  lcd_set_cursor(&p_lcd, 0, 1);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2100      	movs	r1, #0
 80001ac:	480f      	ldr	r0, [pc, #60]	; (80001ec <main+0xa0>)
 80001ae:	f002 f9a7 	bl	8002500 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, "The boss of this room:");
 80001b2:	4911      	ldr	r1, [pc, #68]	; (80001f8 <main+0xac>)
 80001b4:	480d      	ldr	r0, [pc, #52]	; (80001ec <main+0xa0>)
 80001b6:	f002 f9cd 	bl	8002554 <lcd_send_string>
	  lcd_set_cursor(&p_lcd, 0, 2);
 80001ba:	2202      	movs	r2, #2
 80001bc:	2100      	movs	r1, #0
 80001be:	480b      	ldr	r0, [pc, #44]	; (80001ec <main+0xa0>)
 80001c0:	f002 f99e 	bl	8002500 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, "Pham Ho Anh Tuan");
 80001c4:	490d      	ldr	r1, [pc, #52]	; (80001fc <main+0xb0>)
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <main+0xa0>)
 80001c8:	f002 f9c4 	bl	8002554 <lcd_send_string>
	  lcd_set_cursor(&p_lcd, 0, 3);
 80001cc:	2203      	movs	r2, #3
 80001ce:	2100      	movs	r1, #0
 80001d0:	4806      	ldr	r0, [pc, #24]	; (80001ec <main+0xa0>)
 80001d2:	f002 f995 	bl	8002500 <lcd_set_cursor>
	  lcd_send_string(&p_lcd, "HAVE A NICE DAY!");
 80001d6:	490a      	ldr	r1, [pc, #40]	; (8000200 <main+0xb4>)
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <main+0xa0>)
 80001da:	f002 f9bb 	bl	8002554 <lcd_send_string>
	  HAL_Delay(500);
 80001de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e2:	f000 facb 	bl	800077c <HAL_Delay>
	  lcd_clear(&p_lcd);
 80001e6:	e7d3      	b.n	8000190 <main+0x44>
 80001e8:	20000028 	.word	0x20000028
 80001ec:	20000118 	.word	0x20000118
 80001f0:	08002670 	.word	0x08002670
 80001f4:	0800261c 	.word	0x0800261c
 80001f8:	08002630 	.word	0x08002630
 80001fc:	08002648 	.word	0x08002648
 8000200:	0800265c 	.word	0x0800265c

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 f9ee 	bl	80025f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000226:	2301      	movs	r3, #1
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000242:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f001 f983 	bl	8001558 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000258:	f000 f91a 	bl	8000490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fbf0 	bl	8001a5c <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000282:	f000 f905 	bl	8000490 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x50>)
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <MX_I2C1_Init+0x54>)
 8000298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_I2C1_Init+0x50>)
 800029c:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_I2C1_Init+0x58>)
 800029e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002ce:	f000 fcf9 	bl	8000cc4 <HAL_I2C_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f8da 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	40005400 	.word	0x40005400
 80002e8:	000186a0 	.word	0x000186a0

080002ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_I2C2_Init+0x50>)
 80002f2:	4a13      	ldr	r2, [pc, #76]	; (8000340 <MX_I2C2_Init+0x54>)
 80002f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_I2C2_Init+0x50>)
 80002f8:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_I2C2_Init+0x58>)
 80002fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_I2C2_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_I2C2_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_I2C2_Init+0x50>)
 800030a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800030e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_I2C2_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_I2C2_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <MX_I2C2_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_I2C2_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_I2C2_Init+0x50>)
 800032a:	f000 fccb 	bl	8000cc4 <HAL_I2C_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000334:	f000 f8ac 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	2000007c 	.word	0x2000007c
 8000340:	40005800 	.word	0x40005800
 8000344:	000186a0 	.word	0x000186a0

08000348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035c:	463b      	mov	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000364:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <MX_TIM2_Init+0x94>)
 8000366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_TIM2_Init+0x94>)
 800036e:	2247      	movs	r2, #71	; 0x47
 8000370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_TIM2_Init+0x94>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_TIM2_Init+0x94>)
 800037a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800037e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_TIM2_Init+0x94>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_TIM2_Init+0x94>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800038c:	4813      	ldr	r0, [pc, #76]	; (80003dc <MX_TIM2_Init+0x94>)
 800038e:	f001 fce9 	bl	8001d64 <HAL_TIM_Base_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000398:	f000 f87a 	bl	8000490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4619      	mov	r1, r3
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_TIM2_Init+0x94>)
 80003aa:	f001 fd9b 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003b4:	f000 f86c 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b8:	2300      	movs	r3, #0
 80003ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4619      	mov	r1, r3
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_TIM2_Init+0x94>)
 80003c6:	f001 ff49 	bl	800225c <HAL_TIMEx_MasterConfigSynchronization>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003d0:	f000 f85e 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000d0 	.word	0x200000d0

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_GPIO_Init+0xa8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a23      	ldr	r2, [pc, #140]	; (8000488 <MX_GPIO_Init+0xa8>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_GPIO_Init+0xa8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_GPIO_Init+0xa8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1d      	ldr	r2, [pc, #116]	; (8000488 <MX_GPIO_Init+0xa8>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_GPIO_Init+0xa8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_GPIO_Init+0xa8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <MX_GPIO_Init+0xa8>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_GPIO_Init+0xa8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a11      	ldr	r2, [pc, #68]	; (8000488 <MX_GPIO_Init+0xa8>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_GPIO_Init+0xa8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045a:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_GPIO_Init+0xac>)
 800045c:	f000 fc1a 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_GPIO_Init+0xac>)
 800047a:	f000 fa87 	bl	800098c <HAL_GPIO_Init>

}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	e7fe      	b.n	8000498 <Error_Handler+0x8>
	...

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <HAL_MspInit+0x5c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a14      	ldr	r2, [pc, #80]	; (80004f8 <HAL_MspInit+0x5c>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_MspInit+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x5c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x5c>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x5c>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <HAL_MspInit+0x60>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <HAL_MspInit+0x60>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0318 	add.w	r3, r7, #24
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a2b      	ldr	r2, [pc, #172]	; (80005c8 <HAL_I2C_MspInit+0xc8>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d124      	bne.n	800056a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000538:	23c0      	movs	r3, #192	; 0xc0
 800053a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800053c:	2312      	movs	r3, #18
 800053e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000540:	2303      	movs	r3, #3
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000544:	f107 0318 	add.w	r3, r7, #24
 8000548:	4619      	mov	r1, r3
 800054a:	4821      	ldr	r0, [pc, #132]	; (80005d0 <HAL_I2C_MspInit+0xd0>)
 800054c:	f000 fa1e 	bl	800098c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 8000556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800055a:	61d3      	str	r3, [r2, #28]
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 800055e:	69db      	ldr	r3, [r3, #28]
 8000560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000568:	e029      	b.n	80005be <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <HAL_I2C_MspInit+0xd4>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d124      	bne.n	80005be <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0308 	and.w	r3, r3, #8
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800058c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000592:	2312      	movs	r3, #18
 8000594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <HAL_I2C_MspInit+0xd0>)
 80005a2:	f000 f9f3 	bl	800098c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_I2C_MspInit+0xcc>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40005400 	.word	0x40005400
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010c00 	.word	0x40010c00
 80005d4:	40005800 	.word	0x40005800

080005d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005e8:	d10b      	bne.n	8000602 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_TIM_Base_MspInit+0x34>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_TIM_Base_MspInit+0x34>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_TIM_Base_MspInit+0x34>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000656:	f000 f875 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}

0800065e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
	...

0800066c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000692:	f7ff ffe4 	bl	800065e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000696:	f001 ff89 	bl	80025ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fd57 	bl	800014c <main>
  bx lr
 800069e:	4770      	bx	lr
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a8:	080026b4 	.word	0x080026b4
  ldr r2, =_sbss
 80006ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b0:	20000128 	.word	0x20000128

080006b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_2_IRQHandler>
	...

080006b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_Init+0x28>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <HAL_Init+0x28>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f92b 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 f808 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d4:	f7ff fee2 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_InitTick+0x54>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_InitTick+0x58>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f935 	bl	8000972 <HAL_SYSTICK_Config>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e00e      	b.n	8000730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d80a      	bhi.n	800072e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000718:	2200      	movs	r2, #0
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	f04f 30ff 	mov.w	r0, #4294967295
 8000720:	f000 f90b 	bl	800093a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <HAL_InitTick+0x5c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	e000      	b.n	8000730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000
 800073c:	20000008 	.word	0x20000008
 8000740:	20000004 	.word	0x20000004

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x1c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x20>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x20>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000008 	.word	0x20000008
 8000764:	20000124 	.word	0x20000124

08000768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <HAL_GetTick+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000124 	.word	0x20000124

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000784:	f7ff fff0 	bl	8000768 <HAL_GetTick>
 8000788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000794:	d005      	beq.n	80007a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_Delay+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a2:	bf00      	nop
 80007a4:	f7ff ffe0 	bl	8000768 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8f7      	bhi.n	80007a4 <HAL_Delay+0x28>
  {
  }
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
         );
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f7ff ff90 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff49 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff5e 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff90 	bl	800087c <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5f 	bl	8000828 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffb0 	bl	80008e0 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800098c:	b480      	push	{r7}
 800098e:	b08b      	sub	sp, #44	; 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e169      	b.n	8000c74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a0:	2201      	movs	r2, #1
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	f040 8158 	bne.w	8000c6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a9a      	ldr	r2, [pc, #616]	; (8000c2c <HAL_GPIO_Init+0x2a0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d05e      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009c8:	4a98      	ldr	r2, [pc, #608]	; (8000c2c <HAL_GPIO_Init+0x2a0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d875      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009ce:	4a98      	ldr	r2, [pc, #608]	; (8000c30 <HAL_GPIO_Init+0x2a4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d058      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009d4:	4a96      	ldr	r2, [pc, #600]	; (8000c30 <HAL_GPIO_Init+0x2a4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d86f      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009da:	4a96      	ldr	r2, [pc, #600]	; (8000c34 <HAL_GPIO_Init+0x2a8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d052      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009e0:	4a94      	ldr	r2, [pc, #592]	; (8000c34 <HAL_GPIO_Init+0x2a8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d869      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009e6:	4a94      	ldr	r2, [pc, #592]	; (8000c38 <HAL_GPIO_Init+0x2ac>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d04c      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009ec:	4a92      	ldr	r2, [pc, #584]	; (8000c38 <HAL_GPIO_Init+0x2ac>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d863      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009f2:	4a92      	ldr	r2, [pc, #584]	; (8000c3c <HAL_GPIO_Init+0x2b0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d046      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009f8:	4a90      	ldr	r2, [pc, #576]	; (8000c3c <HAL_GPIO_Init+0x2b0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d85d      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d82a      	bhi.n	8000a58 <HAL_GPIO_Init+0xcc>
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d859      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <HAL_GPIO_Init+0x80>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a61 	.word	0x08000a61
 8000a14:	08000a73 	.word	0x08000a73
 8000a18:	08000ab5 	.word	0x08000ab5
 8000a1c:	08000abb 	.word	0x08000abb
 8000a20:	08000abb 	.word	0x08000abb
 8000a24:	08000abb 	.word	0x08000abb
 8000a28:	08000abb 	.word	0x08000abb
 8000a2c:	08000abb 	.word	0x08000abb
 8000a30:	08000abb 	.word	0x08000abb
 8000a34:	08000abb 	.word	0x08000abb
 8000a38:	08000abb 	.word	0x08000abb
 8000a3c:	08000abb 	.word	0x08000abb
 8000a40:	08000abb 	.word	0x08000abb
 8000a44:	08000abb 	.word	0x08000abb
 8000a48:	08000abb 	.word	0x08000abb
 8000a4c:	08000abb 	.word	0x08000abb
 8000a50:	08000a69 	.word	0x08000a69
 8000a54:	08000a7d 	.word	0x08000a7d
 8000a58:	4a79      	ldr	r2, [pc, #484]	; (8000c40 <HAL_GPIO_Init+0x2b4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d013      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a5e:	e02c      	b.n	8000aba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e029      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	623b      	str	r3, [r7, #32]
          break;
 8000a70:	e024      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	3308      	adds	r3, #8
 8000a78:	623b      	str	r3, [r7, #32]
          break;
 8000a7a:	e01f      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	330c      	adds	r3, #12
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e01a      	b.n	8000abc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	623b      	str	r3, [r7, #32]
          break;
 8000a92:	e013      	b.n	8000abc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d105      	bne.n	8000aa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	611a      	str	r2, [r3, #16]
          break;
 8000aa6:	e009      	b.n	8000abc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	615a      	str	r2, [r3, #20]
          break;
 8000ab2:	e003      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
          break;
 8000ab8:	e000      	b.n	8000abc <HAL_GPIO_Init+0x130>
          break;
 8000aba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	2bff      	cmp	r3, #255	; 0xff
 8000ac0:	d801      	bhi.n	8000ac6 <HAL_GPIO_Init+0x13a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	e001      	b.n	8000aca <HAL_GPIO_Init+0x13e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d802      	bhi.n	8000ad8 <HAL_GPIO_Init+0x14c>
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	e002      	b.n	8000ade <HAL_GPIO_Init+0x152>
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	3b08      	subs	r3, #8
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	401a      	ands	r2, r3
 8000af0:	6a39      	ldr	r1, [r7, #32]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 80b1 	beq.w	8000c6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0c:	4b4d      	ldr	r3, [pc, #308]	; (8000c44 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a4c      	ldr	r2, [pc, #304]	; (8000c44 <HAL_GPIO_Init+0x2b8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <HAL_GPIO_Init+0x2b8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b24:	4a48      	ldr	r2, [pc, #288]	; (8000c48 <HAL_GPIO_Init+0x2bc>)
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a40      	ldr	r2, [pc, #256]	; (8000c4c <HAL_GPIO_Init+0x2c0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <HAL_GPIO_Init+0x1ec>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a3f      	ldr	r2, [pc, #252]	; (8000c50 <HAL_GPIO_Init+0x2c4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00d      	beq.n	8000b74 <HAL_GPIO_Init+0x1e8>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3e      	ldr	r2, [pc, #248]	; (8000c54 <HAL_GPIO_Init+0x2c8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x1e4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3d      	ldr	r2, [pc, #244]	; (8000c58 <HAL_GPIO_Init+0x2cc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_GPIO_Init+0x1e0>
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	e004      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b7c:	f002 0203 	and.w	r2, r2, #3
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	4093      	lsls	r3, r2
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b8a:	492f      	ldr	r1, [pc, #188]	; (8000c48 <HAL_GPIO_Init+0x2bc>)
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	492c      	ldr	r1, [pc, #176]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	600b      	str	r3, [r1, #0]
 8000bb0:	e006      	b.n	8000bc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	4928      	ldr	r1, [pc, #160]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	4922      	ldr	r1, [pc, #136]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	604b      	str	r3, [r1, #4]
 8000bd8:	e006      	b.n	8000be8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	491e      	ldr	r1, [pc, #120]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	4918      	ldr	r1, [pc, #96]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4914      	ldr	r1, [pc, #80]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d021      	beq.n	8000c60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	490e      	ldr	r1, [pc, #56]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60cb      	str	r3, [r1, #12]
 8000c28:	e021      	b.n	8000c6e <HAL_GPIO_Init+0x2e2>
 8000c2a:	bf00      	nop
 8000c2c:	10320000 	.word	0x10320000
 8000c30:	10310000 	.word	0x10310000
 8000c34:	10220000 	.word	0x10220000
 8000c38:	10210000 	.word	0x10210000
 8000c3c:	10120000 	.word	0x10120000
 8000c40:	10110000 	.word	0x10110000
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40010c00 	.word	0x40010c00
 8000c54:	40011000 	.word	0x40011000
 8000c58:	40011400 	.word	0x40011400
 8000c5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_GPIO_Init+0x304>)
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4909      	ldr	r1, [pc, #36]	; (8000c90 <HAL_GPIO_Init+0x304>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	3301      	adds	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f47f ae8e 	bne.w	80009a0 <HAL_GPIO_Init+0x14>
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	372c      	adds	r7, #44	; 0x2c
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca4:	787b      	ldrb	r3, [r7, #1]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb0:	e003      	b.n	8000cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	611a      	str	r2, [r3, #16]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e12b      	b.n	8000f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d106      	bne.n	8000cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fc08 	bl	8000500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2224      	movs	r2, #36	; 0x24
 8000cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 0201 	bic.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d28:	f000 ffea 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8000d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4a81      	ldr	r2, [pc, #516]	; (8000f38 <HAL_I2C_Init+0x274>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d807      	bhi.n	8000d48 <HAL_I2C_Init+0x84>
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4a80      	ldr	r2, [pc, #512]	; (8000f3c <HAL_I2C_Init+0x278>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	bf94      	ite	ls
 8000d40:	2301      	movls	r3, #1
 8000d42:	2300      	movhi	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	e006      	b.n	8000d56 <HAL_I2C_Init+0x92>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4a7d      	ldr	r2, [pc, #500]	; (8000f40 <HAL_I2C_Init+0x27c>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	bf94      	ite	ls
 8000d50:	2301      	movls	r3, #1
 8000d52:	2300      	movhi	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0e7      	b.n	8000f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4a78      	ldr	r2, [pc, #480]	; (8000f44 <HAL_I2C_Init+0x280>)
 8000d62:	fba2 2303 	umull	r2, r3, r2, r3
 8000d66:	0c9b      	lsrs	r3, r3, #18
 8000d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <HAL_I2C_Init+0x274>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d802      	bhi.n	8000d98 <HAL_I2C_Init+0xd4>
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	e009      	b.n	8000dac <HAL_I2C_Init+0xe8>
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d9e:	fb02 f303 	mul.w	r3, r2, r3
 8000da2:	4a69      	ldr	r2, [pc, #420]	; (8000f48 <HAL_I2C_Init+0x284>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	099b      	lsrs	r3, r3, #6
 8000daa:	3301      	adds	r3, #1
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	495c      	ldr	r1, [pc, #368]	; (8000f38 <HAL_I2C_Init+0x274>)
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d819      	bhi.n	8000e00 <HAL_I2C_Init+0x13c>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1e59      	subs	r1, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dda:	1c59      	adds	r1, r3, #1
 8000ddc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000de0:	400b      	ands	r3, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00a      	beq.n	8000dfc <HAL_I2C_Init+0x138>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1e59      	subs	r1, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000df4:	3301      	adds	r3, #1
 8000df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfa:	e051      	b.n	8000ea0 <HAL_I2C_Init+0x1dc>
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	e04f      	b.n	8000ea0 <HAL_I2C_Init+0x1dc>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d111      	bne.n	8000e2c <HAL_I2C_Init+0x168>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1e58      	subs	r0, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6859      	ldr	r1, [r3, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	440b      	add	r3, r1
 8000e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf0c      	ite	eq
 8000e24:	2301      	moveq	r3, #1
 8000e26:	2300      	movne	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	e012      	b.n	8000e52 <HAL_I2C_Init+0x18e>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1e58      	subs	r0, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6859      	ldr	r1, [r3, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	0099      	lsls	r1, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e42:	3301      	adds	r3, #1
 8000e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf0c      	ite	eq
 8000e4c:	2301      	moveq	r3, #1
 8000e4e:	2300      	movne	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_I2C_Init+0x196>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e022      	b.n	8000ea0 <HAL_I2C_Init+0x1dc>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10e      	bne.n	8000e80 <HAL_I2C_Init+0x1bc>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	1e58      	subs	r0, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6859      	ldr	r1, [r3, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	440b      	add	r3, r1
 8000e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e7e:	e00f      	b.n	8000ea0 <HAL_I2C_Init+0x1dc>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1e58      	subs	r0, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6859      	ldr	r1, [r3, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	0099      	lsls	r1, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e96:	3301      	adds	r3, #1
 8000e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	6809      	ldr	r1, [r1, #0]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6911      	ldr	r1, [r2, #16]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68d2      	ldr	r2, [r2, #12]
 8000eda:	4311      	orrs	r1, r2
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0201 	orr.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2220      	movs	r2, #32
 8000f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	000186a0 	.word	0x000186a0
 8000f3c:	001e847f 	.word	0x001e847f
 8000f40:	003d08ff 	.word	0x003d08ff
 8000f44:	431bde83 	.word	0x431bde83
 8000f48:	10624dd3 	.word	0x10624dd3

08000f4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	461a      	mov	r2, r3
 8000f58:	460b      	mov	r3, r1
 8000f5a:	817b      	strh	r3, [r7, #10]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fc02 	bl	8000768 <HAL_GetTick>
 8000f64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	f040 80e0 	bne.w	8001134 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2319      	movs	r3, #25
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4970      	ldr	r1, [pc, #448]	; (8001140 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f964 	bl	800124c <I2C_WaitOnFlagUntilTimeout>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e0d3      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <HAL_I2C_Master_Transmit+0x50>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e0cc      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1ea>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d007      	beq.n	8000fc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2221      	movs	r2, #33	; 0x21
 8000fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2210      	movs	r2, #16
 8000fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	893a      	ldrh	r2, [r7, #8]
 8000ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4a50      	ldr	r2, [pc, #320]	; (8001144 <HAL_I2C_Master_Transmit+0x1f8>)
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001004:	8979      	ldrh	r1, [r7, #10]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	6a3a      	ldr	r2, [r7, #32]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 f89c 	bl	8001148 <I2C_MasterRequestWrite>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e08d      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001030:	e066      	b.n	8001100 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	6a39      	ldr	r1, [r7, #32]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 f9de 	bl	80013f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00d      	beq.n	800105e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2b04      	cmp	r3, #4
 8001048:	d107      	bne.n	800105a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001058:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e06b      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001078:	b29b      	uxth	r3, r3
 800107a:	3b01      	subs	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001086:	3b01      	subs	r3, #1
 8001088:	b29a      	uxth	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b04      	cmp	r3, #4
 800109a:	d11b      	bne.n	80010d4 <HAL_I2C_Master_Transmit+0x188>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d017      	beq.n	80010d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010be:	b29b      	uxth	r3, r3
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	6a39      	ldr	r1, [r7, #32]
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f000 f9ce 	bl	800147a <I2C_WaitOnBTFFlagUntilTimeout>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00d      	beq.n	8001100 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d107      	bne.n	80010fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e01a      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	2b00      	cmp	r3, #0
 8001106:	d194      	bne.n	8001032 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2220      	movs	r2, #32
 800111c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	e000      	b.n	8001136 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001134:	2302      	movs	r3, #2
  }
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	00100002 	.word	0x00100002
 8001144:	ffff0000 	.word	0xffff0000

08001148 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	460b      	mov	r3, r1
 8001156:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b08      	cmp	r3, #8
 8001162:	d006      	beq.n	8001172 <I2C_MasterRequestWrite+0x2a>
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d003      	beq.n	8001172 <I2C_MasterRequestWrite+0x2a>
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001170:	d108      	bne.n	8001184 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e00b      	b.n	800119c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	2b12      	cmp	r3, #18
 800118a:	d107      	bne.n	800119c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800119a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f000 f84f 	bl	800124c <I2C_WaitOnFlagUntilTimeout>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00d      	beq.n	80011d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c2:	d103      	bne.n	80011cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e035      	b.n	800123c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011d8:	d108      	bne.n	80011ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011da:	897b      	ldrh	r3, [r7, #10]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	e01b      	b.n	8001224 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80011ec:	897b      	ldrh	r3, [r7, #10]
 80011ee:	11db      	asrs	r3, r3, #7
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0306 	and.w	r3, r3, #6
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f063 030f 	orn	r3, r3, #15
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <I2C_MasterRequestWrite+0xfc>)
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 f875 	bl	80012fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e010      	b.n	800123c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800121a:	897b      	ldrh	r3, [r7, #10]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <I2C_MasterRequestWrite+0x100>)
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 f865 	bl	80012fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	00010008 	.word	0x00010008
 8001248:	00010002 	.word	0x00010002

0800124c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800125c:	e025      	b.n	80012aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d021      	beq.n	80012aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001266:	f7ff fa7f 	bl	8000768 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d302      	bcc.n	800127c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d116      	bne.n	80012aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2220      	movs	r2, #32
 8001286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 0220 	orr.w	r2, r3, #32
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e023      	b.n	80012f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	0c1b      	lsrs	r3, r3, #16
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d10d      	bne.n	80012d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4013      	ands	r3, r2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	e00c      	b.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4013      	ands	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d0b6      	beq.n	800125e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001308:	e051      	b.n	80013ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001318:	d123      	bne.n	8001362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001328:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001332:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2220      	movs	r2, #32
 800133e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f043 0204 	orr.w	r2, r3, #4
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e046      	b.n	80013f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d021      	beq.n	80013ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800136a:	f7ff f9fd 	bl	8000768 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	d302      	bcc.n	8001380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d116      	bne.n	80013ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f043 0220 	orr.w	r2, r3, #32
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e020      	b.n	80013f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0c1b      	lsrs	r3, r3, #16
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d10c      	bne.n	80013d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4013      	ands	r3, r2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	e00b      	b.n	80013ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	43da      	mvns	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	4013      	ands	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d18d      	bne.n	800130a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001404:	e02d      	b.n	8001462 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f878 	bl	80014fc <I2C_IsAcknowledgeFailed>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e02d      	b.n	8001472 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d021      	beq.n	8001462 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800141e:	f7ff f9a3 	bl	8000768 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	429a      	cmp	r2, r3
 800142c:	d302      	bcc.n	8001434 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d116      	bne.n	8001462 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2220      	movs	r2, #32
 800143e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f043 0220 	orr.w	r2, r3, #32
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e007      	b.n	8001472 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146c:	2b80      	cmp	r3, #128	; 0x80
 800146e:	d1ca      	bne.n	8001406 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001486:	e02d      	b.n	80014e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f837 	bl	80014fc <I2C_IsAcknowledgeFailed>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e02d      	b.n	80014f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149e:	d021      	beq.n	80014e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a0:	f7ff f962 	bl	8000768 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d302      	bcc.n	80014b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f043 0220 	orr.w	r2, r3, #32
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e007      	b.n	80014f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d1ca      	bne.n	8001488 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d11b      	bne.n	800154c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800151c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2220      	movs	r2, #32
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e272      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8087 	beq.w	8001686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001578:	4b92      	ldr	r3, [pc, #584]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b04      	cmp	r3, #4
 8001582:	d00c      	beq.n	800159e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001584:	4b8f      	ldr	r3, [pc, #572]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d112      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5e>
 8001590:	4b8c      	ldr	r3, [pc, #560]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d10b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	4b89      	ldr	r3, [pc, #548]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d06c      	beq.n	8001684 <HAL_RCC_OscConfig+0x12c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d168      	bne.n	8001684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e24c      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x76>
 80015c0:	4b80      	ldr	r3, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a7f      	ldr	r2, [pc, #508]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e02e      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x98>
 80015d6:	4b7b      	ldr	r3, [pc, #492]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a7a      	ldr	r2, [pc, #488]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a77      	ldr	r2, [pc, #476]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0xbc>
 80015fa:	4b72      	ldr	r3, [pc, #456]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a71      	ldr	r2, [pc, #452]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 8001614:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a67      	ldr	r2, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff f898 	bl	8000768 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff f894 	bl	8000768 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e200      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xe4>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff f884 	bl	8000768 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff f880 	bl	8000768 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1ec      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x10c>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d063      	beq.n	800175a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001692:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800169e:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x18c>
 80016aa:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c0      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4939      	ldr	r1, [pc, #228]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e03a      	b.n	800175a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff f839 	bl	8000768 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff f835 	bl	8000768 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1a1      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4927      	ldr	r1, [pc, #156]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff f818 	bl	8000768 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff f814 	bl	8000768 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e180      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03a      	beq.n	80017dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d019      	beq.n	80017a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_RCC_OscConfig+0x274>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7fe fff8 	bl	8000768 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7fe fff4 	bl	8000768 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e160      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 fac4 	bl	8001d28 <RCC_Delay>
 80017a0:	e01c      	b.n	80017dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_RCC_OscConfig+0x274>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7fe ffde 	bl	8000768 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ae:	e00f      	b.n	80017d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7fe ffda 	bl	8000768 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d908      	bls.n	80017d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e146      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	42420000 	.word	0x42420000
 80017cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e9      	bne.n	80017b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80a6 	beq.w	8001936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a87      	ldr	r2, [pc, #540]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b85      	ldr	r3, [pc, #532]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7fe ff9b 	bl	8000768 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7fe ff97 	bl	8000768 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	; 0x64
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e103      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x312>
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	e02d      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x334>
 8001872:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	e01c      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x356>
 8001894:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a57      	ldr	r2, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7fe ff4b 	bl	8000768 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7fe ff47 	bl	8000768 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0b1      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <HAL_RCC_OscConfig+0x37e>
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7fe ff35 	bl	8000768 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7fe ff31 	bl	8000768 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e09b      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8087 	beq.w	8001a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d061      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d146      	bne.n	80019e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7fe ff05 	bl	8000768 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001962:	f7fe ff01 	bl	8000768 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e06d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4921      	ldr	r1, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a19      	ldr	r1, [r3, #32]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	430b      	orrs	r3, r1
 80019ae:	491b      	ldr	r1, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7fe fed5 	bl	8000768 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7fe fed1 	bl	8000768 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e03d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46a>
 80019e0:	e035      	b.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7fe febe 	bl	8000768 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7fe feba 	bl	8000768 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e026      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x498>
 8001a0e:	e01e      	b.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e019      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_OscConfig+0x500>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0d0      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b6a      	ldr	r3, [pc, #424]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4965      	ldr	r1, [pc, #404]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b8      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	494d      	ldr	r1, [pc, #308]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d040      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e07f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e073      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06b      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4936      	ldr	r1, [pc, #216]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe fe0c 	bl	8000768 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7fe fe08 	bl	8000768 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e053      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d210      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4922      	ldr	r1, [pc, #136]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e032      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4916      	ldr	r1, [pc, #88]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	490e      	ldr	r1, [pc, #56]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bea:	f000 f821 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	490a      	ldr	r1, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	5ccb      	ldrb	r3, [r1, r3]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1cc>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1d0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fd6a 	bl	80006e4 <HAL_InitTick>

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08002694 	.word	0x08002694
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	b490      	push	{r4, r7}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xac>)
 8001c38:	1d3c      	adds	r4, r7, #4
 8001c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c40:	f240 2301 	movw	r3, #513	; 0x201
 8001c44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x40>
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d003      	beq.n	8001c76 <HAL_RCC_GetSysClockFreq+0x46>
 8001c6e:	e02b      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c72:	623b      	str	r3, [r7, #32]
      break;
 8001c74:	e02b      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	0c9b      	lsrs	r3, r3, #18
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3328      	adds	r3, #40	; 0x28
 8001c80:	443b      	add	r3, r7
 8001c82:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c86:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	0c5b      	lsrs	r3, r3, #17
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	3328      	adds	r3, #40	; 0x28
 8001c9e:	443b      	add	r3, r7
 8001ca0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ca4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001caa:	fb03 f202 	mul.w	r2, r3, r2
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	e004      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	623b      	str	r3, [r7, #32]
      break;
 8001cc6:	e002      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cca:	623b      	str	r3, [r7, #32]
      break;
 8001ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cce:	6a3b      	ldr	r3, [r7, #32]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc90      	pop	{r4, r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	08002684 	.word	0x08002684
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	003d0900 	.word	0x003d0900

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d04:	f7ff fff2 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	080026a4 	.word	0x080026a4

08001d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <RCC_Delay+0x34>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <RCC_Delay+0x38>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d44:	bf00      	nop
  }
  while (Delay --);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f9      	bne.n	8001d44 <RCC_Delay+0x1c>
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	10624dd3 	.word	0x10624dd3

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fc24 	bl	80005d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 f962 	bl	800206c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d001      	beq.n	8001e1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e032      	b.n	8001e82 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_TIM_Base_Start+0x88>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_TIM_Base_Start+0x48>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e36:	d009      	beq.n	8001e4c <HAL_TIM_Base_Start+0x48>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_TIM_Base_Start+0x8c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_Base_Start+0x48>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <HAL_TIM_Base_Start+0x90>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d010      	beq.n	8001e80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	e007      	b.n	8001e80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800

08001e98 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10f      	bne.n	8001ed0 <HAL_TIM_Base_Stop+0x38>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	f240 4344 	movw	r3, #1092	; 0x444
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_Base_Stop+0x38>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_TIM_ConfigClockSource+0x18>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0b3      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x180>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f34:	d03e      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0xd0>
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3a:	f200 8087 	bhi.w	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f42:	f000 8085 	beq.w	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4a:	d87f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f4c:	2b70      	cmp	r3, #112	; 0x70
 8001f4e:	d01a      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xa2>
 8001f50:	2b70      	cmp	r3, #112	; 0x70
 8001f52:	d87b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f54:	2b60      	cmp	r3, #96	; 0x60
 8001f56:	d050      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x116>
 8001f58:	2b60      	cmp	r3, #96	; 0x60
 8001f5a:	d877      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f5c:	2b50      	cmp	r3, #80	; 0x50
 8001f5e:	d03c      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0xf6>
 8001f60:	2b50      	cmp	r3, #80	; 0x50
 8001f62:	d873      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d058      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x136>
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d86f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f6c:	2b30      	cmp	r3, #48	; 0x30
 8001f6e:	d064      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f70:	2b30      	cmp	r3, #48	; 0x30
 8001f72:	d86b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d060      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d867      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05c      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d05a      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f84:	e062      	b.n	800204c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f000 f942 	bl	800221e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	609a      	str	r2, [r3, #8]
      break;
 8001fb2:	e04e      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f000 f92b 	bl	800221e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd6:	609a      	str	r2, [r3, #8]
      break;
 8001fd8:	e03b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f000 f8a2 	bl	8002130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2150      	movs	r1, #80	; 0x50
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f8f9 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e02b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	461a      	mov	r2, r3
 8002008:	f000 f8c0 	bl	800218c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2160      	movs	r1, #96	; 0x60
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f8e9 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8002018:	e01b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	f000 f882 	bl	8002130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2140      	movs	r1, #64	; 0x40
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8d9 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8002038:	e00b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	4610      	mov	r0, r2
 8002046:	f000 f8d0 	bl	80021ea <TIM_ITRx_SetConfig>
        break;
 800204a:	e002      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800204c:	bf00      	nop
 800204e:	e000      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002050:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a29      	ldr	r2, [pc, #164]	; (8002124 <TIM_Base_SetConfig+0xb8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00b      	beq.n	800209c <TIM_Base_SetConfig+0x30>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d007      	beq.n	800209c <TIM_Base_SetConfig+0x30>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a26      	ldr	r2, [pc, #152]	; (8002128 <TIM_Base_SetConfig+0xbc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d003      	beq.n	800209c <TIM_Base_SetConfig+0x30>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a25      	ldr	r2, [pc, #148]	; (800212c <TIM_Base_SetConfig+0xc0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d108      	bne.n	80020ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <TIM_Base_SetConfig+0xb8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0x62>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0x62>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <TIM_Base_SetConfig+0xbc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0x62>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a18      	ldr	r2, [pc, #96]	; (800212c <TIM_Base_SetConfig+0xc0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <TIM_Base_SetConfig+0xb8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	615a      	str	r2, [r3, #20]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800

08002130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0201 	bic.w	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800215a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 030a 	bic.w	r3, r3, #10
 800216c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	621a      	str	r2, [r3, #32]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f023 0210 	bic.w	r2, r3, #16
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	031b      	lsls	r3, r3, #12
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	621a      	str	r2, [r3, #32]
}
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	f043 0307 	orr.w	r3, r3, #7
 800220c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800221e:	b480      	push	{r7}
 8002220:	b087      	sub	sp, #28
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002238:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	021a      	lsls	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	431a      	orrs	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4313      	orrs	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	609a      	str	r2, [r3, #8]
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002270:	2302      	movs	r3, #2
 8002272:	e046      	b.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d009      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10c      	bne.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800

08002318 <delay_us>:
 */

#include "lcd_i2c.h"

void delay_us(uint32_t us)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	htim2.Instance->CNT = 0;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <delay_us+0x34>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <delay_us+0x34>)
 800232a:	f7ff fd6b 	bl	8001e04 <HAL_TIM_Base_Start>
	while(htim2.Instance->CNT < us);
 800232e:	bf00      	nop
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <delay_us+0x34>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f9      	bhi.n	8002330 <delay_us+0x18>
	HAL_TIM_Base_Stop(&htim2);
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <delay_us+0x34>)
 800233e:	f7ff fdab 	bl	8001e98 <HAL_TIM_Base_Stop>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200000d0 	.word	0x200000d0

08002350 <lcd_i2c_init>:

void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	460b      	mov	r3, r1
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	4613      	mov	r3, r2
 8002364:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	7e3a      	ldrb	r2, [r7, #24]
 800236a:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2208      	movs	r2, #8
 8002370:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	79fa      	ldrb	r2, [r7, #7]
 8002376:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	79ba      	ldrb	r2, [r7, #6]
 800237c:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2204      	movs	r2, #4
 8002388:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	delay_us(40000); 	//waiting for > 40ms
 800238a:	f649 4040 	movw	r0, #40000	; 0x9c40
 800238e:	f7ff ffc3 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 8002392:	2130      	movs	r1, #48	; 0x30
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f851 	bl	800243c <lcd_send_cmd>
	delay_us(5000);  // waiting for >4.1ms
 800239a:	f241 3088 	movw	r0, #5000	; 0x1388
 800239e:	f7ff ffbb 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023a2:	2130      	movs	r1, #48	; 0x30
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f849 	bl	800243c <lcd_send_cmd>
	delay_us(1000);  // waiting for >100us
 80023aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ae:	f7ff ffb3 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023b2:	2130      	movs	r1, #48	; 0x30
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f841 	bl	800243c <lcd_send_cmd>
	delay_us(10000);
 80023ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80023be:	f7ff ffab 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 80023c2:	2120      	movs	r1, #32
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f839 	bl	800243c <lcd_send_cmd>
	delay_us(10000);
 80023ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80023ce:	f7ff ffa3 	bl	8002318 <delay_us>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80023d2:	2128      	movs	r1, #40	; 0x28
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f831 	bl	800243c <lcd_send_cmd>
	delay_us(1000);
 80023da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023de:	f7ff ff9b 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 80023e2:	2108      	movs	r1, #8
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f829 	bl	800243c <lcd_send_cmd>
	delay_us(1000);
 80023ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ee:	f7ff ff93 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 80023f2:	2101      	movs	r1, #1
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f821 	bl	800243c <lcd_send_cmd>
	delay_us(1000);
 80023fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fe:	f7ff ff8b 	bl	8002318 <delay_us>
	delay_us(1000);
 8002402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002406:	f7ff ff87 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800240a:	2106      	movs	r1, #6
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f815 	bl	800243c <lcd_send_cmd>
	delay_us(1000);
 8002412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002416:	f7ff ff7f 	bl	8002318 <delay_us>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	791b      	ldrb	r3, [r3, #4]
 800241e:	f043 0308 	orr.w	r3, r3, #8
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f808 	bl	800243c <lcd_send_cmd>
	delay_us(1000);
 800242c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002430:	f7ff ff72 	bl	8002318 <delay_us>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f023 030f 	bic.w	r3, r3, #15
 800244e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	f043 030c 	orr.w	r3, r3, #12
 800245c:	b2db      	uxtb	r3, r3
 800245e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	f043 0308 	orr.w	r3, r3, #8
 8002466:	b2db      	uxtb	r3, r3
 8002468:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	f043 030c 	orr.w	r3, r3, #12
 8002470:	b2db      	uxtb	r3, r3
 8002472:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	f043 0308 	orr.w	r3, r3, #8
 800247a:	b2db      	uxtb	r3, r3
 800247c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6898      	ldr	r0, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	b299      	uxth	r1, r3
 8002488:	f107 0208 	add.w	r2, r7, #8
 800248c:	2364      	movs	r3, #100	; 0x64
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2304      	movs	r3, #4
 8002492:	f7fe fd5b 	bl	8000f4c <HAL_I2C_Master_Transmit>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af02      	add	r7, sp, #8
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f023 030f 	bic.w	r3, r3, #15
 80024b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	f043 030d 	orr.w	r3, r3, #13
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	f043 0309 	orr.w	r3, r3, #9
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	f043 030d 	orr.w	r3, r3, #13
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	f043 0309 	orr.w	r3, r3, #9
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6898      	ldr	r0, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	789b      	ldrb	r3, [r3, #2]
 80024e8:	b299      	uxth	r1, r3
 80024ea:	f107 0208 	add.w	r2, r7, #8
 80024ee:	2364      	movs	r3, #100	; 0x64
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2304      	movs	r3, #4
 80024f4:	f7fe fd2a 	bl	8000f4c <HAL_I2C_Master_Transmit>
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
 800250c:	4613      	mov	r3, r2
 800250e:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <lcd_set_cursor+0x50>)
 8002512:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	785b      	ldrb	r3, [r3, #1]
 8002518:	78ba      	ldrb	r2, [r7, #2]
 800251a:	429a      	cmp	r2, r3
 800251c:	d903      	bls.n	8002526 <lcd_set_cursor+0x26>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	3b01      	subs	r3, #1
 8002524:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 8002526:	78bb      	ldrb	r3, [r7, #2]
 8002528:	3310      	adds	r3, #16
 800252a:	443b      	add	r3, r7
 800252c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	4413      	add	r3, r2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800253c:	b25b      	sxtb	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ff7a 	bl	800243c <lcd_send_cmd>
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	54144000 	.word	0x54144000

08002554 <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 800255e:	e007      	b.n	8002570 <lcd_send_string+0x1c>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	603a      	str	r2, [r7, #0]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ff97 	bl	800249e <lcd_send_data>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f3      	bne.n	8002560 <lcd_send_string+0xc>
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <lcd_clear>:

void lcd_clear (LCD_I2C_HandleTypeDef *p_LCD)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 800258a:	2101      	movs	r1, #1
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff55 	bl	800243c <lcd_send_cmd>
	delay_us(5000);
 8002592:	f241 3088 	movw	r0, #5000	; 0x1388
 8002596:	f7ff febf 	bl	8002318 <delay_us>
	lcd_set_cursor(p_LCD, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffae 	bl	8002500 <lcd_set_cursor>
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <__libc_init_array>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	2600      	movs	r6, #0
 80025b0:	4d0c      	ldr	r5, [pc, #48]	; (80025e4 <__libc_init_array+0x38>)
 80025b2:	4c0d      	ldr	r4, [pc, #52]	; (80025e8 <__libc_init_array+0x3c>)
 80025b4:	1b64      	subs	r4, r4, r5
 80025b6:	10a4      	asrs	r4, r4, #2
 80025b8:	42a6      	cmp	r6, r4
 80025ba:	d109      	bne.n	80025d0 <__libc_init_array+0x24>
 80025bc:	f000 f822 	bl	8002604 <_init>
 80025c0:	2600      	movs	r6, #0
 80025c2:	4d0a      	ldr	r5, [pc, #40]	; (80025ec <__libc_init_array+0x40>)
 80025c4:	4c0a      	ldr	r4, [pc, #40]	; (80025f0 <__libc_init_array+0x44>)
 80025c6:	1b64      	subs	r4, r4, r5
 80025c8:	10a4      	asrs	r4, r4, #2
 80025ca:	42a6      	cmp	r6, r4
 80025cc:	d105      	bne.n	80025da <__libc_init_array+0x2e>
 80025ce:	bd70      	pop	{r4, r5, r6, pc}
 80025d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d4:	4798      	blx	r3
 80025d6:	3601      	adds	r6, #1
 80025d8:	e7ee      	b.n	80025b8 <__libc_init_array+0xc>
 80025da:	f855 3b04 	ldr.w	r3, [r5], #4
 80025de:	4798      	blx	r3
 80025e0:	3601      	adds	r6, #1
 80025e2:	e7f2      	b.n	80025ca <__libc_init_array+0x1e>
 80025e4:	080026ac 	.word	0x080026ac
 80025e8:	080026ac 	.word	0x080026ac
 80025ec:	080026ac 	.word	0x080026ac
 80025f0:	080026b0 	.word	0x080026b0

080025f4 <memset>:
 80025f4:	4603      	mov	r3, r0
 80025f6:	4402      	add	r2, r0
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d100      	bne.n	80025fe <memset+0xa>
 80025fc:	4770      	bx	lr
 80025fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002602:	e7f9      	b.n	80025f8 <memset+0x4>

08002604 <_init>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	bf00      	nop
 8002608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260a:	bc08      	pop	{r3}
 800260c:	469e      	mov	lr, r3
 800260e:	4770      	bx	lr

08002610 <_fini>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr
