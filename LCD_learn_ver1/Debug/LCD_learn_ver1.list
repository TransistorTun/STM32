
LCD_learn_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002548  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800267c  0800267c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800267c  0800267c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800267c  0800267c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002680  08002680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000005c  080026e0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080026e0  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b39a  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001867  00000000  00000000  0002b41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a6a  00000000  00000000  0002e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dac3  00000000  00000000  00045eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a457  00000000  00000000  00053975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dddcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000dde1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800263c 	.word	0x0800263c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800263c 	.word	0x0800263c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 facd 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f871 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f95d 	bl	8000418 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8b3 	bl	80002c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000162:	f000 f8df 	bl	8000324 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000166:	f000 f90b 	bl	8000380 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_i2c_init(&lcd_1, &hi2c1,20,4,0x27<<1);
 800016a:	234e      	movs	r3, #78	; 0x4e
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	2304      	movs	r3, #4
 8000170:	2214      	movs	r2, #20
 8000172:	492c      	ldr	r1, [pc, #176]	; (8000224 <main+0xd8>)
 8000174:	482c      	ldr	r0, [pc, #176]	; (8000228 <main+0xdc>)
 8000176:	f002 f907 	bl	8002388 <lcd_i2c_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_set_cursor(&lcd_1, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	482a      	ldr	r0, [pc, #168]	; (8000228 <main+0xdc>)
 8000180:	f002 f9da 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE1);
 8000184:	4929      	ldr	r1, [pc, #164]	; (800022c <main+0xe0>)
 8000186:	4828      	ldr	r0, [pc, #160]	; (8000228 <main+0xdc>)
 8000188:	f002 fa00 	bl	800258c <lcd_send_string>
	  lcd_set_cursor(&lcd_1, 0, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2100      	movs	r1, #0
 8000190:	4825      	ldr	r0, [pc, #148]	; (8000228 <main+0xdc>)
 8000192:	f002 f9d1 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE2);
 8000196:	4926      	ldr	r1, [pc, #152]	; (8000230 <main+0xe4>)
 8000198:	4823      	ldr	r0, [pc, #140]	; (8000228 <main+0xdc>)
 800019a:	f002 f9f7 	bl	800258c <lcd_send_string>
	  lcd_set_cursor(&lcd_1, 0, 2);
 800019e:	2202      	movs	r2, #2
 80001a0:	2100      	movs	r1, #0
 80001a2:	4821      	ldr	r0, [pc, #132]	; (8000228 <main+0xdc>)
 80001a4:	f002 f9c8 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE3);
 80001a8:	4922      	ldr	r1, [pc, #136]	; (8000234 <main+0xe8>)
 80001aa:	481f      	ldr	r0, [pc, #124]	; (8000228 <main+0xdc>)
 80001ac:	f002 f9ee 	bl	800258c <lcd_send_string>
	  lcd_set_cursor(&lcd_1, 0, 3);
 80001b0:	2203      	movs	r2, #3
 80001b2:	2100      	movs	r1, #0
 80001b4:	481c      	ldr	r0, [pc, #112]	; (8000228 <main+0xdc>)
 80001b6:	f002 f9bf 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE4);
 80001ba:	491f      	ldr	r1, [pc, #124]	; (8000238 <main+0xec>)
 80001bc:	481a      	ldr	r0, [pc, #104]	; (8000228 <main+0xdc>)
 80001be:	f002 f9e5 	bl	800258c <lcd_send_string>
	  HAL_Delay(1000);
 80001c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c6:	f000 faf5 	bl	80007b4 <HAL_Delay>
	  lcd_clear(&lcd_1);
 80001ca:	4817      	ldr	r0, [pc, #92]	; (8000228 <main+0xdc>)
 80001cc:	f002 f9f5 	bl	80025ba <lcd_clear>
	  lcd_set_cursor(&lcd_1, 0, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2100      	movs	r1, #0
 80001d4:	4814      	ldr	r0, [pc, #80]	; (8000228 <main+0xdc>)
 80001d6:	f002 f9af 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE1);
 80001da:	4914      	ldr	r1, [pc, #80]	; (800022c <main+0xe0>)
 80001dc:	4812      	ldr	r0, [pc, #72]	; (8000228 <main+0xdc>)
 80001de:	f002 f9d5 	bl	800258c <lcd_send_string>
	  lcd_set_cursor(&lcd_1, 0, 1);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2100      	movs	r1, #0
 80001e6:	4810      	ldr	r0, [pc, #64]	; (8000228 <main+0xdc>)
 80001e8:	f002 f9a6 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE2);
 80001ec:	4910      	ldr	r1, [pc, #64]	; (8000230 <main+0xe4>)
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <main+0xdc>)
 80001f0:	f002 f9cc 	bl	800258c <lcd_send_string>
	  lcd_set_cursor(&lcd_1, 0, 2);
 80001f4:	2202      	movs	r2, #2
 80001f6:	2100      	movs	r1, #0
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <main+0xdc>)
 80001fa:	f002 f99d 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE3);
 80001fe:	490d      	ldr	r1, [pc, #52]	; (8000234 <main+0xe8>)
 8000200:	4809      	ldr	r0, [pc, #36]	; (8000228 <main+0xdc>)
 8000202:	f002 f9c3 	bl	800258c <lcd_send_string>
//	  lcd_set_cursor(&lcd_1, 0, 3);
//	  lcd_send_string(&lcd_1, MODE4);
	  HAL_Delay(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 fad3 	bl	80007b4 <HAL_Delay>
	  lcd_set_cursor(&lcd_1, 0, 3);
 800020e:	2203      	movs	r2, #3
 8000210:	2100      	movs	r1, #0
 8000212:	4805      	ldr	r0, [pc, #20]	; (8000228 <main+0xdc>)
 8000214:	f002 f990 	bl	8002538 <lcd_set_cursor>
	  lcd_send_string(&lcd_1, MODE4);
 8000218:	4907      	ldr	r1, [pc, #28]	; (8000238 <main+0xec>)
 800021a:	4803      	ldr	r0, [pc, #12]	; (8000228 <main+0xdc>)
 800021c:	f002 f9b6 	bl	800258c <lcd_send_string>
	  lcd_set_cursor(&lcd_1, 0, 0);
 8000220:	e7ab      	b.n	800017a <main+0x2e>
 8000222:	bf00      	nop
 8000224:	20000078 	.word	0x20000078
 8000228:	20000168 	.word	0x20000168
 800022c:	20000000 	.word	0x20000000
 8000230:	20000014 	.word	0x20000014
 8000234:	20000024 	.word	0x20000024
 8000238:	2000003c 	.word	0x2000003c

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	; 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 f9ee 	bl	800262c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025e:	2301      	movs	r3, #1
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f983 	bl	8001590 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000290:	f000 f91a 	bl	80004c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fbf0 	bl	8001a94 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f905 	bl	80004c8 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_I2C1_Init+0x50>)
 80002ce:	4a13      	ldr	r2, [pc, #76]	; (800031c <MX_I2C1_Init+0x54>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_I2C1_Init+0x50>)
 80002d4:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_I2C1_Init+0x58>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_I2C1_Init+0x50>)
 80002e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <MX_I2C1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_I2C1_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000304:	4804      	ldr	r0, [pc, #16]	; (8000318 <MX_I2C1_Init+0x50>)
 8000306:	f000 fcf9 	bl	8000cfc <HAL_I2C_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000310:	f000 f8da 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000078 	.word	0x20000078
 800031c:	40005400 	.word	0x40005400
 8000320:	000186a0 	.word	0x000186a0

08000324 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_I2C2_Init+0x50>)
 800032a:	4a13      	ldr	r2, [pc, #76]	; (8000378 <MX_I2C2_Init+0x54>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_I2C2_Init+0x50>)
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <MX_I2C2_Init+0x58>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_I2C2_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_I2C2_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_I2C2_Init+0x50>)
 8000342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000346:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_I2C2_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_I2C2_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <MX_I2C2_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_I2C2_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_I2C2_Init+0x50>)
 8000362:	f000 fccb 	bl	8000cfc <HAL_I2C_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800036c:	f000 f8ac 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200000cc 	.word	0x200000cc
 8000378:	40005800 	.word	0x40005800
 800037c:	000186a0 	.word	0x000186a0

08000380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000394:	463b      	mov	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800039c:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_TIM2_Init+0x94>)
 800039e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_TIM2_Init+0x94>)
 80003a6:	2247      	movs	r2, #71	; 0x47
 80003a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_TIM2_Init+0x94>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_TIM2_Init+0x94>)
 80003b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <MX_TIM2_Init+0x94>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_TIM2_Init+0x94>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003c4:	4813      	ldr	r0, [pc, #76]	; (8000414 <MX_TIM2_Init+0x94>)
 80003c6:	f001 fce9 	bl	8001d9c <HAL_TIM_Base_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003d0:	f000 f87a 	bl	80004c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	4619      	mov	r1, r3
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <MX_TIM2_Init+0x94>)
 80003e2:	f001 fd9b 	bl	8001f1c <HAL_TIM_ConfigClockSource>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003ec:	f000 f86c 	bl	80004c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_TIM2_Init+0x94>)
 80003fe:	f001 ff49 	bl	8002294 <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000408:	f000 f85e 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000120 	.word	0x20000120

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <MX_GPIO_Init+0xa8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a23      	ldr	r2, [pc, #140]	; (80004c0 <MX_GPIO_Init+0xa8>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <MX_GPIO_Init+0xa8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_GPIO_Init+0xa8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <MX_GPIO_Init+0xa8>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <MX_GPIO_Init+0xa8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_GPIO_Init+0xa8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <MX_GPIO_Init+0xa8>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_GPIO_Init+0xa8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0308 	and.w	r3, r3, #8
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_GPIO_Init+0xa8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <MX_GPIO_Init+0xa8>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_GPIO_Init+0xa8>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	480c      	ldr	r0, [pc, #48]	; (80004c4 <MX_GPIO_Init+0xac>)
 8000494:	f000 fc1a 	bl	8000ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_GPIO_Init+0xac>)
 80004b2:	f000 fa87 	bl	80009c4 <HAL_GPIO_Init>

}
 80004b6:	bf00      	nop
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40011000 	.word	0x40011000

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <Error_Handler+0x8>
	...

080004d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_MspInit+0x5c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_MspInit+0x5c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <HAL_MspInit+0x5c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_MspInit+0x5c>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_MspInit+0x60>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_MspInit+0x60>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a2b      	ldr	r2, [pc, #172]	; (8000600 <HAL_I2C_MspInit+0xc8>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d124      	bne.n	80005a2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a29      	ldr	r2, [pc, #164]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000570:	23c0      	movs	r3, #192	; 0xc0
 8000572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000574:	2312      	movs	r3, #18
 8000576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	f107 0318 	add.w	r3, r7, #24
 8000580:	4619      	mov	r1, r3
 8000582:	4821      	ldr	r0, [pc, #132]	; (8000608 <HAL_I2C_MspInit+0xd0>)
 8000584:	f000 fa1e 	bl	80009c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 800058a:	69db      	ldr	r3, [r3, #28]
 800058c:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 800058e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000592:	61d3      	str	r3, [r2, #28]
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005a0:	e029      	b.n	80005f6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a19      	ldr	r2, [pc, #100]	; (800060c <HAL_I2C_MspInit+0xd4>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d124      	bne.n	80005f6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80005c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ca:	2312      	movs	r3, #18
 80005cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4619      	mov	r1, r3
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <HAL_I2C_MspInit+0xd0>)
 80005da:	f000 f9f3 	bl	80009c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 80005e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_I2C_MspInit+0xcc>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40005400 	.word	0x40005400
 8000604:	40021000 	.word	0x40021000
 8000608:	40010c00 	.word	0x40010c00
 800060c:	40005800 	.word	0x40005800

08000610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000620:	d10b      	bne.n	800063a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_TIM_Base_MspInit+0x34>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_TIM_Base_MspInit+0x34>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_TIM_Base_MspInit+0x34>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068e:	f000 f875 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
	...

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ca:	f7ff ffe4 	bl	8000696 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ce:	f001 ff89 	bl	80025e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd3b 	bl	800014c <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006e0:	08002684 	.word	0x08002684
  ldr r2, =_sbss
 80006e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006e8:	20000178 	.word	0x20000178

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f92b 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fee2 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f935 	bl	80009aa <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f90b 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000050 	.word	0x20000050
 8000774:	20000058 	.word	0x20000058
 8000778:	20000054 	.word	0x20000054

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000058 	.word	0x20000058
 800079c:	20000174 	.word	0x20000174

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000174 	.word	0x20000174

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff fff0 	bl	80007a0 <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_Delay+0x44>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffe0 	bl	80007a0 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000058 	.word	0x20000058

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	; (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	; (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	; 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff90 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff49 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff5e 	bl	8000844 <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff90 	bl	80008b4 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5f 	bl	8000860 <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffb0 	bl	8000918 <SysTick_Config>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b08b      	sub	sp, #44	; 0x2c
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d6:	e169      	b.n	8000cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d8:	2201      	movs	r2, #1
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	f040 8158 	bne.w	8000ca6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a9a      	ldr	r2, [pc, #616]	; (8000c64 <HAL_GPIO_Init+0x2a0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d05e      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a00:	4a98      	ldr	r2, [pc, #608]	; (8000c64 <HAL_GPIO_Init+0x2a0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d875      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a06:	4a98      	ldr	r2, [pc, #608]	; (8000c68 <HAL_GPIO_Init+0x2a4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d058      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a0c:	4a96      	ldr	r2, [pc, #600]	; (8000c68 <HAL_GPIO_Init+0x2a4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d86f      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a12:	4a96      	ldr	r2, [pc, #600]	; (8000c6c <HAL_GPIO_Init+0x2a8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d052      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a18:	4a94      	ldr	r2, [pc, #592]	; (8000c6c <HAL_GPIO_Init+0x2a8>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d869      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a1e:	4a94      	ldr	r2, [pc, #592]	; (8000c70 <HAL_GPIO_Init+0x2ac>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d04c      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a24:	4a92      	ldr	r2, [pc, #584]	; (8000c70 <HAL_GPIO_Init+0x2ac>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d863      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a2a:	4a92      	ldr	r2, [pc, #584]	; (8000c74 <HAL_GPIO_Init+0x2b0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d046      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a30:	4a90      	ldr	r2, [pc, #576]	; (8000c74 <HAL_GPIO_Init+0x2b0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d85d      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d82a      	bhi.n	8000a90 <HAL_GPIO_Init+0xcc>
 8000a3a:	2b12      	cmp	r3, #18
 8000a3c:	d859      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a3e:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <HAL_GPIO_Init+0x80>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000abf 	.word	0x08000abf
 8000a48:	08000a99 	.word	0x08000a99
 8000a4c:	08000aab 	.word	0x08000aab
 8000a50:	08000aed 	.word	0x08000aed
 8000a54:	08000af3 	.word	0x08000af3
 8000a58:	08000af3 	.word	0x08000af3
 8000a5c:	08000af3 	.word	0x08000af3
 8000a60:	08000af3 	.word	0x08000af3
 8000a64:	08000af3 	.word	0x08000af3
 8000a68:	08000af3 	.word	0x08000af3
 8000a6c:	08000af3 	.word	0x08000af3
 8000a70:	08000af3 	.word	0x08000af3
 8000a74:	08000af3 	.word	0x08000af3
 8000a78:	08000af3 	.word	0x08000af3
 8000a7c:	08000af3 	.word	0x08000af3
 8000a80:	08000af3 	.word	0x08000af3
 8000a84:	08000af3 	.word	0x08000af3
 8000a88:	08000aa1 	.word	0x08000aa1
 8000a8c:	08000ab5 	.word	0x08000ab5
 8000a90:	4a79      	ldr	r2, [pc, #484]	; (8000c78 <HAL_GPIO_Init+0x2b4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d013      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a96:	e02c      	b.n	8000af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	623b      	str	r3, [r7, #32]
          break;
 8000a9e:	e029      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	623b      	str	r3, [r7, #32]
          break;
 8000aa8:	e024      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	3308      	adds	r3, #8
 8000ab0:	623b      	str	r3, [r7, #32]
          break;
 8000ab2:	e01f      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	330c      	adds	r3, #12
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e01a      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d102      	bne.n	8000acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	623b      	str	r3, [r7, #32]
          break;
 8000aca:	e013      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d105      	bne.n	8000ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	611a      	str	r2, [r3, #16]
          break;
 8000ade:	e009      	b.n	8000af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	615a      	str	r2, [r3, #20]
          break;
 8000aea:	e003      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          break;
 8000af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	2bff      	cmp	r3, #255	; 0xff
 8000af8:	d801      	bhi.n	8000afe <HAL_GPIO_Init+0x13a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	e001      	b.n	8000b02 <HAL_GPIO_Init+0x13e>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3304      	adds	r3, #4
 8000b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	2bff      	cmp	r3, #255	; 0xff
 8000b08:	d802      	bhi.n	8000b10 <HAL_GPIO_Init+0x14c>
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x152>
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	3b08      	subs	r3, #8
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	401a      	ands	r2, r3
 8000b28:	6a39      	ldr	r1, [r7, #32]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	431a      	orrs	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b44:	4b4d      	ldr	r3, [pc, #308]	; (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a4c      	ldr	r2, [pc, #304]	; (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b5c:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <HAL_GPIO_Init+0x2bc>)
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a40      	ldr	r2, [pc, #256]	; (8000c84 <HAL_GPIO_Init+0x2c0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d013      	beq.n	8000bb0 <HAL_GPIO_Init+0x1ec>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3f      	ldr	r2, [pc, #252]	; (8000c88 <HAL_GPIO_Init+0x2c4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d00d      	beq.n	8000bac <HAL_GPIO_Init+0x1e8>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <HAL_GPIO_Init+0x2c8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d007      	beq.n	8000ba8 <HAL_GPIO_Init+0x1e4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3d      	ldr	r2, [pc, #244]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d101      	bne.n	8000ba4 <HAL_GPIO_Init+0x1e0>
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e006      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e004      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000ba8:	2302      	movs	r3, #2
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb4:	f002 0203 	and.w	r2, r2, #3
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	4093      	lsls	r3, r2
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bc2:	492f      	ldr	r1, [pc, #188]	; (8000c80 <HAL_GPIO_Init+0x2bc>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	3302      	adds	r3, #2
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	492c      	ldr	r1, [pc, #176]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4928      	ldr	r1, [pc, #160]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4922      	ldr	r1, [pc, #136]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	491e      	ldr	r1, [pc, #120]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	4918      	ldr	r1, [pc, #96]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	608b      	str	r3, [r1, #8]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4914      	ldr	r1, [pc, #80]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d021      	beq.n	8000c98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	490e      	ldr	r1, [pc, #56]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60cb      	str	r3, [r1, #12]
 8000c60:	e021      	b.n	8000ca6 <HAL_GPIO_Init+0x2e2>
 8000c62:	bf00      	nop
 8000c64:	10320000 	.word	0x10320000
 8000c68:	10310000 	.word	0x10310000
 8000c6c:	10220000 	.word	0x10220000
 8000c70:	10210000 	.word	0x10210000
 8000c74:	10120000 	.word	0x10120000
 8000c78:	10110000 	.word	0x10110000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40011400 	.word	0x40011400
 8000c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4909      	ldr	r1, [pc, #36]	; (8000cc8 <HAL_GPIO_Init+0x304>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	3301      	adds	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f47f ae8e 	bne.w	80009d8 <HAL_GPIO_Init+0x14>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	372c      	adds	r7, #44	; 0x2c
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	611a      	str	r2, [r3, #16]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e12b      	b.n	8000f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d106      	bne.n	8000d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fc08 	bl	8000538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d60:	f000 ffea 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8000d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a81      	ldr	r2, [pc, #516]	; (8000f70 <HAL_I2C_Init+0x274>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d807      	bhi.n	8000d80 <HAL_I2C_Init+0x84>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4a80      	ldr	r2, [pc, #512]	; (8000f74 <HAL_I2C_Init+0x278>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	bf94      	ite	ls
 8000d78:	2301      	movls	r3, #1
 8000d7a:	2300      	movhi	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	e006      	b.n	8000d8e <HAL_I2C_Init+0x92>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4a7d      	ldr	r2, [pc, #500]	; (8000f78 <HAL_I2C_Init+0x27c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	bf94      	ite	ls
 8000d88:	2301      	movls	r3, #1
 8000d8a:	2300      	movhi	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0e7      	b.n	8000f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4a78      	ldr	r2, [pc, #480]	; (8000f7c <HAL_I2C_Init+0x280>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9b      	lsrs	r3, r3, #18
 8000da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	4a6a      	ldr	r2, [pc, #424]	; (8000f70 <HAL_I2C_Init+0x274>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d802      	bhi.n	8000dd0 <HAL_I2C_Init+0xd4>
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	e009      	b.n	8000de4 <HAL_I2C_Init+0xe8>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	4a69      	ldr	r2, [pc, #420]	; (8000f80 <HAL_I2C_Init+0x284>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	099b      	lsrs	r3, r3, #6
 8000de2:	3301      	adds	r3, #1
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	495c      	ldr	r1, [pc, #368]	; (8000f70 <HAL_I2C_Init+0x274>)
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d819      	bhi.n	8000e38 <HAL_I2C_Init+0x13c>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1e59      	subs	r1, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e12:	1c59      	adds	r1, r3, #1
 8000e14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e18:	400b      	ands	r3, r1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00a      	beq.n	8000e34 <HAL_I2C_Init+0x138>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1e59      	subs	r1, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e32:	e051      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e04f      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d111      	bne.n	8000e64 <HAL_I2C_Init+0x168>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6859      	ldr	r1, [r3, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf0c      	ite	eq
 8000e5c:	2301      	moveq	r3, #1
 8000e5e:	2300      	movne	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	e012      	b.n	8000e8a <HAL_I2C_Init+0x18e>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6859      	ldr	r1, [r3, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	0099      	lsls	r1, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Init+0x196>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e022      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10e      	bne.n	8000eb8 <HAL_I2C_Init+0x1bc>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1e58      	subs	r0, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	440b      	add	r3, r1
 8000ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb6:	e00f      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6859      	ldr	r1, [r3, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	0099      	lsls	r1, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	6809      	ldr	r1, [r1, #0]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6911      	ldr	r1, [r2, #16]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68d2      	ldr	r2, [r2, #12]
 8000f12:	4311      	orrs	r1, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	000186a0 	.word	0x000186a0
 8000f74:	001e847f 	.word	0x001e847f
 8000f78:	003d08ff 	.word	0x003d08ff
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	460b      	mov	r3, r1
 8000f92:	817b      	strh	r3, [r7, #10]
 8000f94:	4613      	mov	r3, r2
 8000f96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff fc02 	bl	80007a0 <HAL_GetTick>
 8000f9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b20      	cmp	r3, #32
 8000fa8:	f040 80e0 	bne.w	800116c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2319      	movs	r3, #25
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4970      	ldr	r1, [pc, #448]	; (8001178 <HAL_I2C_Master_Transmit+0x1f4>)
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f964 	bl	8001284 <I2C_WaitOnFlagUntilTimeout>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e0d3      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <HAL_I2C_Master_Transmit+0x50>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e0cc      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d007      	beq.n	8000ffa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001008:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2221      	movs	r2, #33	; 0x21
 800100e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2210      	movs	r2, #16
 8001016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	893a      	ldrh	r2, [r7, #8]
 800102a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4a50      	ldr	r2, [pc, #320]	; (800117c <HAL_I2C_Master_Transmit+0x1f8>)
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800103c:	8979      	ldrh	r1, [r7, #10]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	6a3a      	ldr	r2, [r7, #32]
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f89c 	bl	8001180 <I2C_MasterRequestWrite>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e08d      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001068:	e066      	b.n	8001138 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	6a39      	ldr	r1, [r7, #32]
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f9de 	bl	8001430 <I2C_WaitOnTXEFlagUntilTimeout>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00d      	beq.n	8001096 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2b04      	cmp	r3, #4
 8001080:	d107      	bne.n	8001092 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e06b      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010be:	3b01      	subs	r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d11b      	bne.n	800110c <HAL_I2C_Master_Transmit+0x188>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d017      	beq.n	800110c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	3b01      	subs	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	6a39      	ldr	r1, [r7, #32]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f9ce 	bl	80014b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00d      	beq.n	8001138 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	2b04      	cmp	r3, #4
 8001122:	d107      	bne.n	8001134 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001132:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e01a      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d194      	bne.n	800106a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800114e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2220      	movs	r2, #32
 8001154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	e000      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800116c:	2302      	movs	r3, #2
  }
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00100002 	.word	0x00100002
 800117c:	ffff0000 	.word	0xffff0000

08001180 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af02      	add	r7, sp, #8
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	460b      	mov	r3, r1
 800118e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b08      	cmp	r3, #8
 800119a:	d006      	beq.n	80011aa <I2C_MasterRequestWrite+0x2a>
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d003      	beq.n	80011aa <I2C_MasterRequestWrite+0x2a>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80011a8:	d108      	bne.n	80011bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e00b      	b.n	80011d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	2b12      	cmp	r3, #18
 80011c2:	d107      	bne.n	80011d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f84f 	bl	8001284 <I2C_WaitOnFlagUntilTimeout>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00d      	beq.n	8001208 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fa:	d103      	bne.n	8001204 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e035      	b.n	8001274 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001210:	d108      	bne.n	8001224 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001212:	897b      	ldrh	r3, [r7, #10]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	e01b      	b.n	800125c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	11db      	asrs	r3, r3, #7
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0306 	and.w	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f063 030f 	orn	r3, r3, #15
 8001234:	b2da      	uxtb	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <I2C_MasterRequestWrite+0xfc>)
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f875 	bl	8001332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e010      	b.n	8001274 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <I2C_MasterRequestWrite+0x100>)
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f865 	bl	8001332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	00010008 	.word	0x00010008
 8001280:	00010002 	.word	0x00010002

08001284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001294:	e025      	b.n	80012e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d021      	beq.n	80012e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800129e:	f7ff fa7f 	bl	80007a0 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d302      	bcc.n	80012b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d116      	bne.n	80012e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2220      	movs	r2, #32
 80012be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f043 0220 	orr.w	r2, r3, #32
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e023      	b.n	800132a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10d      	bne.n	8001308 <I2C_WaitOnFlagUntilTimeout+0x84>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4013      	ands	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf0c      	ite	eq
 80012fe:	2301      	moveq	r3, #1
 8001300:	2300      	movne	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	e00c      	b.n	8001322 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4013      	ands	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	429a      	cmp	r2, r3
 8001326:	d0b6      	beq.n	8001296 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001340:	e051      	b.n	80013e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001350:	d123      	bne.n	800139a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001360:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800136a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2220      	movs	r2, #32
 8001376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f043 0204 	orr.w	r2, r3, #4
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e046      	b.n	8001428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d021      	beq.n	80013e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013a2:	f7ff f9fd 	bl	80007a0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d302      	bcc.n	80013b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d116      	bne.n	80013e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2220      	movs	r2, #32
 80013c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f043 0220 	orr.w	r2, r3, #32
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e020      	b.n	8001428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10c      	bne.n	800140a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4013      	ands	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf14      	ite	ne
 8001402:	2301      	movne	r3, #1
 8001404:	2300      	moveq	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	e00b      	b.n	8001422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	43da      	mvns	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4013      	ands	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d18d      	bne.n	8001342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800143c:	e02d      	b.n	800149a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f878 	bl	8001534 <I2C_IsAcknowledgeFailed>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e02d      	b.n	80014aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d021      	beq.n	800149a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001456:	f7ff f9a3 	bl	80007a0 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	429a      	cmp	r2, r3
 8001464:	d302      	bcc.n	800146c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d116      	bne.n	800149a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e007      	b.n	80014aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a4:	2b80      	cmp	r3, #128	; 0x80
 80014a6:	d1ca      	bne.n	800143e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014be:	e02d      	b.n	800151c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f837 	bl	8001534 <I2C_IsAcknowledgeFailed>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e02d      	b.n	800152c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d6:	d021      	beq.n	800151c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014d8:	f7ff f962 	bl	80007a0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d302      	bcc.n	80014ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f043 0220 	orr.w	r2, r3, #32
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e007      	b.n	800152c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b04      	cmp	r3, #4
 8001528:	d1ca      	bne.n	80014c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154a:	d11b      	bne.n	8001584 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001554:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f043 0204 	orr.w	r2, r3, #4
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e272      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8087 	beq.w	80016be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b0:	4b92      	ldr	r3, [pc, #584]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d00c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015bc:	4b8f      	ldr	r3, [pc, #572]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d112      	bne.n	80015ee <HAL_RCC_OscConfig+0x5e>
 80015c8:	4b8c      	ldr	r3, [pc, #560]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d10b      	bne.n	80015ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d6:	4b89      	ldr	r3, [pc, #548]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d06c      	beq.n	80016bc <HAL_RCC_OscConfig+0x12c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d168      	bne.n	80016bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e24c      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x76>
 80015f8:	4b80      	ldr	r3, [pc, #512]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a7f      	ldr	r2, [pc, #508]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e02e      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b7b      	ldr	r3, [pc, #492]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7a      	ldr	r2, [pc, #488]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b78      	ldr	r3, [pc, #480]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a77      	ldr	r2, [pc, #476]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0xbc>
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a71      	ldr	r2, [pc, #452]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6e      	ldr	r2, [pc, #440]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 800164c:	4b6b      	ldr	r3, [pc, #428]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6a      	ldr	r2, [pc, #424]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a67      	ldr	r2, [pc, #412]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff f898 	bl	80007a0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff f894 	bl	80007a0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e200      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xe4>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff f884 	bl	80007a0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff f880 	bl	80007a0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1ec      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x10c>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d063      	beq.n	8001792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ca:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x18c>
 80016e2:	4b46      	ldr	r3, [pc, #280]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x176>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e1c0      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4939      	ldr	r1, [pc, #228]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e03a      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff f839 	bl	80007a0 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff f835 	bl	80007a0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1a1      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4927      	ldr	r1, [pc, #156]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff f818 	bl	80007a0 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff f814 	bl	80007a0 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e180      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d03a      	beq.n	8001814 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d019      	beq.n	80017da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7fe fff8 	bl	80007a0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7fe fff4 	bl	80007a0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e160      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f000 fac4 	bl	8001d60 <RCC_Delay>
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7fe ffde 	bl	80007a0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e6:	e00f      	b.n	8001808 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7fe ffda 	bl	80007a0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d908      	bls.n	8001808 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e146      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	42420000 	.word	0x42420000
 8001804:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e9      	bne.n	80017e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a6 	beq.w	800196e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001826:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10d      	bne.n	800184e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a87      	ldr	r2, [pc, #540]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b82      	ldr	r3, [pc, #520]	; (8001a58 <HAL_RCC_OscConfig+0x4c8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <HAL_RCC_OscConfig+0x4c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7e      	ldr	r2, [pc, #504]	; (8001a58 <HAL_RCC_OscConfig+0x4c8>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7fe ff9b 	bl	80007a0 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7fe ff97 	bl	80007a0 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b64      	cmp	r3, #100	; 0x64
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e103      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b75      	ldr	r3, [pc, #468]	; (8001a58 <HAL_RCC_OscConfig+0x4c8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x312>
 8001894:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	e02d      	b.n	80018fe <HAL_RCC_OscConfig+0x36e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x334>
 80018aa:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a69      	ldr	r2, [pc, #420]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a66      	ldr	r2, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	e01c      	b.n	80018fe <HAL_RCC_OscConfig+0x36e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x356>
 80018cc:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a60      	ldr	r2, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a5d      	ldr	r2, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	e00b      	b.n	80018fe <HAL_RCC_OscConfig+0x36e>
 80018e6:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a57      	ldr	r2, [pc, #348]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d015      	beq.n	8001932 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7fe ff4b 	bl	80007a0 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7fe ff47 	bl	80007a0 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0b1      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ee      	beq.n	800190e <HAL_RCC_OscConfig+0x37e>
 8001930:	e014      	b.n	800195c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7fe ff35 	bl	80007a0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7fe ff31 	bl	80007a0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e09b      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ee      	bne.n	800193a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d105      	bne.n	800196e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a3b      	ldr	r2, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8087 	beq.w	8001a86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d061      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d146      	bne.n	8001a1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x4cc>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7fe ff05 	bl	80007a0 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7fe ff01 	bl	80007a0 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e06d      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d108      	bne.n	80019d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4921      	ldr	r1, [pc, #132]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a19      	ldr	r1, [r3, #32]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	430b      	orrs	r3, r1
 80019e6:	491b      	ldr	r1, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7fe fed5 	bl	80007a0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7fe fed1 	bl	80007a0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e03d      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x46a>
 8001a18:	e035      	b.n	8001a86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x4cc>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7fe febe 	bl	80007a0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7fe feba 	bl	80007a0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e026      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x498>
 8001a46:	e01e      	b.n	8001a86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e019      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_OscConfig+0x500>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0d0      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0207 	bic.w	r2, r3, #7
 8001abe:	4965      	ldr	r1, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	494d      	ldr	r1, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d040      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e073      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4936      	ldr	r1, [pc, #216]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7fe fe0c 	bl	80007a0 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7fe fe08 	bl	80007a0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e053      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d210      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	4922      	ldr	r1, [pc, #136]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e032      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4916      	ldr	r1, [pc, #88]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c22:	f000 f821 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	490a      	ldr	r1, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1cc>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1d0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fd6a 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08002664 	.word	0x08002664
 8001c60:	20000050 	.word	0x20000050
 8001c64:	20000054 	.word	0x20000054

08001c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	b490      	push	{r4, r7}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c70:	1d3c      	adds	r4, r7, #4
 8001c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c78:	f240 2301 	movw	r3, #513	; 0x201
 8001c7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x46>
 8001ca6:	e02b      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001caa:	623b      	str	r3, [r7, #32]
      break;
 8001cac:	e02b      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3328      	adds	r3, #40	; 0x28
 8001cb8:	443b      	add	r3, r7
 8001cba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cbe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0c5b      	lsrs	r3, r3, #17
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	3328      	adds	r3, #40	; 0x28
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ce2:	fb03 f202 	mul.w	r2, r3, r2
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e004      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	623b      	str	r3, [r7, #32]
      break;
 8001cfe:	e002      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d02:	623b      	str	r3, [r7, #32]
      break;
 8001d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d06:	6a3b      	ldr	r3, [r7, #32]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc90      	pop	{r4, r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	08002654 	.word	0x08002654
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	003d0900 	.word	0x003d0900

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000050 	.word	0x20000050

08001d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d3c:	f7ff fff2 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08002674 	.word	0x08002674

08001d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <RCC_Delay+0x34>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <RCC_Delay+0x38>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0a5b      	lsrs	r3, r3, #9
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d7c:	bf00      	nop
  }
  while (Delay --);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	60fa      	str	r2, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <RCC_Delay+0x1c>
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	20000050 	.word	0x20000050
 8001d98:	10624dd3 	.word	0x10624dd3

08001d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e041      	b.n	8001e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fc24 	bl	8000610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f000 f962 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_TIM_Base_Start+0x88>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00e      	beq.n	8001e84 <HAL_TIM_Base_Start+0x48>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d009      	beq.n	8001e84 <HAL_TIM_Base_Start+0x48>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_TIM_Base_Start+0x8c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_TIM_Base_Start+0x48>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_TIM_Base_Start+0x90>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d111      	bne.n	8001ea8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d010      	beq.n	8001eb8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea6:	e007      	b.n	8001eb8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10f      	bne.n	8001f08 <HAL_TIM_Base_Stop+0x38>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	f240 4344 	movw	r3, #1092	; 0x444
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_Base_Stop+0x38>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_TIM_ConfigClockSource+0x18>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e0b3      	b.n	800209c <HAL_TIM_ConfigClockSource+0x180>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6c:	d03e      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0xd0>
 8001f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f72:	f200 8087 	bhi.w	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7a:	f000 8085 	beq.w	8002088 <HAL_TIM_ConfigClockSource+0x16c>
 8001f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f82:	d87f      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001f84:	2b70      	cmp	r3, #112	; 0x70
 8001f86:	d01a      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0xa2>
 8001f88:	2b70      	cmp	r3, #112	; 0x70
 8001f8a:	d87b      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001f8c:	2b60      	cmp	r3, #96	; 0x60
 8001f8e:	d050      	beq.n	8002032 <HAL_TIM_ConfigClockSource+0x116>
 8001f90:	2b60      	cmp	r3, #96	; 0x60
 8001f92:	d877      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001f94:	2b50      	cmp	r3, #80	; 0x50
 8001f96:	d03c      	beq.n	8002012 <HAL_TIM_ConfigClockSource+0xf6>
 8001f98:	2b50      	cmp	r3, #80	; 0x50
 8001f9a:	d873      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d058      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0x136>
 8001fa0:	2b40      	cmp	r3, #64	; 0x40
 8001fa2:	d86f      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001fa4:	2b30      	cmp	r3, #48	; 0x30
 8001fa6:	d064      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x156>
 8001fa8:	2b30      	cmp	r3, #48	; 0x30
 8001faa:	d86b      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d060      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x156>
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d867      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05c      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x156>
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d05a      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001fbc:	e062      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6899      	ldr	r1, [r3, #8]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f000 f942 	bl	8002256 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	609a      	str	r2, [r3, #8]
      break;
 8001fea:	e04e      	b.n	800208a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6899      	ldr	r1, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f000 f92b 	bl	8002256 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800200e:	609a      	str	r2, [r3, #8]
      break;
 8002010:	e03b      	b.n	800208a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	461a      	mov	r2, r3
 8002020:	f000 f8a2 	bl	8002168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2150      	movs	r1, #80	; 0x50
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f8f9 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8002030:	e02b      	b.n	800208a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6859      	ldr	r1, [r3, #4]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	461a      	mov	r2, r3
 8002040:	f000 f8c0 	bl	80021c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2160      	movs	r1, #96	; 0x60
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f8e9 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8002050:	e01b      	b.n	800208a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	461a      	mov	r2, r3
 8002060:	f000 f882 	bl	8002168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f8d9 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8002070:	e00b      	b.n	800208a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f000 f8d0 	bl	8002222 <TIM_ITRx_SetConfig>
        break;
 8002082:	e002      	b.n	800208a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002084:	bf00      	nop
 8002086:	e000      	b.n	800208a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002088:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <TIM_Base_SetConfig+0xb8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00b      	beq.n	80020d4 <TIM_Base_SetConfig+0x30>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d007      	beq.n	80020d4 <TIM_Base_SetConfig+0x30>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <TIM_Base_SetConfig+0xbc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0x30>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a25      	ldr	r2, [pc, #148]	; (8002164 <TIM_Base_SetConfig+0xc0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d108      	bne.n	80020e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <TIM_Base_SetConfig+0xb8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00b      	beq.n	8002106 <TIM_Base_SetConfig+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d007      	beq.n	8002106 <TIM_Base_SetConfig+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <TIM_Base_SetConfig+0xbc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a18      	ldr	r2, [pc, #96]	; (8002164 <TIM_Base_SetConfig+0xc0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d108      	bne.n	8002118 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a07      	ldr	r2, [pc, #28]	; (800215c <TIM_Base_SetConfig+0xb8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	615a      	str	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800

08002168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f023 0201 	bic.w	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f023 030a 	bic.w	r3, r3, #10
 80021a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	621a      	str	r2, [r3, #32]
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f023 0210 	bic.w	r2, r3, #16
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002200:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	621a      	str	r2, [r3, #32]
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	f043 0307 	orr.w	r3, r3, #7
 8002244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002256:	b480      	push	{r7}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002270:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	431a      	orrs	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4313      	orrs	r3, r2
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	609a      	str	r2, [r3, #8]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e046      	b.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00e      	beq.n	800230e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d009      	beq.n	800230e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10c      	bne.n	8002328 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4313      	orrs	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800

08002350 <delay_us>:
 */

#include "lcd_i2c.h"

void delay_us(uint32_t us)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	htim2.Instance->CNT = 0;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <delay_us+0x34>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2200      	movs	r2, #0
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8002360:	4808      	ldr	r0, [pc, #32]	; (8002384 <delay_us+0x34>)
 8002362:	f7ff fd6b 	bl	8001e3c <HAL_TIM_Base_Start>
	while(htim2.Instance->CNT < us);
 8002366:	bf00      	nop
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <delay_us+0x34>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f9      	bhi.n	8002368 <delay_us+0x18>
	HAL_TIM_Base_Stop(&htim2);
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <delay_us+0x34>)
 8002376:	f7ff fdab 	bl	8001ed0 <HAL_TIM_Base_Stop>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000120 	.word	0x20000120

08002388 <lcd_i2c_init>:

void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	460b      	mov	r3, r1
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	4613      	mov	r3, r2
 800239c:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	7e3a      	ldrb	r2, [r7, #24]
 80023a2:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2208      	movs	r2, #8
 80023a8:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	79ba      	ldrb	r2, [r7, #6]
 80023b4:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2204      	movs	r2, #4
 80023c0:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	delay_us(40000); 	//waiting for > 40ms
 80023c2:	f649 4040 	movw	r0, #40000	; 0x9c40
 80023c6:	f7ff ffc3 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023ca:	2130      	movs	r1, #48	; 0x30
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f851 	bl	8002474 <lcd_send_cmd>
	delay_us(5000);  // waiting for >4.1ms
 80023d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80023d6:	f7ff ffbb 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023da:	2130      	movs	r1, #48	; 0x30
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f849 	bl	8002474 <lcd_send_cmd>
	delay_us(1000);  // waiting for >100us
 80023e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e6:	f7ff ffb3 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, 0x30);
 80023ea:	2130      	movs	r1, #48	; 0x30
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f841 	bl	8002474 <lcd_send_cmd>
	delay_us(10000);
 80023f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80023f6:	f7ff ffab 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 80023fa:	2120      	movs	r1, #32
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f839 	bl	8002474 <lcd_send_cmd>
	delay_us(10000);
 8002402:	f242 7010 	movw	r0, #10000	; 0x2710
 8002406:	f7ff ffa3 	bl	8002350 <delay_us>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800240a:	2128      	movs	r1, #40	; 0x28
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f831 	bl	8002474 <lcd_send_cmd>
	delay_us(1000);
 8002412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002416:	f7ff ff9b 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 800241a:	2108      	movs	r1, #8
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f829 	bl	8002474 <lcd_send_cmd>
	delay_us(1000);
 8002422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002426:	f7ff ff93 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 800242a:	2101      	movs	r1, #1
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f821 	bl	8002474 <lcd_send_cmd>
	delay_us(1000);
 8002432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002436:	f7ff ff8b 	bl	8002350 <delay_us>
	delay_us(1000);
 800243a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800243e:	f7ff ff87 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002442:	2106      	movs	r1, #6
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f815 	bl	8002474 <lcd_send_cmd>
	delay_us(1000);
 800244a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800244e:	f7ff ff7f 	bl	8002350 <delay_us>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	f043 0308 	orr.w	r3, r3, #8
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f808 	bl	8002474 <lcd_send_cmd>
	delay_us(1000);
 8002464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002468:	f7ff ff72 	bl	8002350 <delay_us>
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f023 030f 	bic.w	r3, r3, #15
 8002486:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	f043 030c 	orr.w	r3, r3, #12
 8002494:	b2db      	uxtb	r3, r3
 8002496:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 80024a2:	7bbb      	ldrb	r3, [r7, #14]
 80024a4:	f043 030c 	orr.w	r3, r3, #12
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 80024ac:	7bbb      	ldrb	r3, [r7, #14]
 80024ae:	f043 0308 	orr.w	r3, r3, #8
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6898      	ldr	r0, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	789b      	ldrb	r3, [r3, #2]
 80024be:	b299      	uxth	r1, r3
 80024c0:	f107 0208 	add.w	r2, r7, #8
 80024c4:	2364      	movs	r3, #100	; 0x64
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2304      	movs	r3, #4
 80024ca:	f7fe fd5b 	bl	8000f84 <HAL_I2C_Master_Transmit>
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af02      	add	r7, sp, #8
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f023 030f 	bic.w	r3, r3, #15
 80024e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	f043 030d 	orr.w	r3, r3, #13
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	f043 0309 	orr.w	r3, r3, #9
 8002500:	b2db      	uxtb	r3, r3
 8002502:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	f043 030d 	orr.w	r3, r3, #13
 800250a:	b2db      	uxtb	r3, r3
 800250c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	f043 0309 	orr.w	r3, r3, #9
 8002514:	b2db      	uxtb	r3, r3
 8002516:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6898      	ldr	r0, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	789b      	ldrb	r3, [r3, #2]
 8002520:	b299      	uxth	r1, r3
 8002522:	f107 0208 	add.w	r2, r7, #8
 8002526:	2364      	movs	r3, #100	; 0x64
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2304      	movs	r3, #4
 800252c:	f7fe fd2a 	bl	8000f84 <HAL_I2C_Master_Transmit>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
 8002544:	4613      	mov	r3, r2
 8002546:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <lcd_set_cursor+0x50>)
 800254a:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	78ba      	ldrb	r2, [r7, #2]
 8002552:	429a      	cmp	r2, r3
 8002554:	d903      	bls.n	800255e <lcd_set_cursor+0x26>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	3b01      	subs	r3, #1
 800255c:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 800255e:	78bb      	ldrb	r3, [r7, #2]
 8002560:	3310      	adds	r3, #16
 8002562:	443b      	add	r3, r7
 8002564:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	4413      	add	r3, r2
 800256c:	b2db      	uxtb	r3, r3
 800256e:	b25b      	sxtb	r3, r3
 8002570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002574:	b25b      	sxtb	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff7a 	bl	8002474 <lcd_send_cmd>
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	54144000 	.word	0x54144000

0800258c <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 8002596:	e007      	b.n	80025a8 <lcd_send_string+0x1c>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	603a      	str	r2, [r7, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff97 	bl	80024d6 <lcd_send_data>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f3      	bne.n	8002598 <lcd_send_string+0xc>
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <lcd_clear>:

void lcd_clear (LCD_I2C_HandleTypeDef *p_LCD)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 80025c2:	2101      	movs	r1, #1
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff55 	bl	8002474 <lcd_send_cmd>
	delay_us(1000);
 80025ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ce:	f7ff febf 	bl	8002350 <delay_us>
	lcd_set_cursor(p_LCD, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffae 	bl	8002538 <lcd_set_cursor>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <__libc_init_array>:
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	2600      	movs	r6, #0
 80025e8:	4d0c      	ldr	r5, [pc, #48]	; (800261c <__libc_init_array+0x38>)
 80025ea:	4c0d      	ldr	r4, [pc, #52]	; (8002620 <__libc_init_array+0x3c>)
 80025ec:	1b64      	subs	r4, r4, r5
 80025ee:	10a4      	asrs	r4, r4, #2
 80025f0:	42a6      	cmp	r6, r4
 80025f2:	d109      	bne.n	8002608 <__libc_init_array+0x24>
 80025f4:	f000 f822 	bl	800263c <_init>
 80025f8:	2600      	movs	r6, #0
 80025fa:	4d0a      	ldr	r5, [pc, #40]	; (8002624 <__libc_init_array+0x40>)
 80025fc:	4c0a      	ldr	r4, [pc, #40]	; (8002628 <__libc_init_array+0x44>)
 80025fe:	1b64      	subs	r4, r4, r5
 8002600:	10a4      	asrs	r4, r4, #2
 8002602:	42a6      	cmp	r6, r4
 8002604:	d105      	bne.n	8002612 <__libc_init_array+0x2e>
 8002606:	bd70      	pop	{r4, r5, r6, pc}
 8002608:	f855 3b04 	ldr.w	r3, [r5], #4
 800260c:	4798      	blx	r3
 800260e:	3601      	adds	r6, #1
 8002610:	e7ee      	b.n	80025f0 <__libc_init_array+0xc>
 8002612:	f855 3b04 	ldr.w	r3, [r5], #4
 8002616:	4798      	blx	r3
 8002618:	3601      	adds	r6, #1
 800261a:	e7f2      	b.n	8002602 <__libc_init_array+0x1e>
 800261c:	0800267c 	.word	0x0800267c
 8002620:	0800267c 	.word	0x0800267c
 8002624:	0800267c 	.word	0x0800267c
 8002628:	08002680 	.word	0x08002680

0800262c <memset>:
 800262c:	4603      	mov	r3, r0
 800262e:	4402      	add	r2, r0
 8002630:	4293      	cmp	r3, r2
 8002632:	d100      	bne.n	8002636 <memset+0xa>
 8002634:	4770      	bx	lr
 8002636:	f803 1b01 	strb.w	r1, [r3], #1
 800263a:	e7f9      	b.n	8002630 <memset+0x4>

0800263c <_init>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr

08002648 <_fini>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr
